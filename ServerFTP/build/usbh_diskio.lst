ARM GAS  /tmp/ccqxrlEa.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"usbh_diskio.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.USBH_initialize,"ax",%progbits
  18              		.align	1
  19              		.global	USBH_initialize
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-sp-d16
  25              	USBH_initialize:
  26              	.LFB141:
  27              		.file 1 "Src/usbh_diskio.c"
   1:Src/usbh_diskio.c **** /**
   2:Src/usbh_diskio.c ****   ******************************************************************************
   3:Src/usbh_diskio.c ****   * @file    usbh_diskio.c (based on usbh_diskio_template.c v2.0.2)
   4:Src/usbh_diskio.c ****   * @brief   USB Host Disk I/O driver
   5:Src/usbh_diskio.c ****   ******************************************************************************
   6:Src/usbh_diskio.c ****   * This notice applies to any and all portions of this file
   7:Src/usbh_diskio.c ****   * that are not between comment pairs USER CODE BEGIN and
   8:Src/usbh_diskio.c ****   * USER CODE END. Other portions of this file, whether 
   9:Src/usbh_diskio.c ****   * inserted by the user or by software development tools
  10:Src/usbh_diskio.c ****   * are owned by their respective copyright owners.
  11:Src/usbh_diskio.c ****   *
  12:Src/usbh_diskio.c ****   * Copyright (c) 2018 STMicroelectronics International N.V. 
  13:Src/usbh_diskio.c ****   * All rights reserved.
  14:Src/usbh_diskio.c ****   *
  15:Src/usbh_diskio.c ****   * Redistribution and use in source and binary forms, with or without 
  16:Src/usbh_diskio.c ****   * modification, are permitted, provided that the following conditions are met:
  17:Src/usbh_diskio.c ****   *
  18:Src/usbh_diskio.c ****   * 1. Redistribution of source code must retain the above copyright notice, 
  19:Src/usbh_diskio.c ****   *    this list of conditions and the following disclaimer.
  20:Src/usbh_diskio.c ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  21:Src/usbh_diskio.c ****   *    this list of conditions and the following disclaimer in the documentation
  22:Src/usbh_diskio.c ****   *    and/or other materials provided with the distribution.
  23:Src/usbh_diskio.c ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  24:Src/usbh_diskio.c ****   *    contributors to this software may be used to endorse or promote products 
  25:Src/usbh_diskio.c ****   *    derived from this software without specific written permission.
  26:Src/usbh_diskio.c ****   * 4. This software, including modifications and/or derivative works of this 
  27:Src/usbh_diskio.c ****   *    software, must execute solely and exclusively on microcontroller or
  28:Src/usbh_diskio.c ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  29:Src/usbh_diskio.c ****   * 5. Redistribution and use of this software other than as permitted under 
  30:Src/usbh_diskio.c ****   *    this license is void and will automatically terminate your rights under 
  31:Src/usbh_diskio.c ****   *    this license. 
ARM GAS  /tmp/ccqxrlEa.s 			page 2


  32:Src/usbh_diskio.c ****   *
  33:Src/usbh_diskio.c ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  34:Src/usbh_diskio.c ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  35:Src/usbh_diskio.c ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  36:Src/usbh_diskio.c ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  37:Src/usbh_diskio.c ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  38:Src/usbh_diskio.c ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  39:Src/usbh_diskio.c ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  40:Src/usbh_diskio.c ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  41:Src/usbh_diskio.c ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  42:Src/usbh_diskio.c ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  43:Src/usbh_diskio.c ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  44:Src/usbh_diskio.c ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  45:Src/usbh_diskio.c ****   *
  46:Src/usbh_diskio.c ****   ******************************************************************************
  47:Src/usbh_diskio.c ****   */
  48:Src/usbh_diskio.c **** /* USER CODE BEGIN firstSection */ 
  49:Src/usbh_diskio.c **** /* can be used to modify / undefine following code or add new definitions */
  50:Src/usbh_diskio.c **** /* USER CODE END firstSection */ 
  51:Src/usbh_diskio.c **** 
  52:Src/usbh_diskio.c **** /* Includes ------------------------------------------------------------------*/
  53:Src/usbh_diskio.c **** #include "ff_gen_drv.h"
  54:Src/usbh_diskio.c **** #include "usbh_diskio.h"
  55:Src/usbh_diskio.c **** 
  56:Src/usbh_diskio.c **** /* Private typedef -----------------------------------------------------------*/
  57:Src/usbh_diskio.c **** /* Private define ------------------------------------------------------------*/
  58:Src/usbh_diskio.c **** 
  59:Src/usbh_diskio.c **** #define USB_DEFAULT_BLOCK_SIZE 512
  60:Src/usbh_diskio.c **** 
  61:Src/usbh_diskio.c **** /* Private variables ---------------------------------------------------------*/
  62:Src/usbh_diskio.c **** extern USBH_HandleTypeDef  hUSB_Host;
  63:Src/usbh_diskio.c **** 
  64:Src/usbh_diskio.c **** /* Private function prototypes -----------------------------------------------*/
  65:Src/usbh_diskio.c **** DSTATUS USBH_initialize (BYTE);
  66:Src/usbh_diskio.c **** DSTATUS USBH_status (BYTE);
  67:Src/usbh_diskio.c **** DRESULT USBH_read (BYTE, BYTE*, DWORD, UINT);
  68:Src/usbh_diskio.c **** 
  69:Src/usbh_diskio.c **** #if _USE_WRITE == 1
  70:Src/usbh_diskio.c ****   DRESULT USBH_write (BYTE, const BYTE*, DWORD, UINT);
  71:Src/usbh_diskio.c **** #endif /* _USE_WRITE == 1 */
  72:Src/usbh_diskio.c **** 
  73:Src/usbh_diskio.c **** #if _USE_IOCTL == 1
  74:Src/usbh_diskio.c ****   DRESULT USBH_ioctl (BYTE, BYTE, void*);
  75:Src/usbh_diskio.c **** #endif /* _USE_IOCTL == 1 */
  76:Src/usbh_diskio.c **** 
  77:Src/usbh_diskio.c **** const Diskio_drvTypeDef  USBH_Driver =
  78:Src/usbh_diskio.c **** {
  79:Src/usbh_diskio.c ****   USBH_initialize,
  80:Src/usbh_diskio.c ****   USBH_status,
  81:Src/usbh_diskio.c ****   USBH_read,
  82:Src/usbh_diskio.c **** #if  _USE_WRITE == 1
  83:Src/usbh_diskio.c ****   USBH_write,
  84:Src/usbh_diskio.c **** #endif /* _USE_WRITE == 1 */
  85:Src/usbh_diskio.c **** #if  _USE_IOCTL == 1
  86:Src/usbh_diskio.c ****   USBH_ioctl,
  87:Src/usbh_diskio.c **** #endif /* _USE_IOCTL == 1 */
  88:Src/usbh_diskio.c **** };
ARM GAS  /tmp/ccqxrlEa.s 			page 3


  89:Src/usbh_diskio.c **** 
  90:Src/usbh_diskio.c **** /* USER CODE BEGIN beforeFunctionSection */
  91:Src/usbh_diskio.c **** /* can be used to modify / undefine following code or add new code */
  92:Src/usbh_diskio.c **** /* USER CODE END beforeFunctionSection */
  93:Src/usbh_diskio.c **** 
  94:Src/usbh_diskio.c **** /* Private functions ---------------------------------------------------------*/
  95:Src/usbh_diskio.c **** 
  96:Src/usbh_diskio.c **** /**
  97:Src/usbh_diskio.c ****   * @brief  Initializes a Drive
  98:Src/usbh_diskio.c ****   * @param  lun : lun id
  99:Src/usbh_diskio.c ****   * @retval DSTATUS: Operation status
 100:Src/usbh_diskio.c ****   */
 101:Src/usbh_diskio.c **** DSTATUS USBH_initialize(BYTE lun)
 102:Src/usbh_diskio.c **** {
  28              		.loc 1 102 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
 103:Src/usbh_diskio.c ****   /* CAUTION : USB Host library has to be initialized in the application */
 104:Src/usbh_diskio.c **** 
 105:Src/usbh_diskio.c ****   return RES_OK;
 106:Src/usbh_diskio.c **** }
  34              		.loc 1 106 0
  35 0000 0020     		movs	r0, #0
  36              	.LVL1:
  37 0002 7047     		bx	lr
  38              		.cfi_endproc
  39              	.LFE141:
  41              		.section	.text.USBH_status,"ax",%progbits
  42              		.align	1
  43              		.global	USBH_status
  44              		.syntax unified
  45              		.thumb
  46              		.thumb_func
  47              		.fpu fpv5-sp-d16
  49              	USBH_status:
  50              	.LFB142:
 107:Src/usbh_diskio.c **** 
 108:Src/usbh_diskio.c **** /**
 109:Src/usbh_diskio.c ****   * @brief  Gets Disk Status
 110:Src/usbh_diskio.c ****   * @param  lun : lun id
 111:Src/usbh_diskio.c ****   * @retval DSTATUS: Operation status
 112:Src/usbh_diskio.c ****   */
 113:Src/usbh_diskio.c **** DSTATUS USBH_status(BYTE lun)
 114:Src/usbh_diskio.c **** {
  51              		.loc 1 114 0
  52              		.cfi_startproc
  53              		@ args = 0, pretend = 0, frame = 0
  54              		@ frame_needed = 0, uses_anonymous_args = 0
  55              	.LVL2:
  56 0000 08B5     		push	{r3, lr}
  57              	.LCFI0:
  58              		.cfi_def_cfa_offset 8
  59              		.cfi_offset 3, -8
  60              		.cfi_offset 14, -4
ARM GAS  /tmp/ccqxrlEa.s 			page 4


  61              	.LVL3:
 115:Src/usbh_diskio.c ****   DRESULT res = RES_ERROR;
 116:Src/usbh_diskio.c **** 
 117:Src/usbh_diskio.c ****   if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
  62              		.loc 1 117 0
  63 0002 0146     		mov	r1, r0
  64 0004 0348     		ldr	r0, .L7
  65              	.LVL4:
  66 0006 FFF7FEFF 		bl	USBH_MSC_UnitIsReady
  67              	.LVL5:
  68 000a 08B9     		cbnz	r0, .L6
 118:Src/usbh_diskio.c ****   {
 119:Src/usbh_diskio.c ****     res = RES_OK;
 120:Src/usbh_diskio.c ****   }
 121:Src/usbh_diskio.c ****   else
 122:Src/usbh_diskio.c ****   {
 123:Src/usbh_diskio.c ****     res = RES_ERROR;
  69              		.loc 1 123 0
  70 000c 0120     		movs	r0, #1
  71              	.L3:
  72              	.LVL6:
 124:Src/usbh_diskio.c ****   }
 125:Src/usbh_diskio.c **** 
 126:Src/usbh_diskio.c ****   return res;
 127:Src/usbh_diskio.c **** }
  73              		.loc 1 127 0
  74 000e 08BD     		pop	{r3, pc}
  75              	.LVL7:
  76              	.L6:
 119:Src/usbh_diskio.c ****   }
  77              		.loc 1 119 0
  78 0010 0020     		movs	r0, #0
  79 0012 FCE7     		b	.L3
  80              	.L8:
  81              		.align	2
  82              	.L7:
  83 0014 00000000 		.word	hUsbHostFS
  84              		.cfi_endproc
  85              	.LFE142:
  87              		.section	.text.USBH_read,"ax",%progbits
  88              		.align	1
  89              		.global	USBH_read
  90              		.syntax unified
  91              		.thumb
  92              		.thumb_func
  93              		.fpu fpv5-sp-d16
  95              	USBH_read:
  96              	.LFB143:
 128:Src/usbh_diskio.c **** 
 129:Src/usbh_diskio.c **** /* USER CODE BEGIN beforeReadSection */
 130:Src/usbh_diskio.c **** /* can be used to modify previous code / undefine following code / add new code */
 131:Src/usbh_diskio.c **** /* USER CODE END beforeReadSection */
 132:Src/usbh_diskio.c **** 
 133:Src/usbh_diskio.c **** /**
 134:Src/usbh_diskio.c ****   * @brief  Reads Sector(s)
 135:Src/usbh_diskio.c ****   * @param  lun : lun id
 136:Src/usbh_diskio.c ****   * @param  *buff: Data buffer to store read data
ARM GAS  /tmp/ccqxrlEa.s 			page 5


 137:Src/usbh_diskio.c ****   * @param  sector: Sector address (LBA)
 138:Src/usbh_diskio.c ****   * @param  count: Number of sectors to read (1..128)
 139:Src/usbh_diskio.c ****   * @retval DRESULT: Operation result
 140:Src/usbh_diskio.c ****   */
 141:Src/usbh_diskio.c **** DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
 142:Src/usbh_diskio.c **** {
  97              		.loc 1 142 0
  98              		.cfi_startproc
  99              		@ args = 0, pretend = 0, frame = 56
 100              		@ frame_needed = 0, uses_anonymous_args = 0
 101              	.LVL8:
 102 0000 10B5     		push	{r4, lr}
 103              	.LCFI1:
 104              		.cfi_def_cfa_offset 8
 105              		.cfi_offset 4, -8
 106              		.cfi_offset 14, -4
 107 0002 90B0     		sub	sp, sp, #64
 108              	.LCFI2:
 109              		.cfi_def_cfa_offset 72
 110 0004 0446     		mov	r4, r0
 111              	.LVL9:
 143:Src/usbh_diskio.c ****   DRESULT res = RES_ERROR;
 144:Src/usbh_diskio.c ****   MSC_LUNTypeDef info;
 145:Src/usbh_diskio.c **** 
 146:Src/usbh_diskio.c ****   if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 112              		.loc 1 146 0
 113 0006 0093     		str	r3, [sp]
 114 0008 0B46     		mov	r3, r1
 115              	.LVL10:
 116 000a 0146     		mov	r1, r0
 117              	.LVL11:
 118 000c 0B48     		ldr	r0, .L17
 119              	.LVL12:
 120 000e FFF7FEFF 		bl	USBH_MSC_Read
 121              	.LVL13:
 122 0012 10B9     		cbnz	r0, .L16
 147:Src/usbh_diskio.c ****   {
 148:Src/usbh_diskio.c ****     res = RES_OK;
 123              		.loc 1 148 0
 124 0014 0020     		movs	r0, #0
 125              	.L10:
 126              	.LVL14:
 149:Src/usbh_diskio.c ****   }
 150:Src/usbh_diskio.c ****   else
 151:Src/usbh_diskio.c ****   {
 152:Src/usbh_diskio.c ****     USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 153:Src/usbh_diskio.c **** 
 154:Src/usbh_diskio.c ****     switch (info.sense.asc)
 155:Src/usbh_diskio.c ****     {
 156:Src/usbh_diskio.c ****     case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
 157:Src/usbh_diskio.c ****     case SCSI_ASC_MEDIUM_NOT_PRESENT:
 158:Src/usbh_diskio.c ****     case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
 159:Src/usbh_diskio.c ****       USBH_ErrLog ("USB Disk is not ready!");
 160:Src/usbh_diskio.c ****       res = RES_NOTRDY;
 161:Src/usbh_diskio.c ****       break; 
 162:Src/usbh_diskio.c **** 
 163:Src/usbh_diskio.c ****     default:
ARM GAS  /tmp/ccqxrlEa.s 			page 6


 164:Src/usbh_diskio.c ****       res = RES_ERROR;
 165:Src/usbh_diskio.c ****       break;
 166:Src/usbh_diskio.c ****     }
 167:Src/usbh_diskio.c ****   }
 168:Src/usbh_diskio.c **** 
 169:Src/usbh_diskio.c ****   return res;
 170:Src/usbh_diskio.c **** }
 127              		.loc 1 170 0
 128 0016 10B0     		add	sp, sp, #64
 129              	.LCFI3:
 130              		.cfi_remember_state
 131              		.cfi_def_cfa_offset 8
 132              		@ sp needed
 133 0018 10BD     		pop	{r4, pc}
 134              	.LVL15:
 135              	.L16:
 136              	.LCFI4:
 137              		.cfi_restore_state
 152:Src/usbh_diskio.c **** 
 138              		.loc 1 152 0
 139 001a 03AA     		add	r2, sp, #12
 140 001c 2146     		mov	r1, r4
 141 001e 0748     		ldr	r0, .L17
 142 0020 FFF7FEFF 		bl	USBH_MSC_GetLUNInfo
 143              	.LVL16:
 154:Src/usbh_diskio.c ****     {
 144              		.loc 1 154 0
 145 0024 9DF81930 		ldrb	r3, [sp, #25]	@ zero_extendqisi2
 146 0028 282B     		cmp	r3, #40
 147 002a 05D0     		beq	.L11
 148 002c 3A2B     		cmp	r3, #58
 149 002e 03D0     		beq	.L11
 150 0030 042B     		cmp	r3, #4
 151 0032 01D0     		beq	.L11
 164:Src/usbh_diskio.c ****       break;
 152              		.loc 1 164 0
 153 0034 0120     		movs	r0, #1
 154 0036 EEE7     		b	.L10
 155              	.L11:
 160:Src/usbh_diskio.c ****       break; 
 156              		.loc 1 160 0
 157 0038 0320     		movs	r0, #3
 158 003a ECE7     		b	.L10
 159              	.L18:
 160              		.align	2
 161              	.L17:
 162 003c 00000000 		.word	hUsbHostFS
 163              		.cfi_endproc
 164              	.LFE143:
 166              		.section	.text.USBH_ioctl,"ax",%progbits
 167              		.align	1
 168              		.global	USBH_ioctl
 169              		.syntax unified
 170              		.thumb
 171              		.thumb_func
 172              		.fpu fpv5-sp-d16
 174              	USBH_ioctl:
ARM GAS  /tmp/ccqxrlEa.s 			page 7


 175              	.LFB145:
 171:Src/usbh_diskio.c **** 
 172:Src/usbh_diskio.c **** /* USER CODE BEGIN beforeWriteSection */
 173:Src/usbh_diskio.c **** /* can be used to modify previous code / undefine following code / add new code */
 174:Src/usbh_diskio.c **** /* USER CODE END beforeWriteSection */
 175:Src/usbh_diskio.c **** 
 176:Src/usbh_diskio.c **** /**
 177:Src/usbh_diskio.c ****   * @brief  Writes Sector(s)
 178:Src/usbh_diskio.c ****   * @param  lun : lun id
 179:Src/usbh_diskio.c ****   * @param  *buff: Data to be written
 180:Src/usbh_diskio.c ****   * @param  sector: Sector address (LBA)
 181:Src/usbh_diskio.c ****   * @param  count: Number of sectors to write (1..128)
 182:Src/usbh_diskio.c ****   * @retval DRESULT: Operation result
 183:Src/usbh_diskio.c ****   */
 184:Src/usbh_diskio.c **** #if _USE_WRITE == 1
 185:Src/usbh_diskio.c **** DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
 186:Src/usbh_diskio.c **** {
 187:Src/usbh_diskio.c ****   DRESULT res = RES_ERROR;
 188:Src/usbh_diskio.c ****   MSC_LUNTypeDef info;
 189:Src/usbh_diskio.c **** 
 190:Src/usbh_diskio.c ****   if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 191:Src/usbh_diskio.c ****   {
 192:Src/usbh_diskio.c ****     res = RES_OK;
 193:Src/usbh_diskio.c ****   }
 194:Src/usbh_diskio.c ****   else
 195:Src/usbh_diskio.c ****   {
 196:Src/usbh_diskio.c ****     USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 197:Src/usbh_diskio.c **** 
 198:Src/usbh_diskio.c ****     switch (info.sense.asc)
 199:Src/usbh_diskio.c ****     {
 200:Src/usbh_diskio.c ****     case SCSI_ASC_WRITE_PROTECTED:
 201:Src/usbh_diskio.c ****       USBH_ErrLog("USB Disk is Write protected!");
 202:Src/usbh_diskio.c ****       res = RES_WRPRT;
 203:Src/usbh_diskio.c ****       break;
 204:Src/usbh_diskio.c **** 
 205:Src/usbh_diskio.c ****     case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
 206:Src/usbh_diskio.c ****     case SCSI_ASC_MEDIUM_NOT_PRESENT:
 207:Src/usbh_diskio.c ****     case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
 208:Src/usbh_diskio.c ****       USBH_ErrLog("USB Disk is not ready!");
 209:Src/usbh_diskio.c ****       res = RES_NOTRDY;
 210:Src/usbh_diskio.c ****       break;
 211:Src/usbh_diskio.c **** 
 212:Src/usbh_diskio.c ****     default:
 213:Src/usbh_diskio.c ****       res = RES_ERROR;
 214:Src/usbh_diskio.c ****       break;
 215:Src/usbh_diskio.c ****     }
 216:Src/usbh_diskio.c ****   }
 217:Src/usbh_diskio.c **** 
 218:Src/usbh_diskio.c ****   return res;
 219:Src/usbh_diskio.c **** }
 220:Src/usbh_diskio.c **** #endif /* _USE_WRITE == 1 */
 221:Src/usbh_diskio.c **** 
 222:Src/usbh_diskio.c **** /* USER CODE BEGIN beforeIoctlSection */
 223:Src/usbh_diskio.c **** /* can be used to modify previous code / undefine following code / add new code */
 224:Src/usbh_diskio.c **** /* USER CODE END beforeIoctlSection */
 225:Src/usbh_diskio.c **** 
 226:Src/usbh_diskio.c **** /**
ARM GAS  /tmp/ccqxrlEa.s 			page 8


 227:Src/usbh_diskio.c ****   * @brief  I/O control operation
 228:Src/usbh_diskio.c ****   * @param  lun : lun id
 229:Src/usbh_diskio.c ****   * @param  cmd: Control code
 230:Src/usbh_diskio.c ****   * @param  *buff: Buffer to send/receive control data
 231:Src/usbh_diskio.c ****   * @retval DRESULT: Operation result
 232:Src/usbh_diskio.c ****   */
 233:Src/usbh_diskio.c **** #if _USE_IOCTL == 1
 234:Src/usbh_diskio.c **** DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
 235:Src/usbh_diskio.c **** {
 176              		.loc 1 235 0
 177              		.cfi_startproc
 178              		@ args = 0, pretend = 0, frame = 56
 179              		@ frame_needed = 0, uses_anonymous_args = 0
 180              	.LVL17:
 181 0000 10B5     		push	{r4, lr}
 182              	.LCFI5:
 183              		.cfi_def_cfa_offset 8
 184              		.cfi_offset 4, -8
 185              		.cfi_offset 14, -4
 186 0002 8EB0     		sub	sp, sp, #56
 187              	.LCFI6:
 188              		.cfi_def_cfa_offset 64
 189 0004 1446     		mov	r4, r2
 190              	.LVL18:
 236:Src/usbh_diskio.c ****   DRESULT res = RES_ERROR;
 237:Src/usbh_diskio.c ****   MSC_LUNTypeDef info;
 238:Src/usbh_diskio.c **** 
 239:Src/usbh_diskio.c ****   switch (cmd)
 191              		.loc 1 239 0
 192 0006 0329     		cmp	r1, #3
 193 0008 24D8     		bhi	.L26
 194 000a DFE801F0 		tbb	[pc, r1]
 195              	.L22:
 196 000e 02       		.byte	(.L21-.L22)/2
 197 000f 05       		.byte	(.L23-.L22)/2
 198 0010 0E       		.byte	(.L24-.L22)/2
 199 0011 18       		.byte	(.L25-.L22)/2
 200              		.p2align 1
 201              	.L21:
 240:Src/usbh_diskio.c ****   {
 241:Src/usbh_diskio.c ****   /* Make sure that no pending write process */
 242:Src/usbh_diskio.c ****   case CTRL_SYNC:
 243:Src/usbh_diskio.c ****     res = RES_OK;
 202              		.loc 1 243 0
 203 0012 0020     		movs	r0, #0
 204              	.LVL19:
 205              	.L20:
 244:Src/usbh_diskio.c ****     break;
 245:Src/usbh_diskio.c **** 
 246:Src/usbh_diskio.c ****   /* Get number of sectors on the disk (DWORD) */
 247:Src/usbh_diskio.c ****   case GET_SECTOR_COUNT :
 248:Src/usbh_diskio.c ****     if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 249:Src/usbh_diskio.c ****     {
 250:Src/usbh_diskio.c ****       *(DWORD*)buff = info.capacity.block_nbr;
 251:Src/usbh_diskio.c ****       res = RES_OK;
 252:Src/usbh_diskio.c ****     }
 253:Src/usbh_diskio.c ****     else
ARM GAS  /tmp/ccqxrlEa.s 			page 9


 254:Src/usbh_diskio.c ****     {
 255:Src/usbh_diskio.c ****       res = RES_ERROR;
 256:Src/usbh_diskio.c ****     }
 257:Src/usbh_diskio.c ****     break;
 258:Src/usbh_diskio.c **** 
 259:Src/usbh_diskio.c ****   /* Get R/W sector size (WORD) */
 260:Src/usbh_diskio.c ****   case GET_SECTOR_SIZE :
 261:Src/usbh_diskio.c ****     if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 262:Src/usbh_diskio.c ****     {
 263:Src/usbh_diskio.c ****       *(DWORD*)buff = info.capacity.block_size;
 264:Src/usbh_diskio.c ****       res = RES_OK;
 265:Src/usbh_diskio.c ****     }
 266:Src/usbh_diskio.c ****     else
 267:Src/usbh_diskio.c ****     {
 268:Src/usbh_diskio.c ****       res = RES_ERROR;
 269:Src/usbh_diskio.c ****     }
 270:Src/usbh_diskio.c ****     break;
 271:Src/usbh_diskio.c **** 
 272:Src/usbh_diskio.c ****     /* Get erase block size in unit of sector (DWORD) */
 273:Src/usbh_diskio.c ****   case GET_BLOCK_SIZE :
 274:Src/usbh_diskio.c **** 
 275:Src/usbh_diskio.c ****     if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 276:Src/usbh_diskio.c ****     {
 277:Src/usbh_diskio.c ****       *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 278:Src/usbh_diskio.c ****       res = RES_OK;
 279:Src/usbh_diskio.c ****     }
 280:Src/usbh_diskio.c ****     else
 281:Src/usbh_diskio.c ****     {
 282:Src/usbh_diskio.c ****       res = RES_ERROR;
 283:Src/usbh_diskio.c ****     }
 284:Src/usbh_diskio.c ****     break;
 285:Src/usbh_diskio.c **** 
 286:Src/usbh_diskio.c ****   default:
 287:Src/usbh_diskio.c ****     res = RES_PARERR;
 288:Src/usbh_diskio.c ****   }
 289:Src/usbh_diskio.c **** 
 290:Src/usbh_diskio.c ****   return res;
 291:Src/usbh_diskio.c **** }
 206              		.loc 1 291 0
 207 0014 0EB0     		add	sp, sp, #56
 208              	.LCFI7:
 209              		.cfi_remember_state
 210              		.cfi_def_cfa_offset 8
 211              		@ sp needed
 212 0016 10BD     		pop	{r4, pc}
 213              	.LVL20:
 214              	.L23:
 215              	.LCFI8:
 216              		.cfi_restore_state
 248:Src/usbh_diskio.c ****     {
 217              		.loc 1 248 0
 218 0018 01AA     		add	r2, sp, #4
 219              	.LVL21:
 220 001a 0146     		mov	r1, r0
 221              	.LVL22:
 222 001c 1148     		ldr	r0, .L31
 223              	.LVL23:
ARM GAS  /tmp/ccqxrlEa.s 			page 10


 224 001e FFF7FEFF 		bl	USBH_MSC_GetLUNInfo
 225              	.LVL24:
 226 0022 C8B9     		cbnz	r0, .L27
 250:Src/usbh_diskio.c ****       res = RES_OK;
 227              		.loc 1 250 0
 228 0024 029B     		ldr	r3, [sp, #8]
 229 0026 2360     		str	r3, [r4]
 230              	.LVL25:
 231 0028 F4E7     		b	.L20
 232              	.LVL26:
 233              	.L24:
 261:Src/usbh_diskio.c ****     {
 234              		.loc 1 261 0
 235 002a 01AA     		add	r2, sp, #4
 236              	.LVL27:
 237 002c 0146     		mov	r1, r0
 238              	.LVL28:
 239 002e 0D48     		ldr	r0, .L31
 240              	.LVL29:
 241 0030 FFF7FEFF 		bl	USBH_MSC_GetLUNInfo
 242              	.LVL30:
 243 0034 90B9     		cbnz	r0, .L28
 263:Src/usbh_diskio.c ****       res = RES_OK;
 244              		.loc 1 263 0
 245 0036 BDF80C30 		ldrh	r3, [sp, #12]
 246 003a 2360     		str	r3, [r4]
 247              	.LVL31:
 248 003c EAE7     		b	.L20
 249              	.LVL32:
 250              	.L25:
 275:Src/usbh_diskio.c ****     {
 251              		.loc 1 275 0
 252 003e 01AA     		add	r2, sp, #4
 253              	.LVL33:
 254 0040 0146     		mov	r1, r0
 255              	.LVL34:
 256 0042 0848     		ldr	r0, .L31
 257              	.LVL35:
 258 0044 FFF7FEFF 		bl	USBH_MSC_GetLUNInfo
 259              	.LVL36:
 260 0048 50B9     		cbnz	r0, .L29
 277:Src/usbh_diskio.c ****       res = RES_OK;
 261              		.loc 1 277 0
 262 004a BDF80C30 		ldrh	r3, [sp, #12]
 263 004e 5B0A     		lsrs	r3, r3, #9
 264 0050 2360     		str	r3, [r4]
 265              	.LVL37:
 266 0052 DFE7     		b	.L20
 267              	.LVL38:
 268              	.L26:
 287:Src/usbh_diskio.c ****   }
 269              		.loc 1 287 0
 270 0054 0420     		movs	r0, #4
 271              	.LVL39:
 272 0056 DDE7     		b	.L20
 273              	.LVL40:
 274              	.L27:
ARM GAS  /tmp/ccqxrlEa.s 			page 11


 255:Src/usbh_diskio.c ****     }
 275              		.loc 1 255 0
 276 0058 0120     		movs	r0, #1
 277 005a DBE7     		b	.L20
 278              	.L28:
 268:Src/usbh_diskio.c ****     }
 279              		.loc 1 268 0
 280 005c 0120     		movs	r0, #1
 281 005e D9E7     		b	.L20
 282              	.L29:
 282:Src/usbh_diskio.c ****     }
 283              		.loc 1 282 0
 284 0060 0120     		movs	r0, #1
 285 0062 D7E7     		b	.L20
 286              	.L32:
 287              		.align	2
 288              	.L31:
 289 0064 00000000 		.word	hUsbHostFS
 290              		.cfi_endproc
 291              	.LFE145:
 293              		.section	.text.USBH_write,"ax",%progbits
 294              		.align	1
 295              		.global	USBH_write
 296              		.syntax unified
 297              		.thumb
 298              		.thumb_func
 299              		.fpu fpv5-sp-d16
 301              	USBH_write:
 302              	.LFB144:
 186:Src/usbh_diskio.c ****   DRESULT res = RES_ERROR;
 303              		.loc 1 186 0
 304              		.cfi_startproc
 305              		@ args = 0, pretend = 0, frame = 56
 306              		@ frame_needed = 0, uses_anonymous_args = 0
 307              	.LVL41:
 308 0000 10B5     		push	{r4, lr}
 309              	.LCFI9:
 310              		.cfi_def_cfa_offset 8
 311              		.cfi_offset 4, -8
 312              		.cfi_offset 14, -4
 313 0002 90B0     		sub	sp, sp, #64
 314              	.LCFI10:
 315              		.cfi_def_cfa_offset 72
 316 0004 0446     		mov	r4, r0
 317              	.LVL42:
 190:Src/usbh_diskio.c ****   {
 318              		.loc 1 190 0
 319 0006 0093     		str	r3, [sp]
 320 0008 0B46     		mov	r3, r1
 321              	.LVL43:
 322 000a 0146     		mov	r1, r0
 323              	.LVL44:
 324 000c 0E48     		ldr	r0, .L43
 325              	.LVL45:
 326 000e FFF7FEFF 		bl	USBH_MSC_Write
 327              	.LVL46:
 328 0012 10B9     		cbnz	r0, .L41
ARM GAS  /tmp/ccqxrlEa.s 			page 12


 192:Src/usbh_diskio.c ****   }
 329              		.loc 1 192 0
 330 0014 0020     		movs	r0, #0
 331              	.L34:
 332              	.LVL47:
 219:Src/usbh_diskio.c **** #endif /* _USE_WRITE == 1 */
 333              		.loc 1 219 0
 334 0016 10B0     		add	sp, sp, #64
 335              	.LCFI11:
 336              		.cfi_remember_state
 337              		.cfi_def_cfa_offset 8
 338              		@ sp needed
 339 0018 10BD     		pop	{r4, pc}
 340              	.LVL48:
 341              	.L41:
 342              	.LCFI12:
 343              		.cfi_restore_state
 196:Src/usbh_diskio.c **** 
 344              		.loc 1 196 0
 345 001a 03AA     		add	r2, sp, #12
 346 001c 2146     		mov	r1, r4
 347 001e 0A48     		ldr	r0, .L43
 348 0020 FFF7FEFF 		bl	USBH_MSC_GetLUNInfo
 349              	.LVL49:
 198:Src/usbh_diskio.c ****     {
 350              		.loc 1 198 0
 351 0024 9DF81930 		ldrb	r3, [sp, #25]	@ zero_extendqisi2
 352 0028 272B     		cmp	r3, #39
 353 002a 0AD0     		beq	.L36
 354 002c 05D9     		bls	.L42
 355 002e 282B     		cmp	r3, #40
 356 0030 01D0     		beq	.L39
 357 0032 3A2B     		cmp	r3, #58
 358 0034 03D1     		bne	.L35
 359              	.L39:
 209:Src/usbh_diskio.c ****       break;
 360              		.loc 1 209 0
 361 0036 0320     		movs	r0, #3
 362 0038 EDE7     		b	.L34
 363              	.L42:
 198:Src/usbh_diskio.c ****     {
 364              		.loc 1 198 0
 365 003a 042B     		cmp	r3, #4
 366 003c FBD0     		beq	.L39
 367              	.L35:
 213:Src/usbh_diskio.c ****       break;
 368              		.loc 1 213 0
 369 003e 0120     		movs	r0, #1
 214:Src/usbh_diskio.c ****     }
 370              		.loc 1 214 0
 371 0040 E9E7     		b	.L34
 372              	.L36:
 202:Src/usbh_diskio.c ****       break;
 373              		.loc 1 202 0
 374 0042 0220     		movs	r0, #2
 375 0044 E7E7     		b	.L34
 376              	.L44:
ARM GAS  /tmp/ccqxrlEa.s 			page 13


 377 0046 00BF     		.align	2
 378              	.L43:
 379 0048 00000000 		.word	hUsbHostFS
 380              		.cfi_endproc
 381              	.LFE144:
 383              		.global	USBH_Driver
 384              		.section	.rodata.USBH_Driver,"a",%progbits
 385              		.align	2
 388              	USBH_Driver:
 389 0000 00000000 		.word	USBH_initialize
 390 0004 00000000 		.word	USBH_status
 391 0008 00000000 		.word	USBH_read
 392 000c 00000000 		.word	USBH_write
 393 0010 00000000 		.word	USBH_ioctl
 394              		.text
 395              	.Letext0:
 396              		.file 2 "Middlewares/Third_Party/FatFs/src/integer.h"
 397              		.file 3 "Middlewares/Third_Party/FatFs/src/diskio.h"
 398              		.file 4 "/usr/arm-none-eabi/include/machine/_default_types.h"
 399              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 400              		.file 6 "Drivers/CMSIS/Include/core_cm7.h"
 401              		.file 7 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 402              		.file 8 "/usr/arm-none-eabi/include/sys/lock.h"
 403              		.file 9 "/usr/arm-none-eabi/include/sys/_types.h"
 404              		.file 10 "/usr/lib/gcc/arm-none-eabi/7.1.0/include/stddef.h"
 405              		.file 11 "/usr/arm-none-eabi/include/sys/reent.h"
 406              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 407              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 408              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 409              		.file 15 "/usr/arm-none-eabi/include/stdlib.h"
 410              		.file 16 "Middlewares/ST/STM32_USB_Host_Library/Core/Inc/usbh_def.h"
 411              		.file 17 "Middlewares/ST/STM32_USB_Host_Library/Core/Inc/usbh_ctlreq.h"
 412              		.file 18 "Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc/usbh_msc_scsi.h"
 413              		.file 19 "Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc/usbh_msc.h"
 414              		.file 20 "Middlewares/Third_Party/FatFs/src/ff_gen_drv.h"
 415              		.file 21 "Inc/usbh_diskio.h"
ARM GAS  /tmp/ccqxrlEa.s 			page 14


DEFINED SYMBOLS
                            *ABS*:0000000000000000 usbh_diskio.c
     /tmp/ccqxrlEa.s:18     .text.USBH_initialize:0000000000000000 $t
     /tmp/ccqxrlEa.s:25     .text.USBH_initialize:0000000000000000 USBH_initialize
     /tmp/ccqxrlEa.s:42     .text.USBH_status:0000000000000000 $t
     /tmp/ccqxrlEa.s:49     .text.USBH_status:0000000000000000 USBH_status
     /tmp/ccqxrlEa.s:83     .text.USBH_status:0000000000000014 $d
     /tmp/ccqxrlEa.s:88     .text.USBH_read:0000000000000000 $t
     /tmp/ccqxrlEa.s:95     .text.USBH_read:0000000000000000 USBH_read
     /tmp/ccqxrlEa.s:162    .text.USBH_read:000000000000003c $d
     /tmp/ccqxrlEa.s:167    .text.USBH_ioctl:0000000000000000 $t
     /tmp/ccqxrlEa.s:174    .text.USBH_ioctl:0000000000000000 USBH_ioctl
     /tmp/ccqxrlEa.s:196    .text.USBH_ioctl:000000000000000e $d
     /tmp/ccqxrlEa.s:200    .text.USBH_ioctl:0000000000000012 $t
     /tmp/ccqxrlEa.s:289    .text.USBH_ioctl:0000000000000064 $d
     /tmp/ccqxrlEa.s:294    .text.USBH_write:0000000000000000 $t
     /tmp/ccqxrlEa.s:301    .text.USBH_write:0000000000000000 USBH_write
     /tmp/ccqxrlEa.s:379    .text.USBH_write:0000000000000048 $d
     /tmp/ccqxrlEa.s:388    .rodata.USBH_Driver:0000000000000000 USBH_Driver
     /tmp/ccqxrlEa.s:385    .rodata.USBH_Driver:0000000000000000 $d

UNDEFINED SYMBOLS
USBH_MSC_UnitIsReady
hUsbHostFS
USBH_MSC_Read
USBH_MSC_GetLUNInfo
USBH_MSC_Write
