ARM GAS  /tmp/ccqUXb8n.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"ff.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.ld_word,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-sp-d16
  24              	ld_word:
  25              	.LFB141:
  26              		.file 1 "Middlewares/Third_Party/FatFs/src/ff.c"
   1:Middlewares/Third_Party/FatFs/src/ff.c **** /*----------------------------------------------------------------------------/
   2:Middlewares/Third_Party/FatFs/src/ff.c **** /  FatFs - Generic FAT file system module  R0.12c                             /
   3:Middlewares/Third_Party/FatFs/src/ff.c **** /-----------------------------------------------------------------------------/
   4:Middlewares/Third_Party/FatFs/src/ff.c **** /
   5:Middlewares/Third_Party/FatFs/src/ff.c **** / Copyright (C) 2017, ChaN, all right reserved.
   6:Middlewares/Third_Party/FatFs/src/ff.c **** /
   7:Middlewares/Third_Party/FatFs/src/ff.c **** / FatFs module is an open source software. Redistribution and use of FatFs in
   8:Middlewares/Third_Party/FatFs/src/ff.c **** / source and binary forms, with or without modification, are permitted provided
   9:Middlewares/Third_Party/FatFs/src/ff.c **** / that the following condition is met:
  10:Middlewares/Third_Party/FatFs/src/ff.c **** /
  11:Middlewares/Third_Party/FatFs/src/ff.c **** / 1. Redistributions of source code must retain the above copyright notice,
  12:Middlewares/Third_Party/FatFs/src/ff.c **** /    this condition and the following disclaimer.
  13:Middlewares/Third_Party/FatFs/src/ff.c **** /
  14:Middlewares/Third_Party/FatFs/src/ff.c **** / This software is provided by the copyright holder and contributors "AS IS"
  15:Middlewares/Third_Party/FatFs/src/ff.c **** / and any warranties related to this software are DISCLAIMED.
  16:Middlewares/Third_Party/FatFs/src/ff.c **** / The copyright owner or contributors be NOT LIABLE for any damages caused
  17:Middlewares/Third_Party/FatFs/src/ff.c **** / by use of this software.
  18:Middlewares/Third_Party/FatFs/src/ff.c **** /----------------------------------------------------------------------------*/
  19:Middlewares/Third_Party/FatFs/src/ff.c **** 
  20:Middlewares/Third_Party/FatFs/src/ff.c **** 
  21:Middlewares/Third_Party/FatFs/src/ff.c **** #include "ff.h"			/* Declarations of FatFs API */
  22:Middlewares/Third_Party/FatFs/src/ff.c **** #include "diskio.h"		/* Declarations of device I/O functions */
  23:Middlewares/Third_Party/FatFs/src/ff.c **** 
  24:Middlewares/Third_Party/FatFs/src/ff.c **** 
  25:Middlewares/Third_Party/FatFs/src/ff.c **** /*--------------------------------------------------------------------------
  26:Middlewares/Third_Party/FatFs/src/ff.c **** 
  27:Middlewares/Third_Party/FatFs/src/ff.c ****    Module Private Definitions
  28:Middlewares/Third_Party/FatFs/src/ff.c **** 
  29:Middlewares/Third_Party/FatFs/src/ff.c **** ---------------------------------------------------------------------------*/
  30:Middlewares/Third_Party/FatFs/src/ff.c **** 
  31:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FATFS != 68300	/* Revision ID */
  32:Middlewares/Third_Party/FatFs/src/ff.c **** #error Wrong include file (ff.h).
ARM GAS  /tmp/ccqUXb8n.s 			page 2


  33:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
  34:Middlewares/Third_Party/FatFs/src/ff.c **** 
  35:Middlewares/Third_Party/FatFs/src/ff.c **** 
  36:Middlewares/Third_Party/FatFs/src/ff.c **** /* DBCS code ranges and SBCS upper conversion tables */
  37:Middlewares/Third_Party/FatFs/src/ff.c **** 
  38:Middlewares/Third_Party/FatFs/src/ff.c **** #if _CODE_PAGE == 932	/* Japanese Shift-JIS */
  39:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0x81	/* DBC 1st byte range 1 start */
  40:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1E	0x9F	/* DBC 1st byte range 1 end */
  41:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF2S	0xE0	/* DBC 1st byte range 2 start */
  42:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF2E	0xFC	/* DBC 1st byte range 2 end */
  43:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS1S	0x40	/* DBC 2nd byte range 1 start */
  44:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS1E	0x7E	/* DBC 2nd byte range 1 end */
  45:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS2S	0x80	/* DBC 2nd byte range 2 start */
  46:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS2E	0xFC	/* DBC 2nd byte range 2 end */
  47:Middlewares/Third_Party/FatFs/src/ff.c **** 
  48:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 936	/* Simplified Chinese GBK */
  49:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0x81
  50:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1E	0xFE
  51:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS1S	0x40
  52:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS1E	0x7E
  53:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS2S	0x80
  54:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS2E	0xFE
  55:Middlewares/Third_Party/FatFs/src/ff.c **** 
  56:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 949	/* Korean */
  57:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0x81
  58:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1E	0xFE
  59:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS1S	0x41
  60:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS1E	0x5A
  61:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS2S	0x61
  62:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS2E	0x7A
  63:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS3S	0x81
  64:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS3E	0xFE
  65:Middlewares/Third_Party/FatFs/src/ff.c **** 
  66:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 950	/* Traditional Chinese Big5 */
  67:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0x81
  68:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1E	0xFE
  69:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS1S	0x40
  70:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS1E	0x7E
  71:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS2S	0xA1
  72:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS2E	0xFE
  73:Middlewares/Third_Party/FatFs/src/ff.c **** 
  74:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 437	/* U.S. */
  75:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
  76:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x80,0x9A,0x45,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F, \
  77:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
  78:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
  79:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
  80:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
  81:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
  82:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
  83:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
  84:Middlewares/Third_Party/FatFs/src/ff.c **** 
  85:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 720	/* Arabic */
  86:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
  87:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
  88:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
  89:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
ARM GAS  /tmp/ccqUXb8n.s 			page 3


  90:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
  91:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
  92:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
  93:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
  94:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
  95:Middlewares/Third_Party/FatFs/src/ff.c **** 
  96:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 737	/* Greek */
  97:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
  98:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
  99:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x92,0x92,0x93,0x94,0x95,0x96,0x97,0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87, \
 100:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0xAA,0x92,0x93,0x94,0x95,0x96, \
 101:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 102:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 103:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 104:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x97,0xEA,0xEB,0xEC,0xE4,0xED,0xEE,0xEF,0xF5,0xF0,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 105:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 106:Middlewares/Third_Party/FatFs/src/ff.c **** 
 107:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 771	/* KBL */
 108:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 109:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 110:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 111:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 112:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 113:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 114:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDC,0xDE,0xDE, \
 115:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 116:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF8,0xFA,0xFA,0xFC,0xFC,0xFE,0xFF}
 117:Middlewares/Third_Party/FatFs/src/ff.c **** 
 118:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 775	/* Baltic */
 119:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 120:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x80,0x9A,0x91,0xA0,0x8E,0x95,0x8F,0x80,0xAD,0xED,0x8A,0x8A,0xA1,0x8D,0x8E,0x8F, \
 121:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x92,0x92,0xE2,0x99,0x95,0x96,0x97,0x97,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, \
 122:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xA0,0xA1,0xE0,0xA3,0xA3,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 123:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 124:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 125:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB5,0xB6,0xB7,0xB8,0xBD,0xBE,0xC6,0xC7,0xA5,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 126:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE3,0xE8,0xE8,0xEA,0xEA,0xEE,0xED,0xEE,0xEF, \
 127:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 128:Middlewares/Third_Party/FatFs/src/ff.c **** 
 129:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 850	/* Latin 1 */
 130:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 131:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x43,0x55,0x45,0x41,0x41,0x41,0x41,0x43,0x45,0x45,0x45,0x49,0x49,0x49,0x41,0x41, \
 132:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x45,0x92,0x92,0x4F,0x4F,0x4F,0x55,0x55,0x59,0x4F,0x55,0x4F,0x9C,0x4F,0x9E,0x9F, \
 133:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 134:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0x41,0x41,0x41,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 135:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0x41,0x41,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 136:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD1,0xD1,0x45,0x45,0x45,0x49,0x49,0x49,0x49,0xD9,0xDA,0xDB,0xDC,0xDD,0x49,0xDF, \
 137:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x4F,0xE1,0x4F,0x4F,0x4F,0x4F,0xE6,0xE8,0xE8,0x55,0x55,0x55,0x59,0x59,0xEE,0xEF, \
 138:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 139:Middlewares/Third_Party/FatFs/src/ff.c **** 
 140:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 852	/* Latin 2 */
 141:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 142:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xDE,0x8F,0x80,0x9D,0xD3,0x8A,0x8A,0xD7,0x8D,0x8E,0x8F, \
 143:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x91,0x91,0xE2,0x99,0x95,0x95,0x97,0x97,0x99,0x9A,0x9B,0x9B,0x9D,0x9E,0xAC, \
 144:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB5,0xD6,0xE0,0xE9,0xA4,0xA4,0xA6,0xA6,0xA8,0xA8,0xAA,0x8D,0xAC,0xB8,0xAE,0xAF, \
 145:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBD,0xBF, \
 146:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC6,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
ARM GAS  /tmp/ccqUXb8n.s 			page 4


 147:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD1,0xD1,0xD2,0xD3,0xD2,0xD5,0xD6,0xD7,0xB7,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 148:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE3,0xD5,0xE6,0xE6,0xE8,0xE9,0xE8,0xEB,0xED,0xED,0xDD,0xEF, \
 149:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xEB,0xFC,0xFC,0xFE,0xFF}
 150:Middlewares/Third_Party/FatFs/src/ff.c **** 
 151:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 855	/* Cyrillic */
 152:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 153:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x81,0x81,0x83,0x83,0x85,0x85,0x87,0x87,0x89,0x89,0x8B,0x8B,0x8D,0x8D,0x8F,0x8F, \
 154:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x91,0x91,0x93,0x93,0x95,0x95,0x97,0x97,0x99,0x99,0x9B,0x9B,0x9D,0x9D,0x9F,0x9F, \
 155:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xA1,0xA1,0xA3,0xA3,0xA5,0xA5,0xA7,0xA7,0xA9,0xA9,0xAB,0xAB,0xAD,0xAD,0xAE,0xAF, \
 156:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB6,0xB6,0xB8,0xB8,0xB9,0xBA,0xBB,0xBC,0xBE,0xBE,0xBF, \
 157:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 158:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD1,0xD1,0xD3,0xD3,0xD5,0xD5,0xD7,0xD7,0xDD,0xD9,0xDA,0xDB,0xDC,0xDD,0xE0,0xDF, \
 159:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xE0,0xE2,0xE2,0xE4,0xE4,0xE6,0xE6,0xE8,0xE8,0xEA,0xEA,0xEC,0xEC,0xEE,0xEE,0xEF, \
 160:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF8,0xFA,0xFA,0xFC,0xFC,0xFD,0xFE,0xFF}
 161:Middlewares/Third_Party/FatFs/src/ff.c **** 
 162:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 857	/* Turkish */
 163:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 164:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0x49,0x8E,0x8F, \
 165:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x92,0x92,0xE2,0x99,0xE3,0xEA,0xEB,0x98,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9E, \
 166:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA6,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 167:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 168:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 169:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0x49,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 170:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xDE,0xED,0xEE,0xEF, \
 171:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 172:Middlewares/Third_Party/FatFs/src/ff.c **** 
 173:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 860	/* Portuguese */
 174:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 175:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0x8F,0x8E,0x91,0x86,0x80,0x89,0x89,0x92,0x8B,0x8C,0x98,0x8E,0x8F, \
 176:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x91,0x92,0x8C,0x99,0xA9,0x96,0x9D,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 177:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x86,0x8B,0x9F,0x96,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 178:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 179:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 180:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 181:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 182:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 183:Middlewares/Third_Party/FatFs/src/ff.c **** 
 184:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 861	/* Icelandic */
 185:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 186:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x8B,0x8B,0x8D,0x8E,0x8F, \
 187:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x92,0x92,0x4F,0x99,0x8D,0x55,0x97,0x97,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, \
 188:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xA4,0xA5,0xA6,0xA7,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 189:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 190:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 191:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 192:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 193:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 194:Middlewares/Third_Party/FatFs/src/ff.c **** 
 195:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 862	/* Hebrew */
 196:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 197:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 198:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 199:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 200:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 201:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 202:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 203:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
ARM GAS  /tmp/ccqUXb8n.s 			page 5


 204:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 205:Middlewares/Third_Party/FatFs/src/ff.c **** 
 206:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 863	/* Canadian-French */
 207:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 208:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x43,0x55,0x45,0x41,0x41,0x41,0x86,0x43,0x45,0x45,0x45,0x49,0x49,0x8D,0x41,0x8F, \
 209:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x45,0x45,0x45,0x4F,0x45,0x49,0x55,0x55,0x98,0x4F,0x55,0x9B,0x9C,0x55,0x55,0x9F, \
 210:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xA0,0xA1,0x4F,0x55,0xA4,0xA5,0xA6,0xA7,0x49,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 211:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 212:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 213:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 214:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 215:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 216:Middlewares/Third_Party/FatFs/src/ff.c **** 
 217:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 864	/* Arabic */
 218:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 219:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x80,0x9A,0x45,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F, \
 220:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 221:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 222:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 223:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 224:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 225:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 226:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 227:Middlewares/Third_Party/FatFs/src/ff.c **** 
 228:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 865	/* Nordic */
 229:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 230:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F, \
 231:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 232:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 233:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 234:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 235:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 236:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 237:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 238:Middlewares/Third_Party/FatFs/src/ff.c **** 
 239:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 866	/* Russian */
 240:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 241:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 242:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 243:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 244:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 245:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 246:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 247:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 248:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 249:Middlewares/Third_Party/FatFs/src/ff.c **** 
 250:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 869	/* Greek 2 */
 251:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 252:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 253:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x86,0x9C,0x8D,0x8F,0x90, \
 254:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x91,0x90,0x92,0x95,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 255:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 256:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 257:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xA4,0xA5,0xA6,0xD9,0xDA,0xDB,0xDC,0xA7,0xA8,0xDF, \
 258:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xA9,0xAA,0xAC,0xAD,0xB5,0xB6,0xB7,0xB8,0xBD,0xBE,0xC6,0xC7,0xCF,0xCF,0xD0,0xEF, \
 259:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF1,0xD1,0xD2,0xD3,0xF5,0xD4,0xF7,0xF8,0xF9,0xD5,0x96,0x95,0x98,0xFE,0xFF}
 260:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  /tmp/ccqUXb8n.s 			page 6


 261:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 1	/* ASCII (for only non-LFN cfg) */
 262:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0
 263:Middlewares/Third_Party/FatFs/src/ff.c **** #error Cannot enable LFN without valid code page.
 264:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 265:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 266:Middlewares/Third_Party/FatFs/src/ff.c **** 
 267:Middlewares/Third_Party/FatFs/src/ff.c **** #else
 268:Middlewares/Third_Party/FatFs/src/ff.c **** #error Unknown code page
 269:Middlewares/Third_Party/FatFs/src/ff.c **** 
 270:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 271:Middlewares/Third_Party/FatFs/src/ff.c **** 
 272:Middlewares/Third_Party/FatFs/src/ff.c **** 
 273:Middlewares/Third_Party/FatFs/src/ff.c **** /* Character code support macros */
 274:Middlewares/Third_Party/FatFs/src/ff.c **** #define IsUpper(c)	(((c)>='A')&&((c)<='Z'))
 275:Middlewares/Third_Party/FatFs/src/ff.c **** #define IsLower(c)	(((c)>='a')&&((c)<='z'))
 276:Middlewares/Third_Party/FatFs/src/ff.c **** #define IsDigit(c)	(((c)>='0')&&((c)<='9'))
 277:Middlewares/Third_Party/FatFs/src/ff.c **** 
 278:Middlewares/Third_Party/FatFs/src/ff.c **** #if _DF1S != 0	/* Code page is DBCS */
 279:Middlewares/Third_Party/FatFs/src/ff.c **** 
 280:Middlewares/Third_Party/FatFs/src/ff.c **** #ifdef _DF2S	/* Two 1st byte areas */
 281:Middlewares/Third_Party/FatFs/src/ff.c **** #define IsDBCS1(c)	(((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E) || ((BYTE)(c) >= _DF2S && (BYTE)(c) 
 282:Middlewares/Third_Party/FatFs/src/ff.c **** #else			/* One 1st byte area */
 283:Middlewares/Third_Party/FatFs/src/ff.c **** #define IsDBCS1(c)	((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E)
 284:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 285:Middlewares/Third_Party/FatFs/src/ff.c **** 
 286:Middlewares/Third_Party/FatFs/src/ff.c **** #ifdef _DS3S	/* Three 2nd byte areas */
 287:Middlewares/Third_Party/FatFs/src/ff.c **** #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) 
 288:Middlewares/Third_Party/FatFs/src/ff.c **** #else			/* Two 2nd byte areas */
 289:Middlewares/Third_Party/FatFs/src/ff.c **** #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) 
 290:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 291:Middlewares/Third_Party/FatFs/src/ff.c **** 
 292:Middlewares/Third_Party/FatFs/src/ff.c **** #else			/* Code page is SBCS */
 293:Middlewares/Third_Party/FatFs/src/ff.c **** 
 294:Middlewares/Third_Party/FatFs/src/ff.c **** #define IsDBCS1(c)	0
 295:Middlewares/Third_Party/FatFs/src/ff.c **** #define IsDBCS2(c)	0
 296:Middlewares/Third_Party/FatFs/src/ff.c **** 
 297:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _DF1S */
 298:Middlewares/Third_Party/FatFs/src/ff.c **** 
 299:Middlewares/Third_Party/FatFs/src/ff.c **** 
 300:Middlewares/Third_Party/FatFs/src/ff.c **** /* Additional file attribute bits for internal use */
 301:Middlewares/Third_Party/FatFs/src/ff.c **** #define	AM_VOL		0x08	/* Volume label */
 302:Middlewares/Third_Party/FatFs/src/ff.c **** #define AM_LFN		0x0F	/* LFN entry */
 303:Middlewares/Third_Party/FatFs/src/ff.c **** #define AM_MASK		0x3F	/* Mask of defined bits */
 304:Middlewares/Third_Party/FatFs/src/ff.c **** 
 305:Middlewares/Third_Party/FatFs/src/ff.c **** 
 306:Middlewares/Third_Party/FatFs/src/ff.c **** /* Additional file access control and file status flags for internal use */
 307:Middlewares/Third_Party/FatFs/src/ff.c **** #define FA_SEEKEND	0x20	/* Seek to end of the file on file open */
 308:Middlewares/Third_Party/FatFs/src/ff.c **** #define FA_MODIFIED	0x40	/* File has been modified */
 309:Middlewares/Third_Party/FatFs/src/ff.c **** #define FA_DIRTY	0x80	/* FIL.buf[] needs to be written-back */
 310:Middlewares/Third_Party/FatFs/src/ff.c **** 
 311:Middlewares/Third_Party/FatFs/src/ff.c **** 
 312:Middlewares/Third_Party/FatFs/src/ff.c **** /* Name status flags in fn[] */
 313:Middlewares/Third_Party/FatFs/src/ff.c **** #define NSFLAG		11		/* Index of the name status byte */
 314:Middlewares/Third_Party/FatFs/src/ff.c **** #define NS_LOSS		0x01	/* Out of 8.3 format */
 315:Middlewares/Third_Party/FatFs/src/ff.c **** #define NS_LFN		0x02	/* Force to create LFN entry */
 316:Middlewares/Third_Party/FatFs/src/ff.c **** #define NS_LAST		0x04	/* Last segment */
 317:Middlewares/Third_Party/FatFs/src/ff.c **** #define NS_BODY		0x08	/* Lower case flag (body) */
ARM GAS  /tmp/ccqUXb8n.s 			page 7


 318:Middlewares/Third_Party/FatFs/src/ff.c **** #define NS_EXT		0x10	/* Lower case flag (ext) */
 319:Middlewares/Third_Party/FatFs/src/ff.c **** #define NS_DOT		0x20	/* Dot entry */
 320:Middlewares/Third_Party/FatFs/src/ff.c **** #define NS_NOLFN	0x40	/* Do not find LFN */
 321:Middlewares/Third_Party/FatFs/src/ff.c **** #define NS_NONAME	0x80	/* Not followed */
 322:Middlewares/Third_Party/FatFs/src/ff.c **** 
 323:Middlewares/Third_Party/FatFs/src/ff.c **** 
 324:Middlewares/Third_Party/FatFs/src/ff.c **** /* Limits and boundaries */
 325:Middlewares/Third_Party/FatFs/src/ff.c **** #define MAX_DIR		0x200000		/* Max size of FAT directory */
 326:Middlewares/Third_Party/FatFs/src/ff.c **** #define MAX_DIR_EX	0x10000000		/* Max size of exFAT directory */
 327:Middlewares/Third_Party/FatFs/src/ff.c **** #define MAX_FAT12	0xFF5			/* Max FAT12 clusters (differs from specs, but correct for real DOS/Windo
 328:Middlewares/Third_Party/FatFs/src/ff.c **** #define	MAX_FAT16	0xFFF5			/* Max FAT16 clusters (differs from specs, but correct for real DOS/Wind
 329:Middlewares/Third_Party/FatFs/src/ff.c **** #define	MAX_FAT32	0x0FFFFFF5		/* Max FAT32 clusters (not specified, practical limit) */
 330:Middlewares/Third_Party/FatFs/src/ff.c **** #define	MAX_EXFAT	0x7FFFFFFD		/* Max exFAT clusters (differs from specs, implementation limit) */
 331:Middlewares/Third_Party/FatFs/src/ff.c **** 
 332:Middlewares/Third_Party/FatFs/src/ff.c **** 
 333:Middlewares/Third_Party/FatFs/src/ff.c **** /* FatFs refers the FAT structure as simple byte array instead of structure member
 334:Middlewares/Third_Party/FatFs/src/ff.c **** / because the C structure is not binary compatible between different platforms */
 335:Middlewares/Third_Party/FatFs/src/ff.c **** 
 336:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_JmpBoot			0		/* x86 jump instruction (3-byte) */
 337:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_OEMName			3		/* OEM name (8-byte) */
 338:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_BytsPerSec		11		/* Sector size [byte] (WORD) */
 339:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_SecPerClus		13		/* Cluster size [sector] (BYTE) */
 340:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_RsvdSecCnt		14		/* Size of reserved area [sector] (WORD) */
 341:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_NumFATs			16		/* Number of FATs (BYTE) */
 342:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_RootEntCnt		17		/* Size of root directory area for FAT12/16 [entry] (WORD) */
 343:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_TotSec16		19		/* Volume size (16-bit) [sector] (WORD) */
 344:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_Media			21		/* Media descriptor byte (BYTE) */
 345:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_FATSz16			22		/* FAT size (16-bit) [sector] (WORD) */
 346:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_SecPerTrk		24		/* Track size for int13h [sector] (WORD) */
 347:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_NumHeads		26		/* Number of heads for int13h (WORD) */
 348:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_HiddSec			28		/* Volume offset from top of the drive (DWORD) */
 349:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_TotSec32		32		/* Volume size (32-bit) [sector] (DWORD) */
 350:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_DrvNum			36		/* Physical drive number for int13h (BYTE) */
 351:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_NTres			37		/* Error flag (BYTE) */
 352:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_BootSig			38		/* Extended boot signature (BYTE) */
 353:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_VolID			39		/* Volume serial number (DWORD) */
 354:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_VolLab			43		/* Volume label string (8-byte) */
 355:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_FilSysType		54		/* File system type string (8-byte) */
 356:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_BootCode			62		/* Boot code (448-byte) */
 357:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_55AA				510		/* Signature word (WORD) */
 358:Middlewares/Third_Party/FatFs/src/ff.c **** 
 359:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_FATSz32			36		/* FAT32: FAT size [sector] (DWORD) */
 360:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_ExtFlags32		40		/* FAT32: Extended flags (WORD) */
 361:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_FSVer32			42		/* FAT32: File system version (WORD) */
 362:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_RootClus32		44		/* FAT32: Root directory cluster (DWORD) */
 363:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_FSInfo32		48		/* FAT32: Offset of FSINFO sector (WORD) */
 364:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_BkBootSec32		50		/* FAT32: Offset of backup boot sector (WORD) */
 365:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_DrvNum32			64		/* FAT32: Physical drive number for int13h (BYTE) */
 366:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_NTres32			65		/* FAT32: Error flag (BYTE) */
 367:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_BootSig32		66		/* FAT32: Extended boot signature (BYTE) */
 368:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_VolID32			67		/* FAT32: Volume serial number (DWORD) */
 369:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_VolLab32			71		/* FAT32: Volume label string (8-byte) */
 370:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_FilSysType32		82		/* FAT32: File system type string (8-byte) */
 371:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_BootCode32		90		/* FAT32: Boot code (420-byte) */
 372:Middlewares/Third_Party/FatFs/src/ff.c **** 
 373:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_ZeroedEx		11		/* exFAT: MBZ field (53-byte) */
 374:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_VolOfsEx		64		/* exFAT: Volume offset from top of the drive [sector] (QWORD) */
ARM GAS  /tmp/ccqUXb8n.s 			page 8


 375:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_TotSecEx		72		/* exFAT: Volume size [sector] (QWORD) */
 376:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_FatOfsEx		80		/* exFAT: FAT offset from top of the volume [sector] (DWORD) */
 377:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_FatSzEx			84		/* exFAT: FAT size [sector] (DWORD) */
 378:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_DataOfsEx		88		/* exFAT: Data offset from top of the volume [sector] (DWORD) */
 379:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_NumClusEx		92		/* exFAT: Number of clusters (DWORD) */
 380:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_RootClusEx		96		/* exFAT: Root directory start cluster (DWORD) */
 381:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_VolIDEx			100		/* exFAT: Volume serial number (DWORD) */
 382:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_FSVerEx			104		/* exFAT: File system version (WORD) */
 383:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_VolFlagEx		106		/* exFAT: Volume flags (BYTE) */
 384:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_ActFatEx		107		/* exFAT: Active FAT flags (BYTE) */
 385:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_BytsPerSecEx	108		/* exFAT: Log2 of sector size in unit of byte (BYTE) */
 386:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_SecPerClusEx	109		/* exFAT: Log2 of cluster size in unit of sector (BYTE) */
 387:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_NumFATsEx		110		/* exFAT: Number of FATs (BYTE) */
 388:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_DrvNumEx		111		/* exFAT: Physical drive number for int13h (BYTE) */
 389:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_PercInUseEx		112		/* exFAT: Percent in use (BYTE) */
 390:Middlewares/Third_Party/FatFs/src/ff.c **** #define	BPB_RsvdEx			113		/* exFAT: Reserved (7-byte) */
 391:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_BootCodeEx		120		/* exFAT: Boot code (390-byte) */
 392:Middlewares/Third_Party/FatFs/src/ff.c **** 
 393:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DIR_Name			0		/* Short file name (11-byte) */
 394:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DIR_Attr			11		/* Attribute (BYTE) */
 395:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DIR_NTres			12		/* Lower case flag (BYTE) */
 396:Middlewares/Third_Party/FatFs/src/ff.c **** #define DIR_CrtTime10		13		/* Created time sub-second (BYTE) */
 397:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DIR_CrtTime			14		/* Created time (DWORD) */
 398:Middlewares/Third_Party/FatFs/src/ff.c **** #define DIR_LstAccDate		18		/* Last accessed date (WORD) */
 399:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DIR_FstClusHI		20		/* Higher 16-bit of first cluster (WORD) */
 400:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DIR_ModTime			22		/* Modified time (DWORD) */
 401:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DIR_FstClusLO		26		/* Lower 16-bit of first cluster (WORD) */
 402:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DIR_FileSize		28		/* File size (DWORD) */
 403:Middlewares/Third_Party/FatFs/src/ff.c **** #define	LDIR_Ord			0		/* LFN: LFN order and LLE flag (BYTE) */
 404:Middlewares/Third_Party/FatFs/src/ff.c **** #define	LDIR_Attr			11		/* LFN: LFN attribute (BYTE) */
 405:Middlewares/Third_Party/FatFs/src/ff.c **** #define	LDIR_Type			12		/* LFN: Entry type (BYTE) */
 406:Middlewares/Third_Party/FatFs/src/ff.c **** #define	LDIR_Chksum			13		/* LFN: Checksum of the SFN (BYTE) */
 407:Middlewares/Third_Party/FatFs/src/ff.c **** #define	LDIR_FstClusLO		26		/* LFN: MBZ field (WORD) */
 408:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_Type			0		/* exFAT: Type of exFAT directory entry (BYTE) */
 409:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_NumLabel		1		/* exFAT: Number of volume label characters (BYTE) */
 410:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_Label			2		/* exFAT: Volume label (11-WORD) */
 411:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_CaseSum		4		/* exFAT: Sum of case conversion table (DWORD) */
 412:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_NumSec			1		/* exFAT: Number of secondary entries (BYTE) */
 413:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_SetSum			2		/* exFAT: Sum of the set of directory entries (WORD) */
 414:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_Attr			4		/* exFAT: File attribute (WORD) */
 415:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_CrtTime		8		/* exFAT: Created time (DWORD) */
 416:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_ModTime		12		/* exFAT: Modified time (DWORD) */
 417:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_AccTime		16		/* exFAT: Last accessed time (DWORD) */
 418:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_CrtTime10		20		/* exFAT: Created time subsecond (BYTE) */
 419:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_ModTime10		21		/* exFAT: Modified time subsecond (BYTE) */
 420:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_CrtTZ			22		/* exFAT: Created timezone (BYTE) */
 421:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_ModTZ			23		/* exFAT: Modified timezone (BYTE) */
 422:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_AccTZ			24		/* exFAT: Last accessed timezone (BYTE) */
 423:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_GenFlags		33		/* exFAT: General secondary flags (WORD) */
 424:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_NumName		35		/* exFAT: Number of file name characters (BYTE) */
 425:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_NameHash		36		/* exFAT: Hash of file name (WORD) */
 426:Middlewares/Third_Party/FatFs/src/ff.c **** #define XDIR_ValidFileSize	40		/* exFAT: Valid file size (QWORD) */
 427:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_FstClus		52		/* exFAT: First cluster of the file data (DWORD) */
 428:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_FileSize		56		/* exFAT: File/Directory size (QWORD) */
 429:Middlewares/Third_Party/FatFs/src/ff.c **** 
 430:Middlewares/Third_Party/FatFs/src/ff.c **** #define	SZDIRE				32		/* Size of a directory entry */
 431:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DDEM				0xE5	/* Deleted directory entry mark set to DIR_Name[0] */
ARM GAS  /tmp/ccqUXb8n.s 			page 9


 432:Middlewares/Third_Party/FatFs/src/ff.c **** #define	RDDEM				0x05	/* Replacement of the character collides with DDEM */
 433:Middlewares/Third_Party/FatFs/src/ff.c **** #define	LLEF				0x40	/* Last long entry flag in LDIR_Ord */
 434:Middlewares/Third_Party/FatFs/src/ff.c **** 
 435:Middlewares/Third_Party/FatFs/src/ff.c **** #define	FSI_LeadSig			0		/* FAT32 FSI: Leading signature (DWORD) */
 436:Middlewares/Third_Party/FatFs/src/ff.c **** #define	FSI_StrucSig		484		/* FAT32 FSI: Structure signature (DWORD) */
 437:Middlewares/Third_Party/FatFs/src/ff.c **** #define	FSI_Free_Count		488		/* FAT32 FSI: Number of free clusters (DWORD) */
 438:Middlewares/Third_Party/FatFs/src/ff.c **** #define	FSI_Nxt_Free		492		/* FAT32 FSI: Last allocated cluster (DWORD) */
 439:Middlewares/Third_Party/FatFs/src/ff.c **** 
 440:Middlewares/Third_Party/FatFs/src/ff.c **** #define MBR_Table			446		/* MBR: Offset of partition table in the MBR */
 441:Middlewares/Third_Party/FatFs/src/ff.c **** #define	SZ_PTE				16		/* MBR: Size of a partition table entry */
 442:Middlewares/Third_Party/FatFs/src/ff.c **** #define PTE_Boot			0		/* MBR PTE: Boot indicator */
 443:Middlewares/Third_Party/FatFs/src/ff.c **** #define PTE_StHead			1		/* MBR PTE: Start head */
 444:Middlewares/Third_Party/FatFs/src/ff.c **** #define PTE_StSec			2		/* MBR PTE: Start sector */
 445:Middlewares/Third_Party/FatFs/src/ff.c **** #define PTE_StCyl			3		/* MBR PTE: Start cylinder */
 446:Middlewares/Third_Party/FatFs/src/ff.c **** #define PTE_System			4		/* MBR PTE: System ID */
 447:Middlewares/Third_Party/FatFs/src/ff.c **** #define PTE_EdHead			5		/* MBR PTE: End head */
 448:Middlewares/Third_Party/FatFs/src/ff.c **** #define PTE_EdSec			6		/* MBR PTE: End sector */
 449:Middlewares/Third_Party/FatFs/src/ff.c **** #define PTE_EdCyl			7		/* MBR PTE: End cylinder */
 450:Middlewares/Third_Party/FatFs/src/ff.c **** #define PTE_StLba			8		/* MBR PTE: Start in LBA */
 451:Middlewares/Third_Party/FatFs/src/ff.c **** #define PTE_SizLba			12		/* MBR PTE: Size in LBA */
 452:Middlewares/Third_Party/FatFs/src/ff.c **** 
 453:Middlewares/Third_Party/FatFs/src/ff.c **** 
 454:Middlewares/Third_Party/FatFs/src/ff.c **** /* Post process after fatal error on file operation */
 455:Middlewares/Third_Party/FatFs/src/ff.c **** #define	ABORT(fs, res)		{ fp->err = (BYTE)(res); LEAVE_FF(fs, res); }
 456:Middlewares/Third_Party/FatFs/src/ff.c **** 
 457:Middlewares/Third_Party/FatFs/src/ff.c **** 
 458:Middlewares/Third_Party/FatFs/src/ff.c **** /* Reentrancy related */
 459:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_REENTRANT
 460:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN == 1
 461:Middlewares/Third_Party/FatFs/src/ff.c **** #error Static LFN work area cannot be used at thread-safe configuration
 462:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 463:Middlewares/Third_Party/FatFs/src/ff.c **** #define	ENTER_FF(fs)		{ if (!lock_fs(fs)) return FR_TIMEOUT; }
 464:Middlewares/Third_Party/FatFs/src/ff.c **** #define	LEAVE_FF(fs, res)	{ unlock_fs(fs, res); return res; }
 465:Middlewares/Third_Party/FatFs/src/ff.c **** #else
 466:Middlewares/Third_Party/FatFs/src/ff.c **** #define	ENTER_FF(fs)
 467:Middlewares/Third_Party/FatFs/src/ff.c **** #define LEAVE_FF(fs, res)	return res
 468:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 469:Middlewares/Third_Party/FatFs/src/ff.c **** 
 470:Middlewares/Third_Party/FatFs/src/ff.c **** 
 471:Middlewares/Third_Party/FatFs/src/ff.c **** /* Definitions of volume - partition conversion */
 472:Middlewares/Third_Party/FatFs/src/ff.c **** #if _MULTI_PARTITION
 473:Middlewares/Third_Party/FatFs/src/ff.c **** #define LD2PD(vol) VolToPart[vol].pd	/* Get physical drive number */
 474:Middlewares/Third_Party/FatFs/src/ff.c **** #define LD2PT(vol) VolToPart[vol].pt	/* Get partition index */
 475:Middlewares/Third_Party/FatFs/src/ff.c **** #else
 476:Middlewares/Third_Party/FatFs/src/ff.c **** #define LD2PD(vol) (BYTE)(vol)	/* Each logical drive is bound to the same physical drive number */
 477:Middlewares/Third_Party/FatFs/src/ff.c **** #define LD2PT(vol) 0			/* Find first valid partition or in SFD */
 478:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 479:Middlewares/Third_Party/FatFs/src/ff.c **** 
 480:Middlewares/Third_Party/FatFs/src/ff.c **** 
 481:Middlewares/Third_Party/FatFs/src/ff.c **** /* Definitions of sector size */
 482:Middlewares/Third_Party/FatFs/src/ff.c **** #if (_MAX_SS < _MIN_SS) || (_MAX_SS != 512 && _MAX_SS != 1024 && _MAX_SS != 2048 && _MAX_SS != 4096
 483:Middlewares/Third_Party/FatFs/src/ff.c **** #error Wrong sector size configuration
 484:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 485:Middlewares/Third_Party/FatFs/src/ff.c **** #if _MAX_SS == _MIN_SS
 486:Middlewares/Third_Party/FatFs/src/ff.c **** #define	SS(fs)	((UINT)_MAX_SS)	/* Fixed sector size */
 487:Middlewares/Third_Party/FatFs/src/ff.c **** #else
 488:Middlewares/Third_Party/FatFs/src/ff.c **** #define	SS(fs)	((fs)->ssize)	/* Variable sector size */
ARM GAS  /tmp/ccqUXb8n.s 			page 10


 489:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 490:Middlewares/Third_Party/FatFs/src/ff.c **** 
 491:Middlewares/Third_Party/FatFs/src/ff.c **** 
 492:Middlewares/Third_Party/FatFs/src/ff.c **** /* Timestamp */
 493:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_NORTC == 1
 494:Middlewares/Third_Party/FatFs/src/ff.c **** #if _NORTC_YEAR < 1980 || _NORTC_YEAR > 2107 || _NORTC_MON < 1 || _NORTC_MON > 12 || _NORTC_MDAY < 
 495:Middlewares/Third_Party/FatFs/src/ff.c **** #error Invalid _FS_NORTC settings
 496:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 497:Middlewares/Third_Party/FatFs/src/ff.c **** #define GET_FATTIME()	((DWORD)(_NORTC_YEAR - 1980) << 25 | (DWORD)_NORTC_MON << 21 | (DWORD)_NORTC_
 498:Middlewares/Third_Party/FatFs/src/ff.c **** #else
 499:Middlewares/Third_Party/FatFs/src/ff.c **** #define GET_FATTIME()	get_fattime()
 500:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 501:Middlewares/Third_Party/FatFs/src/ff.c **** 
 502:Middlewares/Third_Party/FatFs/src/ff.c **** 
 503:Middlewares/Third_Party/FatFs/src/ff.c **** /* File lock controls */
 504:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
 505:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_READONLY
 506:Middlewares/Third_Party/FatFs/src/ff.c **** #error _FS_LOCK must be 0 at read-only configuration
 507:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 508:Middlewares/Third_Party/FatFs/src/ff.c **** typedef struct {
 509:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;		/* Object ID 1, volume (NULL:blank entry) */
 510:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD clu;		/* Object ID 2, containing directory (0:root) */
 511:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD ofs;		/* Object ID 3, offset in the directory */
 512:Middlewares/Third_Party/FatFs/src/ff.c **** 	WORD ctr;		/* Object open counter, 0:none, 0x01..0xFF:read mode open count, 0x100:write mode */
 513:Middlewares/Third_Party/FatFs/src/ff.c **** } FILESEM;
 514:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 515:Middlewares/Third_Party/FatFs/src/ff.c **** 
 516:Middlewares/Third_Party/FatFs/src/ff.c **** 
 517:Middlewares/Third_Party/FatFs/src/ff.c **** 
 518:Middlewares/Third_Party/FatFs/src/ff.c **** 
 519:Middlewares/Third_Party/FatFs/src/ff.c **** 
 520:Middlewares/Third_Party/FatFs/src/ff.c **** /*--------------------------------------------------------------------------
 521:Middlewares/Third_Party/FatFs/src/ff.c **** 
 522:Middlewares/Third_Party/FatFs/src/ff.c ****    Module Private Work Area
 523:Middlewares/Third_Party/FatFs/src/ff.c **** 
 524:Middlewares/Third_Party/FatFs/src/ff.c **** ---------------------------------------------------------------------------*/
 525:Middlewares/Third_Party/FatFs/src/ff.c **** 
 526:Middlewares/Third_Party/FatFs/src/ff.c **** /* Remark: Variables defined here without initial value shall be guaranteed
 527:Middlewares/Third_Party/FatFs/src/ff.c **** /  zero/null at start-up. If not, the linker option or start-up routine is
 528:Middlewares/Third_Party/FatFs/src/ff.c **** /  not compliance with C standard. */
 529:Middlewares/Third_Party/FatFs/src/ff.c **** 
 530:Middlewares/Third_Party/FatFs/src/ff.c **** #if _VOLUMES < 1 || _VOLUMES > 10
 531:Middlewares/Third_Party/FatFs/src/ff.c **** #error Wrong _VOLUMES setting
 532:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 533:Middlewares/Third_Party/FatFs/src/ff.c **** static FATFS *FatFs[_VOLUMES];	/* Pointer to the file system objects (logical drives) */
 534:Middlewares/Third_Party/FatFs/src/ff.c **** static WORD Fsid;				/* File system mount ID */
 535:Middlewares/Third_Party/FatFs/src/ff.c **** 
 536:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_RPATH != 0 && _VOLUMES >= 2
 537:Middlewares/Third_Party/FatFs/src/ff.c **** static BYTE CurrVol;			/* Current drive */
 538:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 539:Middlewares/Third_Party/FatFs/src/ff.c **** 
 540:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
 541:Middlewares/Third_Party/FatFs/src/ff.c **** static FILESEM Files[_FS_LOCK];	/* Open object lock semaphores */
 542:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 543:Middlewares/Third_Party/FatFs/src/ff.c **** 
 544:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN == 0		/* Non-LFN configuration */
 545:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DEF_NAMBUF
ARM GAS  /tmp/ccqUXb8n.s 			page 11


 546:Middlewares/Third_Party/FatFs/src/ff.c **** #define INIT_NAMBUF(fs)
 547:Middlewares/Third_Party/FatFs/src/ff.c **** #define	FREE_NAMBUF()
 548:Middlewares/Third_Party/FatFs/src/ff.c **** 
 549:Middlewares/Third_Party/FatFs/src/ff.c **** #else					/* LFN configuration */
 550:Middlewares/Third_Party/FatFs/src/ff.c **** #if _MAX_LFN < 12 || _MAX_LFN > 255
 551:Middlewares/Third_Party/FatFs/src/ff.c **** #error Wrong _MAX_LFN value
 552:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 553:Middlewares/Third_Party/FatFs/src/ff.c **** #define MAXDIRB(nc)	((nc + 44U) / 15 * SZDIRE)
 554:Middlewares/Third_Party/FatFs/src/ff.c **** 
 555:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN == 1		/* LFN enabled with static working buffer */
 556:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 557:Middlewares/Third_Party/FatFs/src/ff.c **** static BYTE	DirBuf[MAXDIRB(_MAX_LFN)];	/* Directory entry block scratchpad buffer */
 558:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 559:Middlewares/Third_Party/FatFs/src/ff.c **** static WCHAR LfnBuf[_MAX_LFN + 1];	/* LFN enabled with static working buffer */
 560:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DEF_NAMBUF
 561:Middlewares/Third_Party/FatFs/src/ff.c **** #define INIT_NAMBUF(fs)
 562:Middlewares/Third_Party/FatFs/src/ff.c **** #define	FREE_NAMBUF()
 563:Middlewares/Third_Party/FatFs/src/ff.c **** 
 564:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _USE_LFN == 2 	/* LFN enabled with dynamic working buffer on the stack */
 565:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 566:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DEF_NAMBUF		WCHAR lbuf[_MAX_LFN+1]; BYTE dbuf[MAXDIRB(_MAX_LFN)];
 567:Middlewares/Third_Party/FatFs/src/ff.c **** #define INIT_NAMBUF(fs)	{ (fs)->lfnbuf = lbuf; (fs)->dirbuf = dbuf; }
 568:Middlewares/Third_Party/FatFs/src/ff.c **** #define	FREE_NAMBUF()
 569:Middlewares/Third_Party/FatFs/src/ff.c **** #else
 570:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DEF_NAMBUF		WCHAR lbuf[_MAX_LFN+1];
 571:Middlewares/Third_Party/FatFs/src/ff.c **** #define INIT_NAMBUF(fs)	{ (fs)->lfnbuf = lbuf; }
 572:Middlewares/Third_Party/FatFs/src/ff.c **** #define	FREE_NAMBUF()
 573:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 574:Middlewares/Third_Party/FatFs/src/ff.c **** 
 575:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _USE_LFN == 3 	/* LFN enabled with dynamic working buffer on the heap */
 576:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 577:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DEF_NAMBUF		WCHAR *lfn;
 578:Middlewares/Third_Party/FatFs/src/ff.c **** #define INIT_NAMBUF(fs)	{ lfn = ff_memalloc((_MAX_LFN+1)*2 + MAXDIRB(_MAX_LFN)); if (!lfn) LEAVE_FF
 579:Middlewares/Third_Party/FatFs/src/ff.c **** #define	FREE_NAMBUF()	ff_memfree(lfn)
 580:Middlewares/Third_Party/FatFs/src/ff.c **** #else
 581:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DEF_NAMBUF		WCHAR *lfn;
 582:Middlewares/Third_Party/FatFs/src/ff.c **** #define INIT_NAMBUF(fs)	{ lfn = ff_memalloc((_MAX_LFN+1)*2); if (!lfn) LEAVE_FF(fs, FR_NOT_ENOUGH_C
 583:Middlewares/Third_Party/FatFs/src/ff.c **** #define	FREE_NAMBUF()	ff_memfree(lfn)
 584:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 585:Middlewares/Third_Party/FatFs/src/ff.c **** 
 586:Middlewares/Third_Party/FatFs/src/ff.c **** #else
 587:Middlewares/Third_Party/FatFs/src/ff.c **** #error Wrong _USE_LFN setting
 588:Middlewares/Third_Party/FatFs/src/ff.c **** 
 589:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 590:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* else _USE_LFN == 0 */
 591:Middlewares/Third_Party/FatFs/src/ff.c **** 
 592:Middlewares/Third_Party/FatFs/src/ff.c **** #ifdef _EXCVT
 593:Middlewares/Third_Party/FatFs/src/ff.c **** static const BYTE ExCvt[] = _EXCVT;	/* Upper conversion table for SBCS extended characters */
 594:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 595:Middlewares/Third_Party/FatFs/src/ff.c **** 
 596:Middlewares/Third_Party/FatFs/src/ff.c **** 
 597:Middlewares/Third_Party/FatFs/src/ff.c **** 
 598:Middlewares/Third_Party/FatFs/src/ff.c **** 
 599:Middlewares/Third_Party/FatFs/src/ff.c **** 
 600:Middlewares/Third_Party/FatFs/src/ff.c **** 
 601:Middlewares/Third_Party/FatFs/src/ff.c **** /*--------------------------------------------------------------------------
 602:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  /tmp/ccqUXb8n.s 			page 12


 603:Middlewares/Third_Party/FatFs/src/ff.c ****    Module Private Functions
 604:Middlewares/Third_Party/FatFs/src/ff.c **** 
 605:Middlewares/Third_Party/FatFs/src/ff.c **** ---------------------------------------------------------------------------*/
 606:Middlewares/Third_Party/FatFs/src/ff.c **** 
 607:Middlewares/Third_Party/FatFs/src/ff.c **** 
 608:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 609:Middlewares/Third_Party/FatFs/src/ff.c **** /* Load/Store multi-byte word in the FAT structure                       */
 610:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 611:Middlewares/Third_Party/FatFs/src/ff.c **** 
 612:Middlewares/Third_Party/FatFs/src/ff.c **** static
 613:Middlewares/Third_Party/FatFs/src/ff.c **** WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
 614:Middlewares/Third_Party/FatFs/src/ff.c **** {
  27              		.loc 1 614 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
 615:Middlewares/Third_Party/FatFs/src/ff.c **** 	WORD rv;
 616:Middlewares/Third_Party/FatFs/src/ff.c **** 
 617:Middlewares/Third_Party/FatFs/src/ff.c **** 	rv = ptr[1];
  33              		.loc 1 617 0
  34 0000 4278     		ldrb	r2, [r0, #1]	@ zero_extendqisi2
  35              	.LVL1:
 618:Middlewares/Third_Party/FatFs/src/ff.c **** 	rv = rv << 8 | ptr[0];
  36              		.loc 1 618 0
  37 0002 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
  38              	.LVL2:
 619:Middlewares/Third_Party/FatFs/src/ff.c **** 	return rv;
 620:Middlewares/Third_Party/FatFs/src/ff.c **** }
  39              		.loc 1 620 0
  40 0004 40EA0220 		orr	r0, r0, r2, lsl #8
  41              	.LVL3:
  42 0008 7047     		bx	lr
  43              		.cfi_endproc
  44              	.LFE141:
  46              		.section	.text.ld_dword,"ax",%progbits
  47              		.align	1
  48              		.syntax unified
  49              		.thumb
  50              		.thumb_func
  51              		.fpu fpv5-sp-d16
  53              	ld_dword:
  54              	.LFB142:
 621:Middlewares/Third_Party/FatFs/src/ff.c **** 
 622:Middlewares/Third_Party/FatFs/src/ff.c **** static
 623:Middlewares/Third_Party/FatFs/src/ff.c **** DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
 624:Middlewares/Third_Party/FatFs/src/ff.c **** {
  55              		.loc 1 624 0
  56              		.cfi_startproc
  57              		@ args = 0, pretend = 0, frame = 0
  58              		@ frame_needed = 0, uses_anonymous_args = 0
  59              		@ link register save eliminated.
  60              	.LVL4:
 625:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD rv;
 626:Middlewares/Third_Party/FatFs/src/ff.c **** 
 627:Middlewares/Third_Party/FatFs/src/ff.c **** 	rv = ptr[3];
ARM GAS  /tmp/ccqUXb8n.s 			page 13


  61              		.loc 1 627 0
  62 0000 C278     		ldrb	r2, [r0, #3]	@ zero_extendqisi2
  63              	.LVL5:
 628:Middlewares/Third_Party/FatFs/src/ff.c **** 	rv = rv << 8 | ptr[2];
  64              		.loc 1 628 0
  65 0002 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
  66 0004 43EA0222 		orr	r2, r3, r2, lsl #8
  67              	.LVL6:
 629:Middlewares/Third_Party/FatFs/src/ff.c **** 	rv = rv << 8 | ptr[1];
  68              		.loc 1 629 0
  69 0008 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
  70 000a 43EA0223 		orr	r3, r3, r2, lsl #8
  71              	.LVL7:
 630:Middlewares/Third_Party/FatFs/src/ff.c **** 	rv = rv << 8 | ptr[0];
  72              		.loc 1 630 0
  73 000e 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
  74              	.LVL8:
 631:Middlewares/Third_Party/FatFs/src/ff.c **** 	return rv;
 632:Middlewares/Third_Party/FatFs/src/ff.c **** }
  75              		.loc 1 632 0
  76 0010 40EA0320 		orr	r0, r0, r3, lsl #8
  77              	.LVL9:
  78 0014 7047     		bx	lr
  79              		.cfi_endproc
  80              	.LFE142:
  82              		.section	.text.st_word,"ax",%progbits
  83              		.align	1
  84              		.syntax unified
  85              		.thumb
  86              		.thumb_func
  87              		.fpu fpv5-sp-d16
  89              	st_word:
  90              	.LFB143:
 633:Middlewares/Third_Party/FatFs/src/ff.c **** 
 634:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 635:Middlewares/Third_Party/FatFs/src/ff.c **** static
 636:Middlewares/Third_Party/FatFs/src/ff.c **** QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
 637:Middlewares/Third_Party/FatFs/src/ff.c **** {
 638:Middlewares/Third_Party/FatFs/src/ff.c **** 	QWORD rv;
 639:Middlewares/Third_Party/FatFs/src/ff.c **** 
 640:Middlewares/Third_Party/FatFs/src/ff.c **** 	rv = ptr[7];
 641:Middlewares/Third_Party/FatFs/src/ff.c **** 	rv = rv << 8 | ptr[6];
 642:Middlewares/Third_Party/FatFs/src/ff.c **** 	rv = rv << 8 | ptr[5];
 643:Middlewares/Third_Party/FatFs/src/ff.c **** 	rv = rv << 8 | ptr[4];
 644:Middlewares/Third_Party/FatFs/src/ff.c **** 	rv = rv << 8 | ptr[3];
 645:Middlewares/Third_Party/FatFs/src/ff.c **** 	rv = rv << 8 | ptr[2];
 646:Middlewares/Third_Party/FatFs/src/ff.c **** 	rv = rv << 8 | ptr[1];
 647:Middlewares/Third_Party/FatFs/src/ff.c **** 	rv = rv << 8 | ptr[0];
 648:Middlewares/Third_Party/FatFs/src/ff.c **** 	return rv;
 649:Middlewares/Third_Party/FatFs/src/ff.c **** }
 650:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 651:Middlewares/Third_Party/FatFs/src/ff.c **** 
 652:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
 653:Middlewares/Third_Party/FatFs/src/ff.c **** static
 654:Middlewares/Third_Party/FatFs/src/ff.c **** void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
 655:Middlewares/Third_Party/FatFs/src/ff.c **** {
  91              		.loc 1 655 0
ARM GAS  /tmp/ccqUXb8n.s 			page 14


  92              		.cfi_startproc
  93              		@ args = 0, pretend = 0, frame = 0
  94              		@ frame_needed = 0, uses_anonymous_args = 0
  95              		@ link register save eliminated.
  96              	.LVL10:
 656:Middlewares/Third_Party/FatFs/src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
  97              		.loc 1 656 0
  98 0000 0170     		strb	r1, [r0]
  99              	.LVL11:
 657:Middlewares/Third_Party/FatFs/src/ff.c **** 	*ptr++ = (BYTE)val;
 100              		.loc 1 657 0
 101 0002 090A     		lsrs	r1, r1, #8
 102              	.LVL12:
 103 0004 4170     		strb	r1, [r0, #1]
 658:Middlewares/Third_Party/FatFs/src/ff.c **** }
 104              		.loc 1 658 0
 105 0006 7047     		bx	lr
 106              		.cfi_endproc
 107              	.LFE143:
 109              		.section	.text.st_dword,"ax",%progbits
 110              		.align	1
 111              		.syntax unified
 112              		.thumb
 113              		.thumb_func
 114              		.fpu fpv5-sp-d16
 116              	st_dword:
 117              	.LFB144:
 659:Middlewares/Third_Party/FatFs/src/ff.c **** 
 660:Middlewares/Third_Party/FatFs/src/ff.c **** static
 661:Middlewares/Third_Party/FatFs/src/ff.c **** void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
 662:Middlewares/Third_Party/FatFs/src/ff.c **** {
 118              		.loc 1 662 0
 119              		.cfi_startproc
 120              		@ args = 0, pretend = 0, frame = 0
 121              		@ frame_needed = 0, uses_anonymous_args = 0
 122              		@ link register save eliminated.
 123              	.LVL13:
 663:Middlewares/Third_Party/FatFs/src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 124              		.loc 1 663 0
 125 0000 0170     		strb	r1, [r0]
 126              	.LVL14:
 664:Middlewares/Third_Party/FatFs/src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 127              		.loc 1 664 0
 128 0002 C1F30723 		ubfx	r3, r1, #8, #8
 129 0006 4370     		strb	r3, [r0, #1]
 130              	.LVL15:
 665:Middlewares/Third_Party/FatFs/src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 131              		.loc 1 665 0
 132 0008 C1F30743 		ubfx	r3, r1, #16, #8
 133 000c 8370     		strb	r3, [r0, #2]
 134              	.LVL16:
 666:Middlewares/Third_Party/FatFs/src/ff.c **** 	*ptr++ = (BYTE)val;
 135              		.loc 1 666 0
 136 000e 090E     		lsrs	r1, r1, #24
 137              	.LVL17:
 138 0010 C170     		strb	r1, [r0, #3]
 667:Middlewares/Third_Party/FatFs/src/ff.c **** }
ARM GAS  /tmp/ccqUXb8n.s 			page 15


 139              		.loc 1 667 0
 140 0012 7047     		bx	lr
 141              		.cfi_endproc
 142              	.LFE144:
 144              		.section	.text.mem_cpy,"ax",%progbits
 145              		.align	1
 146              		.syntax unified
 147              		.thumb
 148              		.thumb_func
 149              		.fpu fpv5-sp-d16
 151              	mem_cpy:
 152              	.LFB145:
 668:Middlewares/Third_Party/FatFs/src/ff.c **** 
 669:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 670:Middlewares/Third_Party/FatFs/src/ff.c **** static
 671:Middlewares/Third_Party/FatFs/src/ff.c **** void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
 672:Middlewares/Third_Party/FatFs/src/ff.c **** {
 673:Middlewares/Third_Party/FatFs/src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 674:Middlewares/Third_Party/FatFs/src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 675:Middlewares/Third_Party/FatFs/src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 676:Middlewares/Third_Party/FatFs/src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 677:Middlewares/Third_Party/FatFs/src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 678:Middlewares/Third_Party/FatFs/src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 679:Middlewares/Third_Party/FatFs/src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 680:Middlewares/Third_Party/FatFs/src/ff.c **** 	*ptr++ = (BYTE)val;
 681:Middlewares/Third_Party/FatFs/src/ff.c **** }
 682:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 683:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* !_FS_READONLY */
 684:Middlewares/Third_Party/FatFs/src/ff.c **** 
 685:Middlewares/Third_Party/FatFs/src/ff.c **** 
 686:Middlewares/Third_Party/FatFs/src/ff.c **** 
 687:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 688:Middlewares/Third_Party/FatFs/src/ff.c **** /* String functions                                                      */
 689:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 690:Middlewares/Third_Party/FatFs/src/ff.c **** 
 691:Middlewares/Third_Party/FatFs/src/ff.c **** /* Copy memory to memory */
 692:Middlewares/Third_Party/FatFs/src/ff.c **** static
 693:Middlewares/Third_Party/FatFs/src/ff.c **** void mem_cpy (void* dst, const void* src, UINT cnt) {
 153              		.loc 1 693 0
 154              		.cfi_startproc
 155              		@ args = 0, pretend = 0, frame = 0
 156              		@ frame_needed = 0, uses_anonymous_args = 0
 157              		@ link register save eliminated.
 158              	.LVL18:
 694:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE *d = (BYTE*)dst;
 695:Middlewares/Third_Party/FatFs/src/ff.c **** 	const BYTE *s = (const BYTE*)src;
 696:Middlewares/Third_Party/FatFs/src/ff.c **** 
 697:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (cnt) {
 159              		.loc 1 697 0
 160 0000 1346     		mov	r3, r2
 161 0002 2AB1     		cbz	r2, .L5
 162              	.LVL19:
 163              	.L7:
 698:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
 699:Middlewares/Third_Party/FatFs/src/ff.c **** 			*d++ = *s++;
 164              		.loc 1 699 0 discriminator 1
 165 0004 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
ARM GAS  /tmp/ccqUXb8n.s 			page 16


 166 0006 0270     		strb	r2, [r0]
 167              	.LVL20:
 168 0008 0130     		adds	r0, r0, #1
 169              	.LVL21:
 170 000a 0131     		adds	r1, r1, #1
 171              	.LVL22:
 700:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (--cnt);
 172              		.loc 1 700 0 discriminator 1
 173 000c 013B     		subs	r3, r3, #1
 174              	.LVL23:
 175 000e F9D1     		bne	.L7
 176              	.L5:
 701:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 702:Middlewares/Third_Party/FatFs/src/ff.c **** }
 177              		.loc 1 702 0
 178 0010 7047     		bx	lr
 179              		.cfi_endproc
 180              	.LFE145:
 182              		.section	.text.mem_set,"ax",%progbits
 183              		.align	1
 184              		.syntax unified
 185              		.thumb
 186              		.thumb_func
 187              		.fpu fpv5-sp-d16
 189              	mem_set:
 190              	.LFB146:
 703:Middlewares/Third_Party/FatFs/src/ff.c **** 
 704:Middlewares/Third_Party/FatFs/src/ff.c **** /* Fill memory block */
 705:Middlewares/Third_Party/FatFs/src/ff.c **** static
 706:Middlewares/Third_Party/FatFs/src/ff.c **** void mem_set (void* dst, int val, UINT cnt) {
 191              		.loc 1 706 0
 192              		.cfi_startproc
 193              		@ args = 0, pretend = 0, frame = 0
 194              		@ frame_needed = 0, uses_anonymous_args = 0
 195              		@ link register save eliminated.
 196              	.LVL24:
 197              	.L9:
 707:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE *d = (BYTE*)dst;
 708:Middlewares/Third_Party/FatFs/src/ff.c **** 
 709:Middlewares/Third_Party/FatFs/src/ff.c **** 	do {
 710:Middlewares/Third_Party/FatFs/src/ff.c **** 		*d++ = (BYTE)val;
 198              		.loc 1 710 0 discriminator 1
 199 0000 0170     		strb	r1, [r0]
 200              	.LVL25:
 201 0002 0130     		adds	r0, r0, #1
 202              	.LVL26:
 711:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (--cnt);
 203              		.loc 1 711 0 discriminator 1
 204 0004 013A     		subs	r2, r2, #1
 205              	.LVL27:
 206 0006 FBD1     		bne	.L9
 712:Middlewares/Third_Party/FatFs/src/ff.c **** }
 207              		.loc 1 712 0
 208 0008 7047     		bx	lr
 209              		.cfi_endproc
 210              	.LFE146:
 212              		.section	.text.mem_cmp,"ax",%progbits
ARM GAS  /tmp/ccqUXb8n.s 			page 17


 213              		.align	1
 214              		.syntax unified
 215              		.thumb
 216              		.thumb_func
 217              		.fpu fpv5-sp-d16
 219              	mem_cmp:
 220              	.LFB147:
 713:Middlewares/Third_Party/FatFs/src/ff.c **** 
 714:Middlewares/Third_Party/FatFs/src/ff.c **** /* Compare memory block */
 715:Middlewares/Third_Party/FatFs/src/ff.c **** static
 716:Middlewares/Third_Party/FatFs/src/ff.c **** int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 221              		.loc 1 716 0
 222              		.cfi_startproc
 223              		@ args = 0, pretend = 0, frame = 0
 224              		@ frame_needed = 0, uses_anonymous_args = 0
 225              		@ link register save eliminated.
 226              	.LVL28:
 227 0000 30B4     		push	{r4, r5}
 228              	.LCFI0:
 229              		.cfi_def_cfa_offset 8
 230              		.cfi_offset 4, -8
 231              		.cfi_offset 5, -4
 232              	.LVL29:
 233              	.L12:
 717:Middlewares/Third_Party/FatFs/src/ff.c **** 	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 718:Middlewares/Third_Party/FatFs/src/ff.c **** 	int r = 0;
 719:Middlewares/Third_Party/FatFs/src/ff.c **** 
 720:Middlewares/Third_Party/FatFs/src/ff.c **** 	do {
 721:Middlewares/Third_Party/FatFs/src/ff.c **** 		r = *d++ - *s++;
 234              		.loc 1 721 0 discriminator 2
 235 0002 451C     		adds	r5, r0, #1
 236              	.LVL30:
 237 0004 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 238              	.LVL31:
 239 0006 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 240 0008 1B1A     		subs	r3, r3, r0
 241              	.LVL32:
 722:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (--cnt && r == 0);
 242              		.loc 1 722 0 discriminator 2
 243 000a 013A     		subs	r2, r2, #1
 244              	.LVL33:
 245 000c 04D0     		beq	.L10
 246 000e 4C1C     		adds	r4, r1, #1
 247              	.LVL34:
 721:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (--cnt && r == 0);
 248              		.loc 1 721 0 discriminator 1
 249 0010 2846     		mov	r0, r5
 250 0012 2146     		mov	r1, r4
 251              		.loc 1 722 0 discriminator 1
 252 0014 002B     		cmp	r3, #0
 253 0016 F4D0     		beq	.L12
 254              	.LVL35:
 255              	.L10:
 723:Middlewares/Third_Party/FatFs/src/ff.c **** 
 724:Middlewares/Third_Party/FatFs/src/ff.c **** 	return r;
 725:Middlewares/Third_Party/FatFs/src/ff.c **** }
 256              		.loc 1 725 0
ARM GAS  /tmp/ccqUXb8n.s 			page 18


 257 0018 1846     		mov	r0, r3
 258 001a 30BC     		pop	{r4, r5}
 259              	.LCFI1:
 260              		.cfi_restore 5
 261              		.cfi_restore 4
 262              		.cfi_def_cfa_offset 0
 263              	.LVL36:
 264 001c 7047     		bx	lr
 265              		.cfi_endproc
 266              	.LFE147:
 268              		.section	.text.chk_chr,"ax",%progbits
 269              		.align	1
 270              		.syntax unified
 271              		.thumb
 272              		.thumb_func
 273              		.fpu fpv5-sp-d16
 275              	chk_chr:
 276              	.LFB148:
 726:Middlewares/Third_Party/FatFs/src/ff.c **** 
 727:Middlewares/Third_Party/FatFs/src/ff.c **** /* Check if chr is contained in the string */
 728:Middlewares/Third_Party/FatFs/src/ff.c **** static
 729:Middlewares/Third_Party/FatFs/src/ff.c **** int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 277              		.loc 1 729 0
 278              		.cfi_startproc
 279              		@ args = 0, pretend = 0, frame = 0
 280              		@ frame_needed = 0, uses_anonymous_args = 0
 281              		@ link register save eliminated.
 282              	.LVL37:
 730:Middlewares/Third_Party/FatFs/src/ff.c **** 	while (*str && *str != chr) str++;
 283              		.loc 1 730 0
 284 0000 00E0     		b	.L15
 285              	.L17:
 286              		.loc 1 730 0 is_stmt 0 discriminator 3
 287 0002 0130     		adds	r0, r0, #1
 288              	.LVL38:
 289              	.L15:
 290              		.loc 1 730 0 discriminator 1
 291 0004 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 292 0006 0BB1     		cbz	r3, .L16
 293              		.loc 1 730 0 discriminator 2
 294 0008 8B42     		cmp	r3, r1
 295 000a FAD1     		bne	.L17
 296              	.L16:
 731:Middlewares/Third_Party/FatFs/src/ff.c **** 	return *str;
 732:Middlewares/Third_Party/FatFs/src/ff.c **** }
 297              		.loc 1 732 0 is_stmt 1
 298 000c 1846     		mov	r0, r3
 299              	.LVL39:
 300 000e 7047     		bx	lr
 301              		.cfi_endproc
 302              	.LFE148:
 304              		.section	.text.chk_lock,"ax",%progbits
 305              		.align	1
 306              		.syntax unified
 307              		.thumb
 308              		.thumb_func
 309              		.fpu fpv5-sp-d16
ARM GAS  /tmp/ccqUXb8n.s 			page 19


 311              	chk_lock:
 312              	.LFB151:
 733:Middlewares/Third_Party/FatFs/src/ff.c **** 
 734:Middlewares/Third_Party/FatFs/src/ff.c **** 
 735:Middlewares/Third_Party/FatFs/src/ff.c **** 
 736:Middlewares/Third_Party/FatFs/src/ff.c **** 
 737:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_REENTRANT
 738:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 739:Middlewares/Third_Party/FatFs/src/ff.c **** /* Request/Release grant to access the volume                            */
 740:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 741:Middlewares/Third_Party/FatFs/src/ff.c **** static
 742:Middlewares/Third_Party/FatFs/src/ff.c **** int lock_fs (
 743:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS* fs		/* File system object */
 744:Middlewares/Third_Party/FatFs/src/ff.c **** )
 745:Middlewares/Third_Party/FatFs/src/ff.c **** {
 746:Middlewares/Third_Party/FatFs/src/ff.c **** 	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 747:Middlewares/Third_Party/FatFs/src/ff.c **** }
 748:Middlewares/Third_Party/FatFs/src/ff.c **** 
 749:Middlewares/Third_Party/FatFs/src/ff.c **** 
 750:Middlewares/Third_Party/FatFs/src/ff.c **** static
 751:Middlewares/Third_Party/FatFs/src/ff.c **** void unlock_fs (
 752:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS* fs,		/* File system object */
 753:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res		/* Result code to be returned */
 754:Middlewares/Third_Party/FatFs/src/ff.c **** )
 755:Middlewares/Third_Party/FatFs/src/ff.c **** {
 756:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 757:Middlewares/Third_Party/FatFs/src/ff.c **** 		ff_rel_grant(fs->sobj);
 758:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 759:Middlewares/Third_Party/FatFs/src/ff.c **** }
 760:Middlewares/Third_Party/FatFs/src/ff.c **** 
 761:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 762:Middlewares/Third_Party/FatFs/src/ff.c **** 
 763:Middlewares/Third_Party/FatFs/src/ff.c **** 
 764:Middlewares/Third_Party/FatFs/src/ff.c **** 
 765:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
 766:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 767:Middlewares/Third_Party/FatFs/src/ff.c **** /* File lock control functions                                           */
 768:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 769:Middlewares/Third_Party/FatFs/src/ff.c **** 
 770:Middlewares/Third_Party/FatFs/src/ff.c **** static
 771:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT chk_lock (	/* Check if the file can be accessed */
 772:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp,		/* Directory object pointing the file to be checked */
 773:Middlewares/Third_Party/FatFs/src/ff.c **** 	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
 774:Middlewares/Third_Party/FatFs/src/ff.c **** )
 775:Middlewares/Third_Party/FatFs/src/ff.c **** {
 313              		.loc 1 775 0
 314              		.cfi_startproc
 315              		@ args = 0, pretend = 0, frame = 0
 316              		@ frame_needed = 0, uses_anonymous_args = 0
 317              		@ link register save eliminated.
 318              	.LVL40:
 319 0000 30B4     		push	{r4, r5}
 320              	.LCFI2:
 321              		.cfi_def_cfa_offset 8
 322              		.cfi_offset 4, -8
 323              		.cfi_offset 5, -4
 324              	.LVL41:
ARM GAS  /tmp/ccqUXb8n.s 			page 20


 776:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, be;
 777:Middlewares/Third_Party/FatFs/src/ff.c **** 
 778:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Search file semaphore table */
 779:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (i = be = 0; i < _FS_LOCK; i++) {
 325              		.loc 1 779 0
 326 0002 0025     		movs	r5, #0
 327 0004 2B46     		mov	r3, r5
 328 0006 01E0     		b	.L19
 329              	.LVL42:
 330              	.L25:
 780:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 781:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 782:Middlewares/Third_Party/FatFs/src/ff.c **** 				Files[i].clu == dp->obj.sclust &&
 783:Middlewares/Third_Party/FatFs/src/ff.c **** 				Files[i].ofs == dp->dptr) break;
 784:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {			/* Blank entry */
 785:Middlewares/Third_Party/FatFs/src/ff.c **** 			be = 1;
 331              		.loc 1 785 0
 332 0008 0125     		movs	r5, #1
 333              	.LVL43:
 334              	.L20:
 779:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 335              		.loc 1 779 0 discriminator 2
 336 000a 0133     		adds	r3, r3, #1
 337              	.LVL44:
 338              	.L19:
 779:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 339              		.loc 1 779 0 is_stmt 0 discriminator 1
 340 000c 012B     		cmp	r3, #1
 341 000e 15D8     		bhi	.L21
 780:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 342              		.loc 1 780 0 is_stmt 1
 343 0010 1A01     		lsls	r2, r3, #4
 344 0012 174C     		ldr	r4, .L32
 345 0014 A258     		ldr	r2, [r4, r2]
 346 0016 002A     		cmp	r2, #0
 347 0018 F6D0     		beq	.L25
 781:Middlewares/Third_Party/FatFs/src/ff.c **** 				Files[i].clu == dp->obj.sclust &&
 348              		.loc 1 781 0
 349 001a 0468     		ldr	r4, [r0]
 350 001c A242     		cmp	r2, r4
 351 001e F4D1     		bne	.L20
 782:Middlewares/Third_Party/FatFs/src/ff.c **** 				Files[i].ofs == dp->dptr) break;
 352              		.loc 1 782 0 discriminator 1
 353 0020 134A     		ldr	r2, .L32
 354 0022 02EB0312 		add	r2, r2, r3, lsl #4
 355 0026 5468     		ldr	r4, [r2, #4]
 356 0028 8268     		ldr	r2, [r0, #8]
 781:Middlewares/Third_Party/FatFs/src/ff.c **** 				Files[i].clu == dp->obj.sclust &&
 357              		.loc 1 781 0 discriminator 1
 358 002a 9442     		cmp	r4, r2
 359 002c EDD1     		bne	.L20
 783:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {			/* Blank entry */
 360              		.loc 1 783 0
 361 002e 104A     		ldr	r2, .L32
 362 0030 02EB0312 		add	r2, r2, r3, lsl #4
 363 0034 9468     		ldr	r4, [r2, #8]
 364 0036 4269     		ldr	r2, [r0, #20]
ARM GAS  /tmp/ccqUXb8n.s 			page 21


 782:Middlewares/Third_Party/FatFs/src/ff.c **** 				Files[i].ofs == dp->dptr) break;
 365              		.loc 1 782 0
 366 0038 9442     		cmp	r4, r2
 367 003a E6D1     		bne	.L20
 368              	.L21:
 786:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 787:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 788:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (i == _FS_LOCK) {	/* The object is not opened */
 369              		.loc 1 788 0
 370 003c 022B     		cmp	r3, #2
 371 003e 0AD0     		beq	.L30
 789:Middlewares/Third_Party/FatFs/src/ff.c **** 		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new objec
 790:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 791:Middlewares/Third_Party/FatFs/src/ff.c **** 
 792:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* The object has been opened. Reject any open against writing file and all write mode open */
 793:Middlewares/Third_Party/FatFs/src/ff.c **** 	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 372              		.loc 1 793 0
 373 0040 A1B9     		cbnz	r1, .L27
 374              		.loc 1 793 0 is_stmt 0 discriminator 2
 375 0042 0B4A     		ldr	r2, .L32
 376 0044 02EB0313 		add	r3, r2, r3, lsl #4
 377              	.LVL45:
 378 0048 9B89     		ldrh	r3, [r3, #12]
 379 004a B3F5807F 		cmp	r3, #256
 380 004e 09D0     		beq	.L31
 381              		.loc 1 793 0
 382 0050 0020     		movs	r0, #0
 383              	.LVL46:
 384              	.L24:
 794:Middlewares/Third_Party/FatFs/src/ff.c **** }
 385              		.loc 1 794 0 is_stmt 1
 386 0052 30BC     		pop	{r4, r5}
 387              	.LCFI3:
 388              		.cfi_remember_state
 389              		.cfi_restore 5
 390              		.cfi_restore 4
 391              		.cfi_def_cfa_offset 0
 392 0054 7047     		bx	lr
 393              	.LVL47:
 394              	.L30:
 395              	.LCFI4:
 396              		.cfi_restore_state
 789:Middlewares/Third_Party/FatFs/src/ff.c **** 		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new objec
 397              		.loc 1 789 0
 398 0056 0229     		cmp	r1, #2
 399 0058 08BF     		it	eq
 400 005a 45F00105 		orreq	r5, r5, #1
 401              	.LVL48:
 402 005e 1DB1     		cbz	r5, .L26
 403 0060 0020     		movs	r0, #0
 404              	.LVL49:
 405 0062 F6E7     		b	.L24
 406              	.LVL50:
 407              	.L31:
 793:Middlewares/Third_Party/FatFs/src/ff.c **** }
 408              		.loc 1 793 0
 409 0064 1020     		movs	r0, #16
ARM GAS  /tmp/ccqUXb8n.s 			page 22


 410              	.LVL51:
 411 0066 F4E7     		b	.L24
 412              	.LVL52:
 413              	.L26:
 789:Middlewares/Third_Party/FatFs/src/ff.c **** 		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new objec
 414              		.loc 1 789 0
 415 0068 1220     		movs	r0, #18
 416              	.LVL53:
 417 006a F2E7     		b	.L24
 418              	.LVL54:
 419              	.L27:
 793:Middlewares/Third_Party/FatFs/src/ff.c **** }
 420              		.loc 1 793 0
 421 006c 1020     		movs	r0, #16
 422              	.LVL55:
 423 006e F0E7     		b	.L24
 424              	.L33:
 425              		.align	2
 426              	.L32:
 427 0070 00000000 		.word	.LANCHOR0
 428              		.cfi_endproc
 429              	.LFE151:
 431              		.section	.text.enq_lock,"ax",%progbits
 432              		.align	1
 433              		.syntax unified
 434              		.thumb
 435              		.thumb_func
 436              		.fpu fpv5-sp-d16
 438              	enq_lock:
 439              	.LFB152:
 795:Middlewares/Third_Party/FatFs/src/ff.c **** 
 796:Middlewares/Third_Party/FatFs/src/ff.c **** 
 797:Middlewares/Third_Party/FatFs/src/ff.c **** static
 798:Middlewares/Third_Party/FatFs/src/ff.c **** int enq_lock (void)	/* Check if an entry is available for a new object */
 799:Middlewares/Third_Party/FatFs/src/ff.c **** {
 440              		.loc 1 799 0
 441              		.cfi_startproc
 442              		@ args = 0, pretend = 0, frame = 0
 443              		@ frame_needed = 0, uses_anonymous_args = 0
 444              		@ link register save eliminated.
 445              	.LVL56:
 800:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i;
 801:Middlewares/Third_Party/FatFs/src/ff.c **** 
 802:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 446              		.loc 1 802 0
 447 0000 0020     		movs	r0, #0
 448 0002 00E0     		b	.L35
 449              	.LVL57:
 450              	.L37:
 451              		.loc 1 802 0 is_stmt 0 discriminator 4
 452 0004 0130     		adds	r0, r0, #1
 453              	.LVL58:
 454              	.L35:
 455              		.loc 1 802 0 discriminator 1
 456 0006 0128     		cmp	r0, #1
 457 0008 04D8     		bhi	.L36
 458              		.loc 1 802 0 discriminator 3
ARM GAS  /tmp/ccqUXb8n.s 			page 23


 459 000a 0301     		lsls	r3, r0, #4
 460 000c 034A     		ldr	r2, .L38
 461 000e D358     		ldr	r3, [r2, r3]
 462 0010 002B     		cmp	r3, #0
 463 0012 F7D1     		bne	.L37
 464              	.L36:
 803:Middlewares/Third_Party/FatFs/src/ff.c **** 	return (i == _FS_LOCK) ? 0 : 1;
 804:Middlewares/Third_Party/FatFs/src/ff.c **** }
 465              		.loc 1 804 0 is_stmt 1
 466 0014 0238     		subs	r0, r0, #2
 467              	.LVL59:
 468 0016 18BF     		it	ne
 469 0018 0120     		movne	r0, #1
 470              	.LVL60:
 471 001a 7047     		bx	lr
 472              	.L39:
 473              		.align	2
 474              	.L38:
 475 001c 00000000 		.word	.LANCHOR0
 476              		.cfi_endproc
 477              	.LFE152:
 479              		.section	.text.inc_lock,"ax",%progbits
 480              		.align	1
 481              		.syntax unified
 482              		.thumb
 483              		.thumb_func
 484              		.fpu fpv5-sp-d16
 486              	inc_lock:
 487              	.LFB153:
 805:Middlewares/Third_Party/FatFs/src/ff.c **** 
 806:Middlewares/Third_Party/FatFs/src/ff.c **** 
 807:Middlewares/Third_Party/FatFs/src/ff.c **** static
 808:Middlewares/Third_Party/FatFs/src/ff.c **** UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
 809:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp,	/* Directory object pointing the file to register or increment */
 810:Middlewares/Third_Party/FatFs/src/ff.c **** 	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
 811:Middlewares/Third_Party/FatFs/src/ff.c **** )
 812:Middlewares/Third_Party/FatFs/src/ff.c **** {
 488              		.loc 1 812 0
 489              		.cfi_startproc
 490              		@ args = 0, pretend = 0, frame = 0
 491              		@ frame_needed = 0, uses_anonymous_args = 0
 492              		@ link register save eliminated.
 493              	.LVL61:
 494 0000 70B4     		push	{r4, r5, r6}
 495              	.LCFI5:
 496              		.cfi_def_cfa_offset 12
 497              		.cfi_offset 4, -12
 498              		.cfi_offset 5, -8
 499              		.cfi_offset 6, -4
 500              	.LVL62:
 813:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i;
 814:Middlewares/Third_Party/FatFs/src/ff.c **** 
 815:Middlewares/Third_Party/FatFs/src/ff.c **** 
 816:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 501              		.loc 1 816 0
 502 0002 0023     		movs	r3, #0
 503 0004 00E0     		b	.L41
ARM GAS  /tmp/ccqUXb8n.s 			page 24


 504              	.LVL63:
 505              	.L42:
 506              		.loc 1 816 0 is_stmt 0 discriminator 2
 507 0006 0133     		adds	r3, r3, #1
 508              	.LVL64:
 509              	.L41:
 510              		.loc 1 816 0 discriminator 1
 511 0008 012B     		cmp	r3, #1
 512 000a 13D8     		bhi	.L43
 817:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (Files[i].fs == dp->obj.fs &&
 513              		.loc 1 817 0 is_stmt 1
 514 000c 1A01     		lsls	r2, r3, #4
 515 000e 244C     		ldr	r4, .L58
 516 0010 A458     		ldr	r4, [r4, r2]
 517 0012 0268     		ldr	r2, [r0]
 518 0014 9442     		cmp	r4, r2
 519 0016 F6D1     		bne	.L42
 818:Middlewares/Third_Party/FatFs/src/ff.c **** 			Files[i].clu == dp->obj.sclust &&
 520              		.loc 1 818 0 discriminator 1
 521 0018 214A     		ldr	r2, .L58
 522 001a 02EB0312 		add	r2, r2, r3, lsl #4
 523 001e 5468     		ldr	r4, [r2, #4]
 524 0020 8268     		ldr	r2, [r0, #8]
 817:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (Files[i].fs == dp->obj.fs &&
 525              		.loc 1 817 0 discriminator 1
 526 0022 9442     		cmp	r4, r2
 527 0024 EFD1     		bne	.L42
 819:Middlewares/Third_Party/FatFs/src/ff.c **** 			Files[i].ofs == dp->dptr) break;
 528              		.loc 1 819 0
 529 0026 1E4A     		ldr	r2, .L58
 530 0028 02EB0312 		add	r2, r2, r3, lsl #4
 531 002c 9468     		ldr	r4, [r2, #8]
 532 002e 4269     		ldr	r2, [r0, #20]
 818:Middlewares/Third_Party/FatFs/src/ff.c **** 			Files[i].clu == dp->obj.sclust &&
 533              		.loc 1 818 0
 534 0030 9442     		cmp	r4, r2
 535 0032 E8D1     		bne	.L42
 536              	.L43:
 820:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 821:Middlewares/Third_Party/FatFs/src/ff.c **** 
 822:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 537              		.loc 1 822 0
 538 0034 022B     		cmp	r3, #2
 539 0036 29D0     		beq	.L57
 540              	.LVL65:
 541              	.L46:
 823:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 824:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 825:Middlewares/Third_Party/FatFs/src/ff.c **** 		Files[i].fs = dp->obj.fs;
 826:Middlewares/Third_Party/FatFs/src/ff.c **** 		Files[i].clu = dp->obj.sclust;
 827:Middlewares/Third_Party/FatFs/src/ff.c **** 		Files[i].ofs = dp->dptr;
 828:Middlewares/Third_Party/FatFs/src/ff.c **** 		Files[i].ctr = 0;
 829:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 830:Middlewares/Third_Party/FatFs/src/ff.c **** 
 831:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 542              		.loc 1 831 0
 543 0038 21B1     		cbz	r1, .L50
ARM GAS  /tmp/ccqUXb8n.s 			page 25


 544              		.loc 1 831 0 is_stmt 0 discriminator 1
 545 003a 194A     		ldr	r2, .L58
 546 003c 02EB0312 		add	r2, r2, r3, lsl #4
 547 0040 9289     		ldrh	r2, [r2, #12]
 548 0042 52BB     		cbnz	r2, .L54
 549              	.L50:
 832:Middlewares/Third_Party/FatFs/src/ff.c **** 
 833:Middlewares/Third_Party/FatFs/src/ff.c **** 	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 550              		.loc 1 833 0 is_stmt 1
 551 0044 21BB     		cbnz	r1, .L55
 552              		.loc 1 833 0 is_stmt 0 discriminator 1
 553 0046 164A     		ldr	r2, .L58
 554 0048 02EB0312 		add	r2, r2, r3, lsl #4
 555 004c 9189     		ldrh	r1, [r2, #12]
 556              	.LVL66:
 557 004e 0131     		adds	r1, r1, #1
 558 0050 89B2     		uxth	r1, r1
 559              	.L51:
 560              		.loc 1 833 0 discriminator 4
 561 0052 134A     		ldr	r2, .L58
 562 0054 02EB0312 		add	r2, r2, r3, lsl #4
 563 0058 9181     		strh	r1, [r2, #12]	@ movhi
 834:Middlewares/Third_Party/FatFs/src/ff.c **** 
 835:Middlewares/Third_Party/FatFs/src/ff.c **** 	return i + 1;
 564              		.loc 1 835 0 is_stmt 1 discriminator 4
 565 005a 581C     		adds	r0, r3, #1
 566              	.L40:
 836:Middlewares/Third_Party/FatFs/src/ff.c **** }
 567              		.loc 1 836 0
 568 005c 70BC     		pop	{r4, r5, r6}
 569              	.LCFI6:
 570              		.cfi_remember_state
 571              		.cfi_restore 6
 572              		.cfi_restore 5
 573              		.cfi_restore 4
 574              		.cfi_def_cfa_offset 0
 575 005e 7047     		bx	lr
 576              	.LVL67:
 577              	.L48:
 578              	.LCFI7:
 579              		.cfi_restore_state
 823:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 580              		.loc 1 823 0 discriminator 4
 581 0060 0133     		adds	r3, r3, #1
 582              	.LVL68:
 583              	.L45:
 823:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 584              		.loc 1 823 0 is_stmt 0 discriminator 1
 585 0062 012B     		cmp	r3, #1
 586 0064 04D8     		bhi	.L47
 823:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 587              		.loc 1 823 0 discriminator 3
 588 0066 1A01     		lsls	r2, r3, #4
 589 0068 0D4C     		ldr	r4, .L58
 590 006a A258     		ldr	r2, [r4, r2]
 591 006c 002A     		cmp	r2, #0
 592 006e F7D1     		bne	.L48
ARM GAS  /tmp/ccqUXb8n.s 			page 26


 593              	.L47:
 824:Middlewares/Third_Party/FatFs/src/ff.c **** 		Files[i].fs = dp->obj.fs;
 594              		.loc 1 824 0 is_stmt 1
 595 0070 022B     		cmp	r3, #2
 596 0072 10D0     		beq	.L53
 825:Middlewares/Third_Party/FatFs/src/ff.c **** 		Files[i].clu = dp->obj.sclust;
 597              		.loc 1 825 0
 598 0074 0668     		ldr	r6, [r0]
 599 0076 0A4D     		ldr	r5, .L58
 600 0078 1C01     		lsls	r4, r3, #4
 601 007a 2A19     		adds	r2, r5, r4
 602 007c 2E51     		str	r6, [r5, r4]
 826:Middlewares/Third_Party/FatFs/src/ff.c **** 		Files[i].ofs = dp->dptr;
 603              		.loc 1 826 0
 604 007e 8468     		ldr	r4, [r0, #8]
 605 0080 5460     		str	r4, [r2, #4]
 827:Middlewares/Third_Party/FatFs/src/ff.c **** 		Files[i].ctr = 0;
 606              		.loc 1 827 0
 607 0082 4069     		ldr	r0, [r0, #20]
 608              	.LVL69:
 609 0084 9060     		str	r0, [r2, #8]
 828:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 610              		.loc 1 828 0
 611 0086 0020     		movs	r0, #0
 612 0088 9081     		strh	r0, [r2, #12]	@ movhi
 613 008a D5E7     		b	.L46
 614              	.LVL70:
 615              	.L57:
 823:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 616              		.loc 1 823 0
 617 008c 0023     		movs	r3, #0
 618              	.LVL71:
 619 008e E8E7     		b	.L45
 620              	.LVL72:
 621              	.L55:
 833:Middlewares/Third_Party/FatFs/src/ff.c **** 
 622              		.loc 1 833 0
 623 0090 4FF48071 		mov	r1, #256
 624              	.LVL73:
 625 0094 DDE7     		b	.L51
 626              	.LVL74:
 627              	.L53:
 824:Middlewares/Third_Party/FatFs/src/ff.c **** 		Files[i].fs = dp->obj.fs;
 628              		.loc 1 824 0
 629 0096 0020     		movs	r0, #0
 630              	.LVL75:
 631 0098 E0E7     		b	.L40
 632              	.L54:
 831:Middlewares/Third_Party/FatFs/src/ff.c **** 
 633              		.loc 1 831 0
 634 009a 0020     		movs	r0, #0
 635 009c DEE7     		b	.L40
 636              	.L59:
 637 009e 00BF     		.align	2
 638              	.L58:
 639 00a0 00000000 		.word	.LANCHOR0
 640              		.cfi_endproc
ARM GAS  /tmp/ccqUXb8n.s 			page 27


 641              	.LFE153:
 643              		.section	.text.dec_lock,"ax",%progbits
 644              		.align	1
 645              		.syntax unified
 646              		.thumb
 647              		.thumb_func
 648              		.fpu fpv5-sp-d16
 650              	dec_lock:
 651              	.LFB154:
 837:Middlewares/Third_Party/FatFs/src/ff.c **** 
 838:Middlewares/Third_Party/FatFs/src/ff.c **** 
 839:Middlewares/Third_Party/FatFs/src/ff.c **** static
 840:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT dec_lock (	/* Decrement object open counter */
 841:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i			/* Semaphore index (1..) */
 842:Middlewares/Third_Party/FatFs/src/ff.c **** )
 843:Middlewares/Third_Party/FatFs/src/ff.c **** {
 652              		.loc 1 843 0
 653              		.cfi_startproc
 654              		@ args = 0, pretend = 0, frame = 0
 655              		@ frame_needed = 0, uses_anonymous_args = 0
 656              		@ link register save eliminated.
 657              	.LVL76:
 844:Middlewares/Third_Party/FatFs/src/ff.c **** 	WORD n;
 845:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 846:Middlewares/Third_Party/FatFs/src/ff.c **** 
 847:Middlewares/Third_Party/FatFs/src/ff.c **** 
 848:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 658              		.loc 1 848 0
 659 0000 0138     		subs	r0, r0, #1
 660              	.LVL77:
 661 0002 0128     		cmp	r0, #1
 662 0004 15D8     		bhi	.L63
 849:Middlewares/Third_Party/FatFs/src/ff.c **** 		n = Files[i].ctr;
 663              		.loc 1 849 0
 664 0006 0D4B     		ldr	r3, .L66
 665 0008 03EB0013 		add	r3, r3, r0, lsl #4
 666 000c 9B89     		ldrh	r3, [r3, #12]
 667              	.LVL78:
 850:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 668              		.loc 1 850 0
 669 000e B3F5807F 		cmp	r3, #256
 670 0012 03D0     		beq	.L64
 851:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (n > 0) n--;				/* Decrement read mode open count */
 671              		.loc 1 851 0
 672 0014 1BB1     		cbz	r3, .L62
 673              		.loc 1 851 0 is_stmt 0 discriminator 1
 674 0016 013B     		subs	r3, r3, #1
 675              	.LVL79:
 676 0018 9BB2     		uxth	r3, r3
 677              	.LVL80:
 678 001a 00E0     		b	.L62
 679              	.L64:
 850:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 680              		.loc 1 850 0 is_stmt 1
 681 001c 0023     		movs	r3, #0
 682              	.LVL81:
 683              	.L62:
ARM GAS  /tmp/ccqUXb8n.s 			page 28


 852:Middlewares/Third_Party/FatFs/src/ff.c **** 		Files[i].ctr = n;
 684              		.loc 1 852 0
 685 001e 074A     		ldr	r2, .L66
 686 0020 02EB0012 		add	r2, r2, r0, lsl #4
 687 0024 9381     		strh	r3, [r2, #12]	@ movhi
 853:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 688              		.loc 1 853 0
 689 0026 33B9     		cbnz	r3, .L65
 690              		.loc 1 853 0 is_stmt 0 discriminator 1
 691 0028 0301     		lsls	r3, r0, #4
 692              	.LVL82:
 693 002a 0020     		movs	r0, #0
 694              	.LVL83:
 695 002c 034A     		ldr	r2, .L66
 696              	.LVL84:
 697 002e D050     		str	r0, [r2, r3]
 698 0030 7047     		bx	lr
 699              	.LVL85:
 700              	.L63:
 854:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = FR_OK;
 855:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else {
 856:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = FR_INT_ERR;			/* Invalid index nunber */
 701              		.loc 1 856 0 is_stmt 1
 702 0032 0220     		movs	r0, #2
 703              	.LVL86:
 704 0034 7047     		bx	lr
 705              	.LVL87:
 706              	.L65:
 854:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = FR_OK;
 707              		.loc 1 854 0
 708 0036 0020     		movs	r0, #0
 709              	.LVL88:
 857:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 858:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
 859:Middlewares/Third_Party/FatFs/src/ff.c **** }
 710              		.loc 1 859 0
 711 0038 7047     		bx	lr
 712              	.L67:
 713 003a 00BF     		.align	2
 714              	.L66:
 715 003c 00000000 		.word	.LANCHOR0
 716              		.cfi_endproc
 717              	.LFE154:
 719              		.section	.text.clear_lock,"ax",%progbits
 720              		.align	1
 721              		.syntax unified
 722              		.thumb
 723              		.thumb_func
 724              		.fpu fpv5-sp-d16
 726              	clear_lock:
 727              	.LFB155:
 860:Middlewares/Third_Party/FatFs/src/ff.c **** 
 861:Middlewares/Third_Party/FatFs/src/ff.c **** 
 862:Middlewares/Third_Party/FatFs/src/ff.c **** static
 863:Middlewares/Third_Party/FatFs/src/ff.c **** void clear_lock (	/* Clear lock entries of the volume */
 864:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs
 865:Middlewares/Third_Party/FatFs/src/ff.c **** )
ARM GAS  /tmp/ccqUXb8n.s 			page 29


 866:Middlewares/Third_Party/FatFs/src/ff.c **** {
 728              		.loc 1 866 0
 729              		.cfi_startproc
 730              		@ args = 0, pretend = 0, frame = 0
 731              		@ frame_needed = 0, uses_anonymous_args = 0
 732              		@ link register save eliminated.
 733              	.LVL89:
 867:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i;
 868:Middlewares/Third_Party/FatFs/src/ff.c **** 
 869:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (i = 0; i < _FS_LOCK; i++) {
 734              		.loc 1 869 0
 735 0000 0023     		movs	r3, #0
 736 0002 03E0     		b	.L73
 737              	.LVL90:
 738              	.L80:
 739              	.LCFI8:
 740              		.cfi_def_cfa_offset 4
 741              		.cfi_offset 4, -4
 870:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 871:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 872:Middlewares/Third_Party/FatFs/src/ff.c **** }
 742              		.loc 1 872 0
 743 0004 5DF8044B 		ldr	r4, [sp], #4
 744              	.LCFI9:
 745              		.cfi_restore 4
 746              		.cfi_def_cfa_offset 0
 747 0008 7047     		bx	lr
 748              	.L79:
 869:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 749              		.loc 1 869 0
 750 000a 0133     		adds	r3, r3, #1
 751              	.LVL91:
 752              	.L73:
 753 000c 012B     		cmp	r3, #1
 754 000e 11D8     		bhi	.L78
 870:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 755              		.loc 1 870 0
 756 0010 1A01     		lsls	r2, r3, #4
 757 0012 0949     		ldr	r1, .L81
 758 0014 8A58     		ldr	r2, [r1, r2]
 759 0016 8242     		cmp	r2, r0
 760 0018 F7D1     		bne	.L79
 866:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i;
 761              		.loc 1 866 0
 762 001a 10B4     		push	{r4}
 763              	.LCFI10:
 764              		.cfi_def_cfa_offset 4
 765              		.cfi_offset 4, -4
 766              	.L74:
 870:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 767              		.loc 1 870 0 discriminator 1
 768 001c 1A01     		lsls	r2, r3, #4
 769 001e 0024     		movs	r4, #0
 770 0020 8C50     		str	r4, [r1, r2]
 771              	.L70:
 869:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 772              		.loc 1 869 0 discriminator 2
ARM GAS  /tmp/ccqUXb8n.s 			page 30


 773 0022 0133     		adds	r3, r3, #1
 774              	.LVL92:
 775 0024 012B     		cmp	r3, #1
 776 0026 EDD8     		bhi	.L80
 870:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 777              		.loc 1 870 0
 778 0028 1A01     		lsls	r2, r3, #4
 779 002a 0349     		ldr	r1, .L81
 780 002c 8A58     		ldr	r2, [r1, r2]
 781 002e 8242     		cmp	r2, r0
 782 0030 F7D1     		bne	.L70
 783 0032 F3E7     		b	.L74
 784              	.L78:
 785              	.LCFI11:
 786              		.cfi_def_cfa_offset 0
 787              		.cfi_restore 4
 788 0034 7047     		bx	lr
 789              	.L82:
 790 0036 00BF     		.align	2
 791              	.L81:
 792 0038 00000000 		.word	.LANCHOR0
 793              		.cfi_endproc
 794              	.LFE155:
 796              		.section	.text.clust2sect,"ax",%progbits
 797              		.align	1
 798              		.syntax unified
 799              		.thumb
 800              		.thumb_func
 801              		.fpu fpv5-sp-d16
 803              	clust2sect:
 804              	.LFB159:
 873:Middlewares/Third_Party/FatFs/src/ff.c **** 
 874:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* _FS_LOCK != 0 */
 875:Middlewares/Third_Party/FatFs/src/ff.c **** 
 876:Middlewares/Third_Party/FatFs/src/ff.c **** 
 877:Middlewares/Third_Party/FatFs/src/ff.c **** 
 878:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 879:Middlewares/Third_Party/FatFs/src/ff.c **** /* Move/Flush disk access window in the file system object               */
 880:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 881:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
 882:Middlewares/Third_Party/FatFs/src/ff.c **** static
 883:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 884:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS* fs			/* File system object */
 885:Middlewares/Third_Party/FatFs/src/ff.c **** )
 886:Middlewares/Third_Party/FatFs/src/ff.c **** {
 887:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD wsect;
 888:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT nf;
 889:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res = FR_OK;
 890:Middlewares/Third_Party/FatFs/src/ff.c **** 
 891:Middlewares/Third_Party/FatFs/src/ff.c **** 
 892:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->wflag) {	/* Write back the sector if it is dirty */
 893:Middlewares/Third_Party/FatFs/src/ff.c **** 		wsect = fs->winsect;	/* Current sector number */
 894:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 895:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = FR_DISK_ERR;
 896:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
 897:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 0;
 898:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
ARM GAS  /tmp/ccqUXb8n.s 			page 31


 899:Middlewares/Third_Party/FatFs/src/ff.c **** 				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 900:Middlewares/Third_Party/FatFs/src/ff.c **** 					wsect += fs->fsize;
 901:Middlewares/Third_Party/FatFs/src/ff.c **** 					disk_write(fs->drv, fs->win, wsect, 1);
 902:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 903:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 904:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 905:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 906:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
 907:Middlewares/Third_Party/FatFs/src/ff.c **** }
 908:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 909:Middlewares/Third_Party/FatFs/src/ff.c **** 
 910:Middlewares/Third_Party/FatFs/src/ff.c **** 
 911:Middlewares/Third_Party/FatFs/src/ff.c **** static
 912:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 913:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS* fs,			/* File system object */
 914:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD sector		/* Sector number to make appearance in the fs->win[] */
 915:Middlewares/Third_Party/FatFs/src/ff.c **** )
 916:Middlewares/Third_Party/FatFs/src/ff.c **** {
 917:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res = FR_OK;
 918:Middlewares/Third_Party/FatFs/src/ff.c **** 
 919:Middlewares/Third_Party/FatFs/src/ff.c **** 
 920:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (sector != fs->winsect) {	/* Window offset changed? */
 921:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
 922:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = sync_window(fs);		/* Write-back changes */
 923:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 924:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {			/* Fill sector window with new data */
 925:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 926:Middlewares/Third_Party/FatFs/src/ff.c **** 				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 927:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_DISK_ERR;
 928:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 929:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->winsect = sector;
 930:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 931:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 932:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
 933:Middlewares/Third_Party/FatFs/src/ff.c **** }
 934:Middlewares/Third_Party/FatFs/src/ff.c **** 
 935:Middlewares/Third_Party/FatFs/src/ff.c **** 
 936:Middlewares/Third_Party/FatFs/src/ff.c **** 
 937:Middlewares/Third_Party/FatFs/src/ff.c **** 
 938:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
 939:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 940:Middlewares/Third_Party/FatFs/src/ff.c **** /* Synchronize file system and strage device                             */
 941:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 942:Middlewares/Third_Party/FatFs/src/ff.c **** 
 943:Middlewares/Third_Party/FatFs/src/ff.c **** static
 944:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
 945:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS* fs		/* File system object */
 946:Middlewares/Third_Party/FatFs/src/ff.c **** )
 947:Middlewares/Third_Party/FatFs/src/ff.c **** {
 948:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 949:Middlewares/Third_Party/FatFs/src/ff.c **** 
 950:Middlewares/Third_Party/FatFs/src/ff.c **** 
 951:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = sync_window(fs);
 952:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 953:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Update FSInfo sector if needed */
 954:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 955:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Create FSInfo structure */
ARM GAS  /tmp/ccqUXb8n.s 			page 32


 956:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_set(fs->win, 0, SS(fs));
 957:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(fs->win + BS_55AA, 0xAA55);
 958:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 959:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 960:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 961:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 962:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Write it into the FSInfo sector */
 963:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->winsect = fs->volbase + 1;
 964:Middlewares/Third_Party/FatFs/src/ff.c **** 			disk_write(fs->drv, fs->win, fs->winsect, 1);
 965:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->fsi_flag = 0;
 966:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 967:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Make sure that no pending write process in the physical drive */
 968:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 969:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 970:Middlewares/Third_Party/FatFs/src/ff.c **** 
 971:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
 972:Middlewares/Third_Party/FatFs/src/ff.c **** }
 973:Middlewares/Third_Party/FatFs/src/ff.c **** 
 974:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 975:Middlewares/Third_Party/FatFs/src/ff.c **** 
 976:Middlewares/Third_Party/FatFs/src/ff.c **** 
 977:Middlewares/Third_Party/FatFs/src/ff.c **** 
 978:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 979:Middlewares/Third_Party/FatFs/src/ff.c **** /* Get sector# from cluster#                                             */
 980:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 981:Middlewares/Third_Party/FatFs/src/ff.c **** 
 982:Middlewares/Third_Party/FatFs/src/ff.c **** static
 983:Middlewares/Third_Party/FatFs/src/ff.c **** DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
 984:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS* fs,		/* File system object */
 985:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD clst		/* Cluster# to be converted */
 986:Middlewares/Third_Party/FatFs/src/ff.c **** )
 987:Middlewares/Third_Party/FatFs/src/ff.c **** {
 805              		.loc 1 987 0
 806              		.cfi_startproc
 807              		@ args = 0, pretend = 0, frame = 0
 808              		@ frame_needed = 0, uses_anonymous_args = 0
 809              		@ link register save eliminated.
 810              	.LVL93:
 988:Middlewares/Third_Party/FatFs/src/ff.c **** 	clst -= 2;
 811              		.loc 1 988 0
 812 0000 0239     		subs	r1, r1, #2
 813              	.LVL94:
 989:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 814              		.loc 1 989 0
 815 0002 8369     		ldr	r3, [r0, #24]
 816 0004 023B     		subs	r3, r3, #2
 817 0006 8B42     		cmp	r3, r1
 818 0008 04D9     		bls	.L85
 990:Middlewares/Third_Party/FatFs/src/ff.c **** 	return clst * fs->csize + fs->database;
 819              		.loc 1 990 0
 820 000a 4389     		ldrh	r3, [r0, #10]
 821 000c C06A     		ldr	r0, [r0, #44]
 822              	.LVL95:
 823 000e 01FB0300 		mla	r0, r1, r3, r0
 824 0012 7047     		bx	lr
 825              	.LVL96:
 826              	.L85:
ARM GAS  /tmp/ccqUXb8n.s 			page 33


 989:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 827              		.loc 1 989 0
 828 0014 0020     		movs	r0, #0
 829              	.LVL97:
 991:Middlewares/Third_Party/FatFs/src/ff.c **** }
 830              		.loc 1 991 0
 831 0016 7047     		bx	lr
 832              		.cfi_endproc
 833              	.LFE159:
 835              		.section	.text.clmt_clust,"ax",%progbits
 836              		.align	1
 837              		.syntax unified
 838              		.thumb
 839              		.thumb_func
 840              		.fpu fpv5-sp-d16
 842              	clmt_clust:
 843              	.LFB164:
 992:Middlewares/Third_Party/FatFs/src/ff.c **** 
 993:Middlewares/Third_Party/FatFs/src/ff.c **** 
 994:Middlewares/Third_Party/FatFs/src/ff.c **** 
 995:Middlewares/Third_Party/FatFs/src/ff.c **** 
 996:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 997:Middlewares/Third_Party/FatFs/src/ff.c **** /* FAT access - Read value of a FAT entry                                */
 998:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 999:Middlewares/Third_Party/FatFs/src/ff.c **** 
1000:Middlewares/Third_Party/FatFs/src/ff.c **** static
1001:Middlewares/Third_Party/FatFs/src/ff.c **** DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
1002:Middlewares/Third_Party/FatFs/src/ff.c **** 	_FDID* obj,	/* Corresponding object */
1003:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD clst	/* Cluster number to get the value */
1004:Middlewares/Third_Party/FatFs/src/ff.c **** )
1005:Middlewares/Third_Party/FatFs/src/ff.c **** {
1006:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT wc, bc;
1007:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD val;
1008:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs = obj->fs;
1009:Middlewares/Third_Party/FatFs/src/ff.c **** 
1010:Middlewares/Third_Party/FatFs/src/ff.c **** 
1011:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
1012:Middlewares/Third_Party/FatFs/src/ff.c **** 		val = 1;	/* Internal error */
1013:Middlewares/Third_Party/FatFs/src/ff.c **** 
1014:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else {
1015:Middlewares/Third_Party/FatFs/src/ff.c **** 		val = 0xFFFFFFFF;	/* Default value falls on disk error */
1016:Middlewares/Third_Party/FatFs/src/ff.c **** 
1017:Middlewares/Third_Party/FatFs/src/ff.c **** 		switch (fs->fs_type) {
1018:Middlewares/Third_Party/FatFs/src/ff.c **** 		case FS_FAT12 :
1019:Middlewares/Third_Party/FatFs/src/ff.c **** 			bc = (UINT)clst; bc += bc / 2;
1020:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
1021:Middlewares/Third_Party/FatFs/src/ff.c **** 			wc = fs->win[bc++ % SS(fs)];
1022:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
1023:Middlewares/Third_Party/FatFs/src/ff.c **** 			wc |= fs->win[bc % SS(fs)] << 8;
1024:Middlewares/Third_Party/FatFs/src/ff.c **** 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
1025:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
1026:Middlewares/Third_Party/FatFs/src/ff.c **** 
1027:Middlewares/Third_Party/FatFs/src/ff.c **** 		case FS_FAT16 :
1028:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
1029:Middlewares/Third_Party/FatFs/src/ff.c **** 			val = ld_word(fs->win + clst * 2 % SS(fs));
1030:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
1031:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  /tmp/ccqUXb8n.s 			page 34


1032:Middlewares/Third_Party/FatFs/src/ff.c **** 		case FS_FAT32 :
1033:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
1034:Middlewares/Third_Party/FatFs/src/ff.c **** 			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
1035:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
1036:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
1037:Middlewares/Third_Party/FatFs/src/ff.c **** 		case FS_EXFAT :
1038:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (obj->objsize) {
1039:Middlewares/Third_Party/FatFs/src/ff.c **** 				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
1040:Middlewares/Third_Party/FatFs/src/ff.c **** 				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
1041:Middlewares/Third_Party/FatFs/src/ff.c **** 
1042:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
1043:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (cofs <= clen) {
1044:Middlewares/Third_Party/FatFs/src/ff.c **** 						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
1045:Middlewares/Third_Party/FatFs/src/ff.c **** 						break;
1046:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
1047:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
1048:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
1049:Middlewares/Third_Party/FatFs/src/ff.c **** 					val = clst + 1; 	/* Generate the value */
1050:Middlewares/Third_Party/FatFs/src/ff.c **** 					break;
1051:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
1052:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
1053:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
1054:Middlewares/Third_Party/FatFs/src/ff.c **** 						val = 0x7FFFFFFF;	/* Generate EOC */
1055:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else {
1056:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
1057:Middlewares/Third_Party/FatFs/src/ff.c **** 						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
1058:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
1059:Middlewares/Third_Party/FatFs/src/ff.c **** 					break;
1060:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
1061:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
1062:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* go to default */
1063:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1064:Middlewares/Third_Party/FatFs/src/ff.c **** 		default:
1065:Middlewares/Third_Party/FatFs/src/ff.c **** 			val = 1;	/* Internal error */
1066:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1067:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1068:Middlewares/Third_Party/FatFs/src/ff.c **** 
1069:Middlewares/Third_Party/FatFs/src/ff.c **** 	return val;
1070:Middlewares/Third_Party/FatFs/src/ff.c **** }
1071:Middlewares/Third_Party/FatFs/src/ff.c **** 
1072:Middlewares/Third_Party/FatFs/src/ff.c **** 
1073:Middlewares/Third_Party/FatFs/src/ff.c **** 
1074:Middlewares/Third_Party/FatFs/src/ff.c **** 
1075:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
1076:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1077:Middlewares/Third_Party/FatFs/src/ff.c **** /* FAT access - Change value of a FAT entry                              */
1078:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1079:Middlewares/Third_Party/FatFs/src/ff.c **** 
1080:Middlewares/Third_Party/FatFs/src/ff.c **** static
1081:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
1082:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS* fs,		/* Corresponding file system object */
1083:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD clst,		/* FAT index number (cluster number) to be changed */
1084:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD val		/* New value to be set to the entry */
1085:Middlewares/Third_Party/FatFs/src/ff.c **** )
1086:Middlewares/Third_Party/FatFs/src/ff.c **** {
1087:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT bc;
1088:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE *p;
ARM GAS  /tmp/ccqUXb8n.s 			page 35


1089:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res = FR_INT_ERR;
1090:Middlewares/Third_Party/FatFs/src/ff.c **** 
1091:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
1092:Middlewares/Third_Party/FatFs/src/ff.c **** 		switch (fs->fs_type) {
1093:Middlewares/Third_Party/FatFs/src/ff.c **** 		case FS_FAT12 :	/* Bitfield items */
1094:Middlewares/Third_Party/FatFs/src/ff.c **** 			bc = (UINT)clst; bc += bc / 2;
1095:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
1096:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
1097:Middlewares/Third_Party/FatFs/src/ff.c **** 			p = fs->win + bc++ % SS(fs);
1098:Middlewares/Third_Party/FatFs/src/ff.c **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
1099:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
1100:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
1101:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
1102:Middlewares/Third_Party/FatFs/src/ff.c **** 			p = fs->win + bc % SS(fs);
1103:Middlewares/Third_Party/FatFs/src/ff.c **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
1104:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
1105:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
1106:Middlewares/Third_Party/FatFs/src/ff.c **** 
1107:Middlewares/Third_Party/FatFs/src/ff.c **** 		case FS_FAT16 :	/* WORD aligned items */
1108:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
1109:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
1110:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
1111:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
1112:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
1113:Middlewares/Third_Party/FatFs/src/ff.c **** 
1114:Middlewares/Third_Party/FatFs/src/ff.c **** 		case FS_FAT32 :	/* DWORD aligned items */
1115:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
1116:Middlewares/Third_Party/FatFs/src/ff.c **** 		case FS_EXFAT :
1117:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1118:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
1119:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
1120:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
1121:Middlewares/Third_Party/FatFs/src/ff.c **** 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
1122:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
1123:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(fs->win + clst * 4 % SS(fs), val);
1124:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
1125:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
1126:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1127:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1128:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
1129:Middlewares/Third_Party/FatFs/src/ff.c **** }
1130:Middlewares/Third_Party/FatFs/src/ff.c **** 
1131:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* !_FS_READONLY */
1132:Middlewares/Third_Party/FatFs/src/ff.c **** 
1133:Middlewares/Third_Party/FatFs/src/ff.c **** 
1134:Middlewares/Third_Party/FatFs/src/ff.c **** 
1135:Middlewares/Third_Party/FatFs/src/ff.c **** 
1136:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT && !_FS_READONLY
1137:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1138:Middlewares/Third_Party/FatFs/src/ff.c **** /* exFAT: Accessing FAT and Allocation Bitmap                            */
1139:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1140:Middlewares/Third_Party/FatFs/src/ff.c **** 
1141:Middlewares/Third_Party/FatFs/src/ff.c **** /*--------------------------------------*/
1142:Middlewares/Third_Party/FatFs/src/ff.c **** /* Find a contiguous free cluster block */
1143:Middlewares/Third_Party/FatFs/src/ff.c **** /*--------------------------------------*/
1144:Middlewares/Third_Party/FatFs/src/ff.c **** 
1145:Middlewares/Third_Party/FatFs/src/ff.c **** static
ARM GAS  /tmp/ccqUXb8n.s 			page 36


1146:Middlewares/Third_Party/FatFs/src/ff.c **** DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
1147:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS* fs,	/* File system object */
1148:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD clst,	/* Cluster number to scan from */
1149:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD ncl	/* Number of contiguous clusters to find (1..) */
1150:Middlewares/Third_Party/FatFs/src/ff.c **** )
1151:Middlewares/Third_Party/FatFs/src/ff.c **** {
1152:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE bm, bv;
1153:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i;
1154:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD val, scl, ctr;
1155:Middlewares/Third_Party/FatFs/src/ff.c **** 
1156:Middlewares/Third_Party/FatFs/src/ff.c **** 
1157:Middlewares/Third_Party/FatFs/src/ff.c **** 	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
1158:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (clst >= fs->n_fatent - 2) clst = 0;
1159:Middlewares/Third_Party/FatFs/src/ff.c **** 	scl = val = clst; ctr = 0;
1160:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (;;) {
1161:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bi
1162:Middlewares/Third_Party/FatFs/src/ff.c **** 		i = val / 8 % SS(fs); bm = 1 << (val % 8);
1163:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
1164:Middlewares/Third_Party/FatFs/src/ff.c **** 			do {
1165:Middlewares/Third_Party/FatFs/src/ff.c **** 				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
1166:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
1167:Middlewares/Third_Party/FatFs/src/ff.c **** 					val = 0; bm = 0; i = SS(fs);
1168:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
1169:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (!bv) {	/* Is it a free cluster? */
1170:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
1171:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {
1172:Middlewares/Third_Party/FatFs/src/ff.c **** 					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
1173:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
1174:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (val == clst) return 0;	/* All cluster scanned? */
1175:Middlewares/Third_Party/FatFs/src/ff.c **** 			} while (bm);
1176:Middlewares/Third_Party/FatFs/src/ff.c **** 			bm = 1;
1177:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (++i < SS(fs));
1178:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1179:Middlewares/Third_Party/FatFs/src/ff.c **** }
1180:Middlewares/Third_Party/FatFs/src/ff.c **** 
1181:Middlewares/Third_Party/FatFs/src/ff.c **** 
1182:Middlewares/Third_Party/FatFs/src/ff.c **** /*----------------------------------------*/
1183:Middlewares/Third_Party/FatFs/src/ff.c **** /* Set/Clear a block of allocation bitmap */
1184:Middlewares/Third_Party/FatFs/src/ff.c **** /*----------------------------------------*/
1185:Middlewares/Third_Party/FatFs/src/ff.c **** 
1186:Middlewares/Third_Party/FatFs/src/ff.c **** static
1187:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT change_bitmap (
1188:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS* fs,	/* File system object */
1189:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD clst,	/* Cluster number to change from */
1190:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD ncl,	/* Number of clusters to be changed */
1191:Middlewares/Third_Party/FatFs/src/ff.c **** 	int bv		/* bit value to be set (0 or 1) */
1192:Middlewares/Third_Party/FatFs/src/ff.c **** )
1193:Middlewares/Third_Party/FatFs/src/ff.c **** {
1194:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE bm;
1195:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i;
1196:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD sect;
1197:Middlewares/Third_Party/FatFs/src/ff.c **** 
1198:Middlewares/Third_Party/FatFs/src/ff.c **** 	clst -= 2;	/* The first bit corresponds to cluster #2 */
1199:Middlewares/Third_Party/FatFs/src/ff.c **** 	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the 
1200:Middlewares/Third_Party/FatFs/src/ff.c **** 	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
1201:Middlewares/Third_Party/FatFs/src/ff.c **** 	bm = 1 << (clst % 8);						/* Bit mask in the byte */
1202:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (;;) {
ARM GAS  /tmp/ccqUXb8n.s 			page 37


1203:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
1204:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
1205:Middlewares/Third_Party/FatFs/src/ff.c **** 			do {
1206:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
1207:Middlewares/Third_Party/FatFs/src/ff.c **** 				fs->win[i] ^= bm;	/* Flip the bit */
1208:Middlewares/Third_Party/FatFs/src/ff.c **** 				fs->wflag = 1;
1209:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (--ncl == 0) return FR_OK;	/* All bits processed? */
1210:Middlewares/Third_Party/FatFs/src/ff.c **** 			} while (bm <<= 1);		/* Next bit */
1211:Middlewares/Third_Party/FatFs/src/ff.c **** 			bm = 1;
1212:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (++i < SS(fs));		/* Next byte */
1213:Middlewares/Third_Party/FatFs/src/ff.c **** 		i = 0;
1214:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1215:Middlewares/Third_Party/FatFs/src/ff.c **** }
1216:Middlewares/Third_Party/FatFs/src/ff.c **** 
1217:Middlewares/Third_Party/FatFs/src/ff.c **** 
1218:Middlewares/Third_Party/FatFs/src/ff.c **** /*---------------------------------------------*/
1219:Middlewares/Third_Party/FatFs/src/ff.c **** /* Fill the first fragment of the FAT chain    */
1220:Middlewares/Third_Party/FatFs/src/ff.c **** /*---------------------------------------------*/
1221:Middlewares/Third_Party/FatFs/src/ff.c **** 
1222:Middlewares/Third_Party/FatFs/src/ff.c **** static
1223:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT fill_first_frag (
1224:Middlewares/Third_Party/FatFs/src/ff.c **** 	_FDID* obj	/* Pointer to the corresponding object */
1225:Middlewares/Third_Party/FatFs/src/ff.c **** )
1226:Middlewares/Third_Party/FatFs/src/ff.c **** {
1227:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
1228:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD cl, n;
1229:Middlewares/Third_Party/FatFs/src/ff.c **** 
1230:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
1231:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
1232:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = put_fat(obj->fs, cl, cl + 1);
1233:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) return res;
1234:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1235:Middlewares/Third_Party/FatFs/src/ff.c **** 		obj->stat = 0;	/* Change status 'FAT chain is valid' */
1236:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1237:Middlewares/Third_Party/FatFs/src/ff.c **** 	return FR_OK;
1238:Middlewares/Third_Party/FatFs/src/ff.c **** }
1239:Middlewares/Third_Party/FatFs/src/ff.c **** 
1240:Middlewares/Third_Party/FatFs/src/ff.c **** 
1241:Middlewares/Third_Party/FatFs/src/ff.c **** /*---------------------------------------------*/
1242:Middlewares/Third_Party/FatFs/src/ff.c **** /* Fill the last fragment of the FAT chain     */
1243:Middlewares/Third_Party/FatFs/src/ff.c **** /*---------------------------------------------*/
1244:Middlewares/Third_Party/FatFs/src/ff.c **** 
1245:Middlewares/Third_Party/FatFs/src/ff.c **** static
1246:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT fill_last_frag (
1247:Middlewares/Third_Party/FatFs/src/ff.c **** 	_FDID* obj,	/* Pointer to the corresponding object */
1248:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD lcl,	/* Last cluster of the fragment */
1249:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD term	/* Value to set the last FAT entry */
1250:Middlewares/Third_Party/FatFs/src/ff.c **** )
1251:Middlewares/Third_Party/FatFs/src/ff.c **** {
1252:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
1253:Middlewares/Third_Party/FatFs/src/ff.c **** 
1254:Middlewares/Third_Party/FatFs/src/ff.c **** 	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
1255:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
1256:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) return res;
1257:Middlewares/Third_Party/FatFs/src/ff.c **** 		obj->n_frag--;
1258:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1259:Middlewares/Third_Party/FatFs/src/ff.c **** 	return FR_OK;
ARM GAS  /tmp/ccqUXb8n.s 			page 38


1260:Middlewares/Third_Party/FatFs/src/ff.c **** }
1261:Middlewares/Third_Party/FatFs/src/ff.c **** 
1262:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* _FS_EXFAT && !_FS_READONLY */
1263:Middlewares/Third_Party/FatFs/src/ff.c **** 
1264:Middlewares/Third_Party/FatFs/src/ff.c **** 
1265:Middlewares/Third_Party/FatFs/src/ff.c **** 
1266:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
1267:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1268:Middlewares/Third_Party/FatFs/src/ff.c **** /* FAT handling - Remove a cluster chain                                 */
1269:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1270:Middlewares/Third_Party/FatFs/src/ff.c **** static
1271:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
1272:Middlewares/Third_Party/FatFs/src/ff.c **** 	_FDID* obj,			/* Corresponding object */
1273:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD clst,			/* Cluster to remove a chain from */
1274:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
1275:Middlewares/Third_Party/FatFs/src/ff.c **** )
1276:Middlewares/Third_Party/FatFs/src/ff.c **** {
1277:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res = FR_OK;
1278:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD nxt;
1279:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs = obj->fs;
1280:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT || _USE_TRIM
1281:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD scl = clst, ecl = clst;
1282:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1283:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_TRIM
1284:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD rt[2];
1285:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1286:Middlewares/Third_Party/FatFs/src/ff.c **** 
1287:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
1288:Middlewares/Third_Party/FatFs/src/ff.c **** 
1289:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Mark the previous cluster 'EOC' on the FAT if it exists */
1290:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
1291:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = put_fat(fs, pclst, 0xFFFFFFFF);
1292:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) return res;
1293:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1294:Middlewares/Third_Party/FatFs/src/ff.c **** 
1295:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Remove the chain */
1296:Middlewares/Third_Party/FatFs/src/ff.c **** 	do {
1297:Middlewares/Third_Party/FatFs/src/ff.c **** 		nxt = get_fat(obj, clst);			/* Get cluster status */
1298:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nxt == 0) break;				/* Empty cluster? */
1299:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
1300:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
1301:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
1302:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
1303:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) return res;
1304:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1305:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
1306:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->free_clst++;
1307:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->fsi_flag |= 1;
1308:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1309:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT || _USE_TRIM
1310:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
1311:Middlewares/Third_Party/FatFs/src/ff.c **** 			ecl = nxt;
1312:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {				/* End of contiguous cluster block */
1313:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
1314:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
1315:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap 
1316:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res != FR_OK) return res;
ARM GAS  /tmp/ccqUXb8n.s 			page 39


1317:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
1318:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1319:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_TRIM
1320:Middlewares/Third_Party/FatFs/src/ff.c **** 			rt[0] = clust2sect(fs, scl);					/* Start sector */
1321:Middlewares/Third_Party/FatFs/src/ff.c **** 			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
1322:Middlewares/Third_Party/FatFs/src/ff.c **** 			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
1323:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1324:Middlewares/Third_Party/FatFs/src/ff.c **** 			scl = ecl = nxt;
1325:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1326:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1327:Middlewares/Third_Party/FatFs/src/ff.c **** 		clst = nxt;					/* Next cluster */
1328:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
1329:Middlewares/Third_Party/FatFs/src/ff.c **** 
1330:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
1331:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {
1332:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (pclst == 0) {	/* Does the object have no chain? */
1333:Middlewares/Third_Party/FatFs/src/ff.c **** 			obj->stat = 0;		/* Change the object status 'initial' */
1334:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
1335:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the c
1336:Middlewares/Third_Party/FatFs/src/ff.c **** 				obj->stat = 2;	/* Change the object status 'contiguous' */
1337:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
1338:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1339:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1340:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1341:Middlewares/Third_Party/FatFs/src/ff.c **** 	return FR_OK;
1342:Middlewares/Third_Party/FatFs/src/ff.c **** }
1343:Middlewares/Third_Party/FatFs/src/ff.c **** 
1344:Middlewares/Third_Party/FatFs/src/ff.c **** 
1345:Middlewares/Third_Party/FatFs/src/ff.c **** 
1346:Middlewares/Third_Party/FatFs/src/ff.c **** 
1347:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1348:Middlewares/Third_Party/FatFs/src/ff.c **** /* FAT handling - Stretch a chain or Create a new chain                  */
1349:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1350:Middlewares/Third_Party/FatFs/src/ff.c **** static
1351:Middlewares/Third_Party/FatFs/src/ff.c **** DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster
1352:Middlewares/Third_Party/FatFs/src/ff.c **** 	_FDID* obj,			/* Corresponding object */
1353:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
1354:Middlewares/Third_Party/FatFs/src/ff.c **** )
1355:Middlewares/Third_Party/FatFs/src/ff.c **** {
1356:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD cs, ncl, scl;
1357:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
1358:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs = obj->fs;
1359:Middlewares/Third_Party/FatFs/src/ff.c **** 
1360:Middlewares/Third_Party/FatFs/src/ff.c **** 
1361:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (clst == 0) {	/* Create a new chain */
1362:Middlewares/Third_Party/FatFs/src/ff.c **** 		scl = fs->last_clst;				/* Get suggested cluster to start from */
1363:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
1364:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1365:Middlewares/Third_Party/FatFs/src/ff.c **** 	else {				/* Stretch current chain */
1366:Middlewares/Third_Party/FatFs/src/ff.c **** 		cs = get_fat(obj, clst);			/* Check the cluster status */
1367:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (cs < 2) return 1;				/* Invalid FAT value */
1368:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
1369:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
1370:Middlewares/Third_Party/FatFs/src/ff.c **** 		scl = clst;
1371:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1372:Middlewares/Third_Party/FatFs/src/ff.c **** 
1373:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
ARM GAS  /tmp/ccqUXb8n.s 			page 40


1374:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
1375:Middlewares/Third_Party/FatFs/src/ff.c **** 		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
1376:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
1377:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
1378:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_INT_ERR) return 1;
1379:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
1380:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (clst == 0) {							/* Is it a new chain? */
1381:Middlewares/Third_Party/FatFs/src/ff.c **** 			obj->stat = 2;							/* Set status 'contiguous' */
1382:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {									/* It is a stretched chain */
1383:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
1384:Middlewares/Third_Party/FatFs/src/ff.c **** 				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
1385:Middlewares/Third_Party/FatFs/src/ff.c **** 				obj->stat = 3;						/* Change status 'just fragmented' */
1386:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
1387:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1388:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (obj->stat != 2) {	/* Is the file non-contiguous? */
1389:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
1390:Middlewares/Third_Party/FatFs/src/ff.c **** 				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
1391:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {				/* New fragment */
1392:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (obj->n_frag == 0) obj->n_frag = 1;
1393:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one *
1394:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK) obj->n_frag = 1;
1395:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
1396:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1397:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else
1398:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1399:Middlewares/Third_Party/FatFs/src/ff.c **** 	{	/* On the FAT12/16/32 volume */
1400:Middlewares/Third_Party/FatFs/src/ff.c **** 		ncl = scl;	/* Start cluster */
1401:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (;;) {
1402:Middlewares/Third_Party/FatFs/src/ff.c **** 			ncl++;							/* Next cluster */
1403:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
1404:Middlewares/Third_Party/FatFs/src/ff.c **** 				ncl = 2;
1405:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (ncl > scl) return 0;	/* No free cluster */
1406:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
1407:Middlewares/Third_Party/FatFs/src/ff.c **** 			cs = get_fat(obj, ncl);			/* Get the cluster status */
1408:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (cs == 0) break;				/* Found a free cluster */
1409:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
1410:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ncl == scl) return 0;		/* No free cluster */
1411:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1412:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
1413:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK && clst != 0) {
1414:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
1415:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1416:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1417:Middlewares/Third_Party/FatFs/src/ff.c **** 
1418:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
1419:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->last_clst = ncl;
1420:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
1421:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->fsi_flag |= 1;
1422:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else {
1423:Middlewares/Third_Party/FatFs/src/ff.c **** 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
1424:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1425:Middlewares/Third_Party/FatFs/src/ff.c **** 
1426:Middlewares/Third_Party/FatFs/src/ff.c **** 	return ncl;		/* Return new cluster number or error status */
1427:Middlewares/Third_Party/FatFs/src/ff.c **** }
1428:Middlewares/Third_Party/FatFs/src/ff.c **** 
1429:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* !_FS_READONLY */
1430:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  /tmp/ccqUXb8n.s 			page 41


1431:Middlewares/Third_Party/FatFs/src/ff.c **** 
1432:Middlewares/Third_Party/FatFs/src/ff.c **** 
1433:Middlewares/Third_Party/FatFs/src/ff.c **** 
1434:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_FASTSEEK
1435:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1436:Middlewares/Third_Party/FatFs/src/ff.c **** /* FAT handling - Convert offset into cluster with link map table        */
1437:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1438:Middlewares/Third_Party/FatFs/src/ff.c **** 
1439:Middlewares/Third_Party/FatFs/src/ff.c **** static
1440:Middlewares/Third_Party/FatFs/src/ff.c **** DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
1441:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp,		/* Pointer to the file object */
1442:Middlewares/Third_Party/FatFs/src/ff.c **** 	FSIZE_t ofs		/* File offset to be converted to cluster# */
1443:Middlewares/Third_Party/FatFs/src/ff.c **** )
1444:Middlewares/Third_Party/FatFs/src/ff.c **** {
 844              		.loc 1 1444 0
 845              		.cfi_startproc
 846              		@ args = 0, pretend = 0, frame = 0
 847              		@ frame_needed = 0, uses_anonymous_args = 0
 848              		@ link register save eliminated.
 849              	.LVL98:
1445:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD cl, ncl, *tbl;
1446:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs = fp->obj.fs;
 850              		.loc 1 1446 0
 851 0000 0268     		ldr	r2, [r0]
 852              	.LVL99:
1447:Middlewares/Third_Party/FatFs/src/ff.c **** 
1448:Middlewares/Third_Party/FatFs/src/ff.c **** 
1449:Middlewares/Third_Party/FatFs/src/ff.c **** 	tbl = fp->cltbl + 1;	/* Top of CLMT */
 853              		.loc 1 1449 0
 854 0002 C36A     		ldr	r3, [r0, #44]
 855 0004 0433     		adds	r3, r3, #4
 856              	.LVL100:
1450:Middlewares/Third_Party/FatFs/src/ff.c **** 	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 857              		.loc 1 1450 0
 858 0006 490A     		lsrs	r1, r1, #9
 859              	.LVL101:
 860 0008 5289     		ldrh	r2, [r2, #10]
 861              	.LVL102:
 862 000a B1FBF2F1 		udiv	r1, r1, r2
 863              	.LVL103:
 864              	.L89:
1451:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (;;) {
1452:Middlewares/Third_Party/FatFs/src/ff.c **** 		ncl = *tbl++;			/* Number of cluters in the fragment */
 865              		.loc 1 1452 0
 866 000e 1868     		ldr	r0, [r3]
 867              	.LVL104:
1453:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ncl == 0) return 0;	/* End of table? (error) */
 868              		.loc 1 1453 0
 869 0010 30B1     		cbz	r0, .L86
1454:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (cl < ncl) break;	/* In this fragment? */
 870              		.loc 1 1454 0
 871 0012 8142     		cmp	r1, r0
 872 0014 02D3     		bcc	.L88
1455:Middlewares/Third_Party/FatFs/src/ff.c **** 		cl -= ncl; tbl++;		/* Next fragment */
 873              		.loc 1 1455 0
 874 0016 091A     		subs	r1, r1, r0
 875              	.LVL105:
ARM GAS  /tmp/ccqUXb8n.s 			page 42


 876 0018 0833     		adds	r3, r3, #8
 877              	.LVL106:
1452:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ncl == 0) return 0;	/* End of table? (error) */
 878              		.loc 1 1452 0
 879 001a F8E7     		b	.L89
 880              	.LVL107:
 881              	.L88:
1456:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1457:Middlewares/Third_Party/FatFs/src/ff.c **** 	return cl + *tbl;	/* Return the cluster number */
 882              		.loc 1 1457 0
 883 001c 5868     		ldr	r0, [r3, #4]
 884              	.LVL108:
 885 001e 0844     		add	r0, r0, r1
 886              	.L86:
1458:Middlewares/Third_Party/FatFs/src/ff.c **** }
 887              		.loc 1 1458 0
 888 0020 7047     		bx	lr
 889              		.cfi_endproc
 890              	.LFE164:
 892              		.section	.text.ld_clust,"ax",%progbits
 893              		.align	1
 894              		.syntax unified
 895              		.thumb
 896              		.thumb_func
 897              		.fpu fpv5-sp-d16
 899              	ld_clust:
 900              	.LFB168:
1459:Middlewares/Third_Party/FatFs/src/ff.c **** 
1460:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* _USE_FASTSEEK */
1461:Middlewares/Third_Party/FatFs/src/ff.c **** 
1462:Middlewares/Third_Party/FatFs/src/ff.c **** 
1463:Middlewares/Third_Party/FatFs/src/ff.c **** 
1464:Middlewares/Third_Party/FatFs/src/ff.c **** 
1465:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1466:Middlewares/Third_Party/FatFs/src/ff.c **** /* Directory handling - Set directory index                              */
1467:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1468:Middlewares/Third_Party/FatFs/src/ff.c **** 
1469:Middlewares/Third_Party/FatFs/src/ff.c **** static
1470:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
1471:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp,		/* Pointer to directory object */
1472:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD ofs		/* Offset of directory table */
1473:Middlewares/Third_Party/FatFs/src/ff.c **** )
1474:Middlewares/Third_Party/FatFs/src/ff.c **** {
1475:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD csz, clst;
1476:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs = dp->obj.fs;
1477:Middlewares/Third_Party/FatFs/src/ff.c **** 
1478:Middlewares/Third_Party/FatFs/src/ff.c **** 
1479:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE)
1480:Middlewares/Third_Party/FatFs/src/ff.c **** 		return FR_INT_ERR;
1481:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1482:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->dptr = ofs;				/* Set current offset */
1483:Middlewares/Third_Party/FatFs/src/ff.c **** 	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
1484:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
1485:Middlewares/Third_Party/FatFs/src/ff.c **** 		clst = fs->dirbase;
1486:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
1487:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1488:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  /tmp/ccqUXb8n.s 			page 43


1489:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
1490:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
1491:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->sect = fs->dirbase;
1492:Middlewares/Third_Party/FatFs/src/ff.c **** 
1493:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
1494:Middlewares/Third_Party/FatFs/src/ff.c **** 		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
1495:Middlewares/Third_Party/FatFs/src/ff.c **** 		while (ofs >= csz) {				/* Follow cluster chain */
1496:Middlewares/Third_Party/FatFs/src/ff.c **** 			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
1497:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1498:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal 
1499:Middlewares/Third_Party/FatFs/src/ff.c **** 			ofs -= csz;
1500:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1501:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->sect = clust2sect(fs, clst);
1502:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1503:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->clust = clst;					/* Current cluster# */
1504:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!dp->sect) return FR_INT_ERR;
1505:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
1506:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
1507:Middlewares/Third_Party/FatFs/src/ff.c **** 
1508:Middlewares/Third_Party/FatFs/src/ff.c **** 	return FR_OK;
1509:Middlewares/Third_Party/FatFs/src/ff.c **** }
1510:Middlewares/Third_Party/FatFs/src/ff.c **** 
1511:Middlewares/Third_Party/FatFs/src/ff.c **** 
1512:Middlewares/Third_Party/FatFs/src/ff.c **** 
1513:Middlewares/Third_Party/FatFs/src/ff.c **** 
1514:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1515:Middlewares/Third_Party/FatFs/src/ff.c **** /* Directory handling - Move directory table index next                  */
1516:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1517:Middlewares/Third_Party/FatFs/src/ff.c **** 
1518:Middlewares/Third_Party/FatFs/src/ff.c **** static
1519:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
1520:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp,		/* Pointer to the directory object */
1521:Middlewares/Third_Party/FatFs/src/ff.c **** 	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
1522:Middlewares/Third_Party/FatFs/src/ff.c **** )
1523:Middlewares/Third_Party/FatFs/src/ff.c **** {
1524:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD ofs, clst;
1525:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs = dp->obj.fs;
1526:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
1527:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT n;
1528:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1529:Middlewares/Third_Party/FatFs/src/ff.c **** 
1530:Middlewares/Third_Party/FatFs/src/ff.c **** 	ofs = dp->dptr + SZDIRE;	/* Next entry */
1531:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) re
1532:Middlewares/Third_Party/FatFs/src/ff.c **** 
1533:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (ofs % SS(fs) == 0) {	/* Sector changed? */
1534:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->sect++;				/* Next sector */
1535:Middlewares/Third_Party/FatFs/src/ff.c **** 
1536:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!dp->clust) {		/* Static table */
1537:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
1538:Middlewares/Third_Party/FatFs/src/ff.c **** 				dp->sect = 0; return FR_NO_FILE;
1539:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
1540:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1541:Middlewares/Third_Party/FatFs/src/ff.c **** 		else {					/* Dynamic table */
1542:Middlewares/Third_Party/FatFs/src/ff.c **** 			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
1543:Middlewares/Third_Party/FatFs/src/ff.c **** 				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
1544:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
1545:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
ARM GAS  /tmp/ccqUXb8n.s 			page 44


1546:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
1547:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
1548:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (!stretch) {								/* If no stretch, report EOT */
1549:Middlewares/Third_Party/FatFs/src/ff.c **** 						dp->sect = 0; return FR_NO_FILE;
1550:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
1551:Middlewares/Third_Party/FatFs/src/ff.c **** 					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
1552:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
1553:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 1) return FR_INT_ERR;			/* Internal error */
1554:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1555:Middlewares/Third_Party/FatFs/src/ff.c **** 					/* Clean-up the stretched table */
1556:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
1557:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
1558:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
1559:Middlewares/Third_Party/FatFs/src/ff.c **** 					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill t
1560:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->wflag = 1;
1561:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
1562:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
1563:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->winsect -= n;							/* Restore window offset */
1564:Middlewares/Third_Party/FatFs/src/ff.c **** #else
1565:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
1566:Middlewares/Third_Party/FatFs/src/ff.c **** 					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
1567:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1568:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
1569:Middlewares/Third_Party/FatFs/src/ff.c **** 				dp->clust = clst;		/* Initialize data for new cluster */
1570:Middlewares/Third_Party/FatFs/src/ff.c **** 				dp->sect = clust2sect(fs, clst);
1571:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
1572:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1573:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1574:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->dptr = ofs;						/* Current entry */
1575:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
1576:Middlewares/Third_Party/FatFs/src/ff.c **** 
1577:Middlewares/Third_Party/FatFs/src/ff.c **** 	return FR_OK;
1578:Middlewares/Third_Party/FatFs/src/ff.c **** }
1579:Middlewares/Third_Party/FatFs/src/ff.c **** 
1580:Middlewares/Third_Party/FatFs/src/ff.c **** 
1581:Middlewares/Third_Party/FatFs/src/ff.c **** 
1582:Middlewares/Third_Party/FatFs/src/ff.c **** 
1583:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
1584:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1585:Middlewares/Third_Party/FatFs/src/ff.c **** /* Directory handling - Reserve a block of directory entries             */
1586:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1587:Middlewares/Third_Party/FatFs/src/ff.c **** 
1588:Middlewares/Third_Party/FatFs/src/ff.c **** static
1589:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
1590:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp,		/* Pointer to the directory object */
1591:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT nent		/* Number of contiguous entries to allocate */
1592:Middlewares/Third_Party/FatFs/src/ff.c **** )
1593:Middlewares/Third_Party/FatFs/src/ff.c **** {
1594:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
1595:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT n;
1596:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs = dp->obj.fs;
1597:Middlewares/Third_Party/FatFs/src/ff.c **** 
1598:Middlewares/Third_Party/FatFs/src/ff.c **** 
1599:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = dir_sdi(dp, 0);
1600:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
1601:Middlewares/Third_Party/FatFs/src/ff.c **** 		n = 0;
1602:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
ARM GAS  /tmp/ccqUXb8n.s 			page 45


1603:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = move_window(fs, dp->sect);
1604:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
1605:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
1606:Middlewares/Third_Party/FatFs/src/ff.c **** 			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name
1607:Middlewares/Third_Party/FatFs/src/ff.c **** #else
1608:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
1609:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1610:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (++n == nent) break;	/* A block of contiguous free entries is found */
1611:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
1612:Middlewares/Third_Party/FatFs/src/ff.c **** 				n = 0;					/* Not a blank entry. Restart to search */
1613:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
1614:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = dir_next(dp, 1);
1615:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (res == FR_OK);	/* Next entry with table stretch enabled */
1616:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1617:Middlewares/Third_Party/FatFs/src/ff.c **** 
1618:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
1619:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
1620:Middlewares/Third_Party/FatFs/src/ff.c **** }
1621:Middlewares/Third_Party/FatFs/src/ff.c **** 
1622:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* !_FS_READONLY */
1623:Middlewares/Third_Party/FatFs/src/ff.c **** 
1624:Middlewares/Third_Party/FatFs/src/ff.c **** 
1625:Middlewares/Third_Party/FatFs/src/ff.c **** 
1626:Middlewares/Third_Party/FatFs/src/ff.c **** 
1627:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1628:Middlewares/Third_Party/FatFs/src/ff.c **** /* FAT: Directory handling - Load/Store start cluster number             */
1629:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1630:Middlewares/Third_Party/FatFs/src/ff.c **** 
1631:Middlewares/Third_Party/FatFs/src/ff.c **** static
1632:Middlewares/Third_Party/FatFs/src/ff.c **** DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
1633:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS* fs,		/* Pointer to the fs object */
1634:Middlewares/Third_Party/FatFs/src/ff.c **** 	const BYTE* dir	/* Pointer to the key entry */
1635:Middlewares/Third_Party/FatFs/src/ff.c **** )
1636:Middlewares/Third_Party/FatFs/src/ff.c **** {
 901              		.loc 1 1636 0
 902              		.cfi_startproc
 903              		@ args = 0, pretend = 0, frame = 0
 904              		@ frame_needed = 0, uses_anonymous_args = 0
 905              	.LVL109:
 906 0000 70B5     		push	{r4, r5, r6, lr}
 907              	.LCFI12:
 908              		.cfi_def_cfa_offset 16
 909              		.cfi_offset 4, -16
 910              		.cfi_offset 5, -12
 911              		.cfi_offset 6, -8
 912              		.cfi_offset 14, -4
 913 0002 0646     		mov	r6, r0
 914 0004 0D46     		mov	r5, r1
1637:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD cl;
1638:Middlewares/Third_Party/FatFs/src/ff.c **** 
1639:Middlewares/Third_Party/FatFs/src/ff.c **** 	cl = ld_word(dir + DIR_FstClusLO);
 915              		.loc 1 1639 0
 916 0006 01F11A00 		add	r0, r1, #26
 917              	.LVL110:
 918 000a FFF7FEFF 		bl	ld_word
 919              	.LVL111:
1640:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->fs_type == FS_FAT32) {
ARM GAS  /tmp/ccqUXb8n.s 			page 46


 920              		.loc 1 1640 0
 921 000e 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 922 0010 032B     		cmp	r3, #3
 923 0012 00D0     		beq	.L93
 924              	.LVL112:
 925              	.L90:
1641:Middlewares/Third_Party/FatFs/src/ff.c **** 		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
1642:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1643:Middlewares/Third_Party/FatFs/src/ff.c **** 
1644:Middlewares/Third_Party/FatFs/src/ff.c **** 	return cl;
1645:Middlewares/Third_Party/FatFs/src/ff.c **** }
 926              		.loc 1 1645 0
 927 0014 70BD     		pop	{r4, r5, r6, pc}
 928              	.LVL113:
 929              	.L93:
 930 0016 0446     		mov	r4, r0
1641:Middlewares/Third_Party/FatFs/src/ff.c **** 		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 931              		.loc 1 1641 0
 932 0018 05F11400 		add	r0, r5, #20
 933              	.LVL114:
 934 001c FFF7FEFF 		bl	ld_word
 935              	.LVL115:
 936 0020 44EA0040 		orr	r0, r4, r0, lsl #16
 937              	.LVL116:
1644:Middlewares/Third_Party/FatFs/src/ff.c **** }
 938              		.loc 1 1644 0
 939 0024 F6E7     		b	.L90
 940              		.cfi_endproc
 941              	.LFE168:
 943              		.section	.text.st_clust,"ax",%progbits
 944              		.align	1
 945              		.syntax unified
 946              		.thumb
 947              		.thumb_func
 948              		.fpu fpv5-sp-d16
 950              	st_clust:
 951              	.LFB169:
1646:Middlewares/Third_Party/FatFs/src/ff.c **** 
1647:Middlewares/Third_Party/FatFs/src/ff.c **** 
1648:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
1649:Middlewares/Third_Party/FatFs/src/ff.c **** static
1650:Middlewares/Third_Party/FatFs/src/ff.c **** void st_clust (
1651:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS* fs,	/* Pointer to the fs object */
1652:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE* dir,	/* Pointer to the key entry */
1653:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD cl	/* Value to be set */
1654:Middlewares/Third_Party/FatFs/src/ff.c **** )
1655:Middlewares/Third_Party/FatFs/src/ff.c **** {
 952              		.loc 1 1655 0
 953              		.cfi_startproc
 954              		@ args = 0, pretend = 0, frame = 0
 955              		@ frame_needed = 0, uses_anonymous_args = 0
 956              	.LVL117:
 957 0000 70B5     		push	{r4, r5, r6, lr}
 958              	.LCFI13:
 959              		.cfi_def_cfa_offset 16
 960              		.cfi_offset 4, -16
 961              		.cfi_offset 5, -12
ARM GAS  /tmp/ccqUXb8n.s 			page 47


 962              		.cfi_offset 6, -8
 963              		.cfi_offset 14, -4
 964 0002 0646     		mov	r6, r0
 965 0004 0C46     		mov	r4, r1
 966 0006 1546     		mov	r5, r2
1656:Middlewares/Third_Party/FatFs/src/ff.c **** 	st_word(dir + DIR_FstClusLO, (WORD)cl);
 967              		.loc 1 1656 0
 968 0008 91B2     		uxth	r1, r2
 969              	.LVL118:
 970 000a 04F11A00 		add	r0, r4, #26
 971              	.LVL119:
 972 000e FFF7FEFF 		bl	st_word
 973              	.LVL120:
1657:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->fs_type == FS_FAT32) {
 974              		.loc 1 1657 0
 975 0012 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 976 0014 032B     		cmp	r3, #3
 977 0016 00D0     		beq	.L97
 978              	.L94:
1658:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
1659:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1660:Middlewares/Third_Party/FatFs/src/ff.c **** }
 979              		.loc 1 1660 0
 980 0018 70BD     		pop	{r4, r5, r6, pc}
 981              	.LVL121:
 982              	.L97:
1658:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 983              		.loc 1 1658 0
 984 001a 290C     		lsrs	r1, r5, #16
 985 001c 04F11400 		add	r0, r4, #20
 986 0020 FFF7FEFF 		bl	st_word
 987              	.LVL122:
 988              		.loc 1 1660 0
 989 0024 F8E7     		b	.L94
 990              		.cfi_endproc
 991              	.LFE169:
 993              		.section	.text.get_fileinfo,"ax",%progbits
 994              		.align	1
 995              		.syntax unified
 996              		.thumb
 997              		.thumb_func
 998              		.fpu fpv5-sp-d16
 1000              	get_fileinfo:
 1001              	.LFB174:
1661:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1662:Middlewares/Third_Party/FatFs/src/ff.c **** 
1663:Middlewares/Third_Party/FatFs/src/ff.c **** 
1664:Middlewares/Third_Party/FatFs/src/ff.c **** 
1665:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0
1666:Middlewares/Third_Party/FatFs/src/ff.c **** /*------------------------------------------------------------------------*/
1667:Middlewares/Third_Party/FatFs/src/ff.c **** /* FAT-LFN: LFN handling                                                  */
1668:Middlewares/Third_Party/FatFs/src/ff.c **** /*------------------------------------------------------------------------*/
1669:Middlewares/Third_Party/FatFs/src/ff.c **** static
1670:Middlewares/Third_Party/FatFs/src/ff.c **** const BYTE LfnOfs[] = {1,3,5,7,9,14,16,18,20,22,24,28,30};	/* Offset of LFN characters in the direc
1671:Middlewares/Third_Party/FatFs/src/ff.c **** 
1672:Middlewares/Third_Party/FatFs/src/ff.c **** 
1673:Middlewares/Third_Party/FatFs/src/ff.c **** /*--------------------------------------------------------*/
ARM GAS  /tmp/ccqUXb8n.s 			page 48


1674:Middlewares/Third_Party/FatFs/src/ff.c **** /* FAT-LFN: Compare a part of file name with an LFN entry */
1675:Middlewares/Third_Party/FatFs/src/ff.c **** /*--------------------------------------------------------*/
1676:Middlewares/Third_Party/FatFs/src/ff.c **** static
1677:Middlewares/Third_Party/FatFs/src/ff.c **** int cmp_lfn (				/* 1:matched, 0:not matched */
1678:Middlewares/Third_Party/FatFs/src/ff.c **** 	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
1679:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
1680:Middlewares/Third_Party/FatFs/src/ff.c **** )
1681:Middlewares/Third_Party/FatFs/src/ff.c **** {
1682:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, s;
1683:Middlewares/Third_Party/FatFs/src/ff.c **** 	WCHAR wc, uc;
1684:Middlewares/Third_Party/FatFs/src/ff.c **** 
1685:Middlewares/Third_Party/FatFs/src/ff.c **** 
1686:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
1687:Middlewares/Third_Party/FatFs/src/ff.c **** 
1688:Middlewares/Third_Party/FatFs/src/ff.c **** 	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
1689:Middlewares/Third_Party/FatFs/src/ff.c **** 
1690:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1691:Middlewares/Third_Party/FatFs/src/ff.c **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
1692:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (wc) {
1693:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
1694:Middlewares/Third_Party/FatFs/src/ff.c **** 				return 0;					/* Not matched */
1695:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
1696:Middlewares/Third_Party/FatFs/src/ff.c **** 			wc = uc;
1697:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
1698:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (uc != 0xFFFF) return 0;		/* Check filler */
1699:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1700:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1701:Middlewares/Third_Party/FatFs/src/ff.c **** 
1702:Middlewares/Third_Party/FatFs/src/ff.c **** 	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different len
1703:Middlewares/Third_Party/FatFs/src/ff.c **** 
1704:Middlewares/Third_Party/FatFs/src/ff.c **** 	return 1;		/* The part of LFN matched */
1705:Middlewares/Third_Party/FatFs/src/ff.c **** }
1706:Middlewares/Third_Party/FatFs/src/ff.c **** 
1707:Middlewares/Third_Party/FatFs/src/ff.c **** 
1708:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_MINIMIZE <= 1 || _FS_RPATH >= 2 || _USE_LABEL || _FS_EXFAT
1709:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------*/
1710:Middlewares/Third_Party/FatFs/src/ff.c **** /* FAT-LFN: Pick a part of file name from an LFN entry */
1711:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------*/
1712:Middlewares/Third_Party/FatFs/src/ff.c **** static
1713:Middlewares/Third_Party/FatFs/src/ff.c **** int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
1714:Middlewares/Third_Party/FatFs/src/ff.c **** 	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
1715:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE* dir			/* Pointer to the LFN entry */
1716:Middlewares/Third_Party/FatFs/src/ff.c **** )
1717:Middlewares/Third_Party/FatFs/src/ff.c **** {
1718:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, s;
1719:Middlewares/Third_Party/FatFs/src/ff.c **** 	WCHAR wc, uc;
1720:Middlewares/Third_Party/FatFs/src/ff.c **** 
1721:Middlewares/Third_Party/FatFs/src/ff.c **** 
1722:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
1723:Middlewares/Third_Party/FatFs/src/ff.c **** 
1724:Middlewares/Third_Party/FatFs/src/ff.c **** 	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
1725:Middlewares/Third_Party/FatFs/src/ff.c **** 
1726:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1727:Middlewares/Third_Party/FatFs/src/ff.c **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
1728:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (wc) {
1729:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
1730:Middlewares/Third_Party/FatFs/src/ff.c **** 			lfnbuf[i++] = wc = uc;			/* Store it */
ARM GAS  /tmp/ccqUXb8n.s 			page 49


1731:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
1732:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (uc != 0xFFFF) return 0;		/* Check filler */
1733:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1734:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1735:Middlewares/Third_Party/FatFs/src/ff.c **** 
1736:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
1737:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
1738:Middlewares/Third_Party/FatFs/src/ff.c **** 		lfnbuf[i] = 0;
1739:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1740:Middlewares/Third_Party/FatFs/src/ff.c **** 
1741:Middlewares/Third_Party/FatFs/src/ff.c **** 	return 1;		/* The part of LFN is valid */
1742:Middlewares/Third_Party/FatFs/src/ff.c **** }
1743:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1744:Middlewares/Third_Party/FatFs/src/ff.c **** 
1745:Middlewares/Third_Party/FatFs/src/ff.c **** 
1746:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
1747:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------*/
1748:Middlewares/Third_Party/FatFs/src/ff.c **** /* FAT-LFN: Create an entry of LFN entries */
1749:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------*/
1750:Middlewares/Third_Party/FatFs/src/ff.c **** static
1751:Middlewares/Third_Party/FatFs/src/ff.c **** void put_lfn (
1752:Middlewares/Third_Party/FatFs/src/ff.c **** 	const WCHAR* lfn,	/* Pointer to the LFN */
1753:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE* dir,			/* Pointer to the LFN entry to be created */
1754:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE ord,			/* LFN order (1-20) */
1755:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE sum			/* Checksum of the corresponding SFN */
1756:Middlewares/Third_Party/FatFs/src/ff.c **** )
1757:Middlewares/Third_Party/FatFs/src/ff.c **** {
1758:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, s;
1759:Middlewares/Third_Party/FatFs/src/ff.c **** 	WCHAR wc;
1760:Middlewares/Third_Party/FatFs/src/ff.c **** 
1761:Middlewares/Third_Party/FatFs/src/ff.c **** 
1762:Middlewares/Third_Party/FatFs/src/ff.c **** 	dir[LDIR_Chksum] = sum;			/* Set checksum */
1763:Middlewares/Third_Party/FatFs/src/ff.c **** 	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
1764:Middlewares/Third_Party/FatFs/src/ff.c **** 	dir[LDIR_Type] = 0;
1765:Middlewares/Third_Party/FatFs/src/ff.c **** 	st_word(dir + LDIR_FstClusLO, 0);
1766:Middlewares/Third_Party/FatFs/src/ff.c **** 
1767:Middlewares/Third_Party/FatFs/src/ff.c **** 	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
1768:Middlewares/Third_Party/FatFs/src/ff.c **** 	s = wc = 0;
1769:Middlewares/Third_Party/FatFs/src/ff.c **** 	do {
1770:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
1771:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(dir + LfnOfs[s], wc);		/* Put it */
1772:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
1773:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (++s < 13);
1774:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
1775:Middlewares/Third_Party/FatFs/src/ff.c **** 	dir[LDIR_Ord] = ord;			/* Set the LFN order */
1776:Middlewares/Third_Party/FatFs/src/ff.c **** }
1777:Middlewares/Third_Party/FatFs/src/ff.c **** 
1778:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* !_FS_READONLY */
1779:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* _USE_LFN != 0 */
1780:Middlewares/Third_Party/FatFs/src/ff.c **** 
1781:Middlewares/Third_Party/FatFs/src/ff.c **** 
1782:Middlewares/Third_Party/FatFs/src/ff.c **** 
1783:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0 && !_FS_READONLY
1784:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1785:Middlewares/Third_Party/FatFs/src/ff.c **** /* FAT-LFN: Create a Numbered SFN                                        */
1786:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1787:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  /tmp/ccqUXb8n.s 			page 50


1788:Middlewares/Third_Party/FatFs/src/ff.c **** static
1789:Middlewares/Third_Party/FatFs/src/ff.c **** void gen_numname (
1790:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
1791:Middlewares/Third_Party/FatFs/src/ff.c **** 	const BYTE* src,	/* Pointer to SFN */
1792:Middlewares/Third_Party/FatFs/src/ff.c **** 	const WCHAR* lfn,	/* Pointer to LFN */
1793:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT seq			/* Sequence number */
1794:Middlewares/Third_Party/FatFs/src/ff.c **** )
1795:Middlewares/Third_Party/FatFs/src/ff.c **** {
1796:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE ns[8], c;
1797:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, j;
1798:Middlewares/Third_Party/FatFs/src/ff.c **** 	WCHAR wc;
1799:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD sr;
1800:Middlewares/Third_Party/FatFs/src/ff.c **** 
1801:Middlewares/Third_Party/FatFs/src/ff.c **** 
1802:Middlewares/Third_Party/FatFs/src/ff.c **** 	mem_cpy(dst, src, 11);
1803:Middlewares/Third_Party/FatFs/src/ff.c **** 
1804:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number 
1805:Middlewares/Third_Party/FatFs/src/ff.c **** 		sr = seq;
1806:Middlewares/Third_Party/FatFs/src/ff.c **** 		while (*lfn) {	/* Create a CRC */
1807:Middlewares/Third_Party/FatFs/src/ff.c **** 			wc = *lfn++;
1808:Middlewares/Third_Party/FatFs/src/ff.c **** 			for (i = 0; i < 16; i++) {
1809:Middlewares/Third_Party/FatFs/src/ff.c **** 				sr = (sr << 1) + (wc & 1);
1810:Middlewares/Third_Party/FatFs/src/ff.c **** 				wc >>= 1;
1811:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (sr & 0x10000) sr ^= 0x11021;
1812:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
1813:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1814:Middlewares/Third_Party/FatFs/src/ff.c **** 		seq = (UINT)sr;
1815:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1816:Middlewares/Third_Party/FatFs/src/ff.c **** 
1817:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* itoa (hexdecimal) */
1818:Middlewares/Third_Party/FatFs/src/ff.c **** 	i = 7;
1819:Middlewares/Third_Party/FatFs/src/ff.c **** 	do {
1820:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = (BYTE)((seq % 16) + '0');
1821:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c > '9') c += 7;
1822:Middlewares/Third_Party/FatFs/src/ff.c **** 		ns[i--] = c;
1823:Middlewares/Third_Party/FatFs/src/ff.c **** 		seq /= 16;
1824:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (seq);
1825:Middlewares/Third_Party/FatFs/src/ff.c **** 	ns[i] = '~';
1826:Middlewares/Third_Party/FatFs/src/ff.c **** 
1827:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Append the number */
1828:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (j = 0; j < i && dst[j] != ' '; j++) {
1829:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (IsDBCS1(dst[j])) {
1830:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (j == i - 1) break;
1831:Middlewares/Third_Party/FatFs/src/ff.c **** 			j++;
1832:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1833:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1834:Middlewares/Third_Party/FatFs/src/ff.c **** 	do {
1835:Middlewares/Third_Party/FatFs/src/ff.c **** 		dst[j++] = (i < 8) ? ns[i++] : ' ';
1836:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (j < 8);
1837:Middlewares/Third_Party/FatFs/src/ff.c **** }
1838:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* _USE_LFN != 0 && !_FS_READONLY */
1839:Middlewares/Third_Party/FatFs/src/ff.c **** 
1840:Middlewares/Third_Party/FatFs/src/ff.c **** 
1841:Middlewares/Third_Party/FatFs/src/ff.c **** 
1842:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0
1843:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1844:Middlewares/Third_Party/FatFs/src/ff.c **** /* FAT-LFN: Calculate checksum of an SFN entry                           */
ARM GAS  /tmp/ccqUXb8n.s 			page 51


1845:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1846:Middlewares/Third_Party/FatFs/src/ff.c **** 
1847:Middlewares/Third_Party/FatFs/src/ff.c **** static
1848:Middlewares/Third_Party/FatFs/src/ff.c **** BYTE sum_sfn (
1849:Middlewares/Third_Party/FatFs/src/ff.c **** 	const BYTE* dir		/* Pointer to the SFN entry */
1850:Middlewares/Third_Party/FatFs/src/ff.c **** )
1851:Middlewares/Third_Party/FatFs/src/ff.c **** {
1852:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE sum = 0;
1853:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT n = 11;
1854:Middlewares/Third_Party/FatFs/src/ff.c **** 
1855:Middlewares/Third_Party/FatFs/src/ff.c **** 	do {
1856:Middlewares/Third_Party/FatFs/src/ff.c **** 		sum = (sum >> 1) + (sum << 7) + *dir++;
1857:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (--n);
1858:Middlewares/Third_Party/FatFs/src/ff.c **** 	return sum;
1859:Middlewares/Third_Party/FatFs/src/ff.c **** }
1860:Middlewares/Third_Party/FatFs/src/ff.c **** 
1861:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* _USE_LFN != 0 */
1862:Middlewares/Third_Party/FatFs/src/ff.c **** 
1863:Middlewares/Third_Party/FatFs/src/ff.c **** 
1864:Middlewares/Third_Party/FatFs/src/ff.c **** 
1865:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
1866:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1867:Middlewares/Third_Party/FatFs/src/ff.c **** /* exFAT: Checksum                                                       */
1868:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1869:Middlewares/Third_Party/FatFs/src/ff.c **** 
1870:Middlewares/Third_Party/FatFs/src/ff.c **** static
1871:Middlewares/Third_Party/FatFs/src/ff.c **** WORD xdir_sum (			/* Get checksum of the directoly block */
1872:Middlewares/Third_Party/FatFs/src/ff.c **** 	const BYTE* dir		/* Directory entry block to be calculated */
1873:Middlewares/Third_Party/FatFs/src/ff.c **** )
1874:Middlewares/Third_Party/FatFs/src/ff.c **** {
1875:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, szblk;
1876:Middlewares/Third_Party/FatFs/src/ff.c **** 	WORD sum;
1877:Middlewares/Third_Party/FatFs/src/ff.c **** 
1878:Middlewares/Third_Party/FatFs/src/ff.c **** 
1879:Middlewares/Third_Party/FatFs/src/ff.c **** 	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
1880:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (i = sum = 0; i < szblk; i++) {
1881:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i == XDIR_SetSum) {	/* Skip sum field */
1882:Middlewares/Third_Party/FatFs/src/ff.c **** 			i++;
1883:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
1884:Middlewares/Third_Party/FatFs/src/ff.c **** 			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
1885:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1886:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1887:Middlewares/Third_Party/FatFs/src/ff.c **** 	return sum;
1888:Middlewares/Third_Party/FatFs/src/ff.c **** }
1889:Middlewares/Third_Party/FatFs/src/ff.c **** 
1890:Middlewares/Third_Party/FatFs/src/ff.c **** 
1891:Middlewares/Third_Party/FatFs/src/ff.c **** 
1892:Middlewares/Third_Party/FatFs/src/ff.c **** static
1893:Middlewares/Third_Party/FatFs/src/ff.c **** WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
1894:Middlewares/Third_Party/FatFs/src/ff.c **** 	const WCHAR* name	/* File name to be calculated */
1895:Middlewares/Third_Party/FatFs/src/ff.c **** )
1896:Middlewares/Third_Party/FatFs/src/ff.c **** {
1897:Middlewares/Third_Party/FatFs/src/ff.c **** 	WCHAR chr;
1898:Middlewares/Third_Party/FatFs/src/ff.c **** 	WORD sum = 0;
1899:Middlewares/Third_Party/FatFs/src/ff.c **** 
1900:Middlewares/Third_Party/FatFs/src/ff.c **** 
1901:Middlewares/Third_Party/FatFs/src/ff.c **** 	while ((chr = *name++) != 0) {
ARM GAS  /tmp/ccqUXb8n.s 			page 52


1902:Middlewares/Third_Party/FatFs/src/ff.c **** 		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
1903:Middlewares/Third_Party/FatFs/src/ff.c **** 		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
1904:Middlewares/Third_Party/FatFs/src/ff.c **** 		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
1905:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1906:Middlewares/Third_Party/FatFs/src/ff.c **** 	return sum;
1907:Middlewares/Third_Party/FatFs/src/ff.c **** }
1908:Middlewares/Third_Party/FatFs/src/ff.c **** 
1909:Middlewares/Third_Party/FatFs/src/ff.c **** 
1910:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY && _USE_MKFS
1911:Middlewares/Third_Party/FatFs/src/ff.c **** static
1912:Middlewares/Third_Party/FatFs/src/ff.c **** DWORD xsum32 (
1913:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE  dat,	/* Data to be sumed */
1914:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD sum	/* Previous value */
1915:Middlewares/Third_Party/FatFs/src/ff.c **** )
1916:Middlewares/Third_Party/FatFs/src/ff.c **** {
1917:Middlewares/Third_Party/FatFs/src/ff.c **** 	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
1918:Middlewares/Third_Party/FatFs/src/ff.c **** 	return sum;
1919:Middlewares/Third_Party/FatFs/src/ff.c **** }
1920:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1921:Middlewares/Third_Party/FatFs/src/ff.c **** 
1922:Middlewares/Third_Party/FatFs/src/ff.c **** 
1923:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_MINIMIZE <= 1 || _FS_RPATH >= 2
1924:Middlewares/Third_Party/FatFs/src/ff.c **** /*------------------------------------------------------*/
1925:Middlewares/Third_Party/FatFs/src/ff.c **** /* exFAT: Get object information from a directory block */
1926:Middlewares/Third_Party/FatFs/src/ff.c **** /*------------------------------------------------------*/
1927:Middlewares/Third_Party/FatFs/src/ff.c **** 
1928:Middlewares/Third_Party/FatFs/src/ff.c **** static
1929:Middlewares/Third_Party/FatFs/src/ff.c **** void get_xdir_info (
1930:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
1931:Middlewares/Third_Party/FatFs/src/ff.c **** 	FILINFO* fno		/* Buffer to store the extracted file information */
1932:Middlewares/Third_Party/FatFs/src/ff.c **** )
1933:Middlewares/Third_Party/FatFs/src/ff.c **** {
1934:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT di, si;
1935:Middlewares/Third_Party/FatFs/src/ff.c **** 	WCHAR w;
1936:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_LFN_UNICODE
1937:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT nc;
1938:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1939:Middlewares/Third_Party/FatFs/src/ff.c **** 
1940:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get file name */
1941:Middlewares/Third_Party/FatFs/src/ff.c **** 	di = 0;
1942:Middlewares/Third_Party/FatFs/src/ff.c **** #if _LFN_UNICODE
1943:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (si = SZDIRE * 2; di < dirb[XDIR_NumName]; si += 2, di++) {
1944:Middlewares/Third_Party/FatFs/src/ff.c **** 		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
1945:Middlewares/Third_Party/FatFs/src/ff.c **** 		w = ld_word(dirb + si);					/* Get a character */
1946:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
1947:Middlewares/Third_Party/FatFs/src/ff.c **** 		fno->fname[di] = w;						/* Store it */
1948:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1949:Middlewares/Third_Party/FatFs/src/ff.c **** #else
1950:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
1951:Middlewares/Third_Party/FatFs/src/ff.c **** 		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
1952:Middlewares/Third_Party/FatFs/src/ff.c **** 		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
1953:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (_DF1S && w >= 0x100) {				/* Is it a double byte char? (always false at SBCS cfg) */
1954:Middlewares/Third_Party/FatFs/src/ff.c **** 			fno->fname[di++] = (char)(w >> 8);	/* Put 1st byte of the DBC */
1955:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1956:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessi
1957:Middlewares/Third_Party/FatFs/src/ff.c **** 		fno->fname[di++] = (char)w;
1958:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
ARM GAS  /tmp/ccqUXb8n.s 			page 53


1959:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1960:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
1961:Middlewares/Third_Party/FatFs/src/ff.c **** 	fno->fname[di] = 0;						/* Terminate file name */
1962:Middlewares/Third_Party/FatFs/src/ff.c **** 
1963:Middlewares/Third_Party/FatFs/src/ff.c **** 	fno->altname[0] = 0;							/* No SFN */
1964:Middlewares/Third_Party/FatFs/src/ff.c **** 	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
1965:Middlewares/Third_Party/FatFs/src/ff.c **** 	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
1966:Middlewares/Third_Party/FatFs/src/ff.c **** 	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
1967:Middlewares/Third_Party/FatFs/src/ff.c **** 	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
1968:Middlewares/Third_Party/FatFs/src/ff.c **** }
1969:Middlewares/Third_Party/FatFs/src/ff.c **** 
1970:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* _FS_MINIMIZE <= 1 || _FS_RPATH >= 2 */
1971:Middlewares/Third_Party/FatFs/src/ff.c **** 
1972:Middlewares/Third_Party/FatFs/src/ff.c **** 
1973:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------*/
1974:Middlewares/Third_Party/FatFs/src/ff.c **** /* exFAT: Get a directry entry block */
1975:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------*/
1976:Middlewares/Third_Party/FatFs/src/ff.c **** 
1977:Middlewares/Third_Party/FatFs/src/ff.c **** static
1978:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
1979:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
1980:Middlewares/Third_Party/FatFs/src/ff.c **** )
1981:Middlewares/Third_Party/FatFs/src/ff.c **** {
1982:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
1983:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, sz_ent;
1984:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
1985:Middlewares/Third_Party/FatFs/src/ff.c **** 
1986:Middlewares/Third_Party/FatFs/src/ff.c **** 
1987:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Load 85 entry */
1988:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = move_window(dp->obj.fs, dp->sect);
1989:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK) return res;
1990:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
1991:Middlewares/Third_Party/FatFs/src/ff.c **** 	mem_cpy(dirb + 0, dp->dir, SZDIRE);
1992:Middlewares/Third_Party/FatFs/src/ff.c **** 	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
1993:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
1994:Middlewares/Third_Party/FatFs/src/ff.c **** 
1995:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Load C0 entry */
1996:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = dir_next(dp, 0);
1997:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK) return res;
1998:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = move_window(dp->obj.fs, dp->sect);
1999:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK) return res;
2000:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
2001:Middlewares/Third_Party/FatFs/src/ff.c **** 	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
2002:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
2003:Middlewares/Third_Party/FatFs/src/ff.c **** 
2004:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Load C1 entries */
2005:Middlewares/Third_Party/FatFs/src/ff.c **** 	i = SZDIRE * 2;	/* C1 offset */
2006:Middlewares/Third_Party/FatFs/src/ff.c **** 	do {
2007:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = dir_next(dp, 0);
2008:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) return res;
2009:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = move_window(dp->obj.fs, dp->sect);
2010:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) return res;
2011:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
2012:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
2013:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while ((i += SZDIRE) < sz_ent);
2014:Middlewares/Third_Party/FatFs/src/ff.c **** 
2015:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Sanity check (do it when accessible object name) */
ARM GAS  /tmp/ccqUXb8n.s 			page 54


2016:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (i <= MAXDIRB(_MAX_LFN)) {
2017:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
2018:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2019:Middlewares/Third_Party/FatFs/src/ff.c **** 	return FR_OK;
2020:Middlewares/Third_Party/FatFs/src/ff.c **** }
2021:Middlewares/Third_Party/FatFs/src/ff.c **** 
2022:Middlewares/Third_Party/FatFs/src/ff.c **** 
2023:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY || _FS_RPATH != 0
2024:Middlewares/Third_Party/FatFs/src/ff.c **** /*------------------------------------------------*/
2025:Middlewares/Third_Party/FatFs/src/ff.c **** /* exFAT: Load the object's directory entry block */
2026:Middlewares/Third_Party/FatFs/src/ff.c **** /*------------------------------------------------*/
2027:Middlewares/Third_Party/FatFs/src/ff.c **** static
2028:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT load_obj_dir (
2029:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
2030:Middlewares/Third_Party/FatFs/src/ff.c **** 	const _FDID* obj	/* Object with its containing directory information */
2031:Middlewares/Third_Party/FatFs/src/ff.c **** )
2032:Middlewares/Third_Party/FatFs/src/ff.c **** {
2033:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
2034:Middlewares/Third_Party/FatFs/src/ff.c **** 
2035:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Open object containing directory */
2036:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->obj.fs = obj->fs;
2037:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->obj.sclust = obj->c_scl;
2038:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->obj.stat = (BYTE)obj->c_size;
2039:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
2040:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->blk_ofs = obj->c_ofs;
2041:Middlewares/Third_Party/FatFs/src/ff.c **** 
2042:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
2043:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
2044:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = load_xdir(dp);		/* Load the object's entry block */
2045:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2046:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
2047:Middlewares/Third_Party/FatFs/src/ff.c **** }
2048:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2049:Middlewares/Third_Party/FatFs/src/ff.c **** 
2050:Middlewares/Third_Party/FatFs/src/ff.c **** 
2051:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
2052:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------*/
2053:Middlewares/Third_Party/FatFs/src/ff.c **** /* exFAT: Store the directory block to the media */
2054:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------*/
2055:Middlewares/Third_Party/FatFs/src/ff.c **** static
2056:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT store_xdir (
2057:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp				/* Pointer to the direcotry object */
2058:Middlewares/Third_Party/FatFs/src/ff.c **** )
2059:Middlewares/Third_Party/FatFs/src/ff.c **** {
2060:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
2061:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT nent;
2062:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
2063:Middlewares/Third_Party/FatFs/src/ff.c **** 
2064:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Create set sum */
2065:Middlewares/Third_Party/FatFs/src/ff.c **** 	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
2066:Middlewares/Third_Party/FatFs/src/ff.c **** 	nent = dirb[XDIR_NumSec] + 1;
2067:Middlewares/Third_Party/FatFs/src/ff.c **** 
2068:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Store the set of directory to the volume */
2069:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = dir_sdi(dp, dp->blk_ofs);
2070:Middlewares/Third_Party/FatFs/src/ff.c **** 	while (res == FR_OK) {
2071:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = move_window(dp->obj.fs, dp->sect);
2072:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) break;
ARM GAS  /tmp/ccqUXb8n.s 			page 55


2073:Middlewares/Third_Party/FatFs/src/ff.c **** 		mem_cpy(dp->dir, dirb, SZDIRE);
2074:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->obj.fs->wflag = 1;
2075:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (--nent == 0) break;
2076:Middlewares/Third_Party/FatFs/src/ff.c **** 		dirb += SZDIRE;
2077:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = dir_next(dp, 0);
2078:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2079:Middlewares/Third_Party/FatFs/src/ff.c **** 	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
2080:Middlewares/Third_Party/FatFs/src/ff.c **** }
2081:Middlewares/Third_Party/FatFs/src/ff.c **** 
2082:Middlewares/Third_Party/FatFs/src/ff.c **** 
2083:Middlewares/Third_Party/FatFs/src/ff.c **** 
2084:Middlewares/Third_Party/FatFs/src/ff.c **** /*-------------------------------------------*/
2085:Middlewares/Third_Party/FatFs/src/ff.c **** /* exFAT: Create a new directory enrty block */
2086:Middlewares/Third_Party/FatFs/src/ff.c **** /*-------------------------------------------*/
2087:Middlewares/Third_Party/FatFs/src/ff.c **** 
2088:Middlewares/Third_Party/FatFs/src/ff.c **** static
2089:Middlewares/Third_Party/FatFs/src/ff.c **** void create_xdir (
2090:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
2091:Middlewares/Third_Party/FatFs/src/ff.c **** 	const WCHAR* lfn	/* Pointer to the nul terminated file name */
2092:Middlewares/Third_Party/FatFs/src/ff.c **** )
2093:Middlewares/Third_Party/FatFs/src/ff.c **** {
2094:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i;
2095:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE nb, nc;
2096:Middlewares/Third_Party/FatFs/src/ff.c **** 	WCHAR chr;
2097:Middlewares/Third_Party/FatFs/src/ff.c **** 
2098:Middlewares/Third_Party/FatFs/src/ff.c **** 
2099:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Create 85+C0 entry */
2100:Middlewares/Third_Party/FatFs/src/ff.c **** 	mem_set(dirb, 0, 2 * SZDIRE);
2101:Middlewares/Third_Party/FatFs/src/ff.c **** 	dirb[XDIR_Type] = 0x85;
2102:Middlewares/Third_Party/FatFs/src/ff.c **** 	dirb[XDIR_Type + SZDIRE] = 0xC0;
2103:Middlewares/Third_Party/FatFs/src/ff.c **** 
2104:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Create C1 entries */
2105:Middlewares/Third_Party/FatFs/src/ff.c **** 	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
2106:Middlewares/Third_Party/FatFs/src/ff.c **** 	do {
2107:Middlewares/Third_Party/FatFs/src/ff.c **** 		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
2108:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {	/* Fill name field */
2109:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
2110:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(dirb + i, chr); 		/* Store it */
2111:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while ((i += 2) % SZDIRE != 0);
2112:Middlewares/Third_Party/FatFs/src/ff.c **** 		nb++;
2113:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (lfn[nc]);	/* Fill next entry if any char follows */
2114:Middlewares/Third_Party/FatFs/src/ff.c **** 
2115:Middlewares/Third_Party/FatFs/src/ff.c **** 	dirb[XDIR_NumName] = nc;	/* Set name length */
2116:Middlewares/Third_Party/FatFs/src/ff.c **** 	dirb[XDIR_NumSec] = nb;		/* Set block length */
2117:Middlewares/Third_Party/FatFs/src/ff.c **** 	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
2118:Middlewares/Third_Party/FatFs/src/ff.c **** }
2119:Middlewares/Third_Party/FatFs/src/ff.c **** 
2120:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* !_FS_READONLY */
2121:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* _FS_EXFAT */
2122:Middlewares/Third_Party/FatFs/src/ff.c **** 
2123:Middlewares/Third_Party/FatFs/src/ff.c **** 
2124:Middlewares/Third_Party/FatFs/src/ff.c **** 
2125:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_MINIMIZE <= 1 || _FS_RPATH >= 2 || _USE_LABEL || _FS_EXFAT
2126:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2127:Middlewares/Third_Party/FatFs/src/ff.c **** /* Read an object from the directory                                     */
2128:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2129:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  /tmp/ccqUXb8n.s 			page 56


2130:Middlewares/Third_Party/FatFs/src/ff.c **** static
2131:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT dir_read (
2132:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp,		/* Pointer to the directory object */
2133:Middlewares/Third_Party/FatFs/src/ff.c **** 	int vol			/* Filtered by 0:file/directory or 1:volume label */
2134:Middlewares/Third_Party/FatFs/src/ff.c **** )
2135:Middlewares/Third_Party/FatFs/src/ff.c **** {
2136:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res = FR_NO_FILE;
2137:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs = dp->obj.fs;
2138:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE a, c;
2139:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0
2140:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE ord = 0xFF, sum = 0xFF;
2141:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2142:Middlewares/Third_Party/FatFs/src/ff.c **** 
2143:Middlewares/Third_Party/FatFs/src/ff.c **** 	while (dp->sect) {
2144:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = move_window(fs, dp->sect);
2145:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) break;
2146:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = dp->dir[DIR_Name];	/* Test for the entry type */
2147:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == 0) {
2148:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = FR_NO_FILE; break; /* Reached to end of the directory */
2149:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2150:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
2151:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2152:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (_USE_LABEL && vol) {
2153:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (c == 0x83) break;	/* Volume label entry? */
2154:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
2155:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (c == 0x85) {		/* Start of the file entry block? */
2156:Middlewares/Third_Party/FatFs/src/ff.c **** 					dp->blk_ofs = dp->dptr;	/* Get location of the block */
2157:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = load_xdir(dp);	/* Load the entry block */
2158:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (res == FR_OK) {
2159:Middlewares/Third_Party/FatFs/src/ff.c **** 						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
2160:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
2161:Middlewares/Third_Party/FatFs/src/ff.c **** 					break;
2162:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
2163:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2164:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else
2165:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2166:Middlewares/Third_Party/FatFs/src/ff.c **** 		{	/* On the FAT12/16/32 volume */
2167:Middlewares/Third_Party/FatFs/src/ff.c **** 			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
2168:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
2169:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid 
2170:Middlewares/Third_Party/FatFs/src/ff.c **** 				ord = 0xFF;
2171:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
2172:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (a == AM_LFN) {			/* An LFN entry is found */
2173:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (c & LLEF) {			/* Is it start of an LFN sequence? */
2174:Middlewares/Third_Party/FatFs/src/ff.c **** 						sum = dp->dir[LDIR_Chksum];
2175:Middlewares/Third_Party/FatFs/src/ff.c **** 						c &= (BYTE)~LLEF; ord = c;
2176:Middlewares/Third_Party/FatFs/src/ff.c **** 						dp->blk_ofs = dp->dptr;
2177:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
2178:Middlewares/Third_Party/FatFs/src/ff.c **** 					/* Check LFN validity and capture it */
2179:Middlewares/Third_Party/FatFs/src/ff.c **** 					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0
2180:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {					/* An SFN entry is found */
2181:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
2182:Middlewares/Third_Party/FatFs/src/ff.c **** 						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
2183:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
2184:Middlewares/Third_Party/FatFs/src/ff.c **** 					break;
2185:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
2186:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
ARM GAS  /tmp/ccqUXb8n.s 			page 57


2187:Middlewares/Third_Party/FatFs/src/ff.c **** #else		/* Non LFN configuration */
2188:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a 
2189:Middlewares/Third_Party/FatFs/src/ff.c **** 				break;
2190:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2191:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2192:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2193:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = dir_next(dp, 0);		/* Next entry */
2194:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) break;
2195:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2196:Middlewares/Third_Party/FatFs/src/ff.c **** 
2197:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
2198:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
2199:Middlewares/Third_Party/FatFs/src/ff.c **** }
2200:Middlewares/Third_Party/FatFs/src/ff.c **** 
2201:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* _FS_MINIMIZE <= 1 || _USE_LABEL || _FS_RPATH >= 2 */
2202:Middlewares/Third_Party/FatFs/src/ff.c **** 
2203:Middlewares/Third_Party/FatFs/src/ff.c **** 
2204:Middlewares/Third_Party/FatFs/src/ff.c **** 
2205:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2206:Middlewares/Third_Party/FatFs/src/ff.c **** /* Directory handling - Find an object in the directory                  */
2207:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2208:Middlewares/Third_Party/FatFs/src/ff.c **** 
2209:Middlewares/Third_Party/FatFs/src/ff.c **** static
2210:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
2211:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp			/* Pointer to the directory object with the file name */
2212:Middlewares/Third_Party/FatFs/src/ff.c **** )
2213:Middlewares/Third_Party/FatFs/src/ff.c **** {
2214:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
2215:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs = dp->obj.fs;
2216:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE c;
2217:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0
2218:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE a, ord, sum;
2219:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2220:Middlewares/Third_Party/FatFs/src/ff.c **** 
2221:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = dir_sdi(dp, 0);			/* Rewind directory object */
2222:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK) return res;
2223:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
2224:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2225:Middlewares/Third_Party/FatFs/src/ff.c **** 		BYTE nc;
2226:Middlewares/Third_Party/FatFs/src/ff.c **** 		UINT di, ni;
2227:Middlewares/Third_Party/FatFs/src/ff.c **** 		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
2228:Middlewares/Third_Party/FatFs/src/ff.c **** 
2229:Middlewares/Third_Party/FatFs/src/ff.c **** 		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
2230:Middlewares/Third_Party/FatFs/src/ff.c **** #if _MAX_LFN < 255
2231:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object n
2232:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2233:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched
2234:Middlewares/Third_Party/FatFs/src/ff.c **** 			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compa
2235:Middlewares/Third_Party/FatFs/src/ff.c **** 				if ((di % SZDIRE) == 0) di += 2;
2236:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
2237:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2238:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
2239:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2240:Middlewares/Third_Party/FatFs/src/ff.c **** 		return res;
2241:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2242:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2243:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* On the FAT12/16/32 volume */
ARM GAS  /tmp/ccqUXb8n.s 			page 58


2244:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0
2245:Middlewares/Third_Party/FatFs/src/ff.c **** 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2246:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2247:Middlewares/Third_Party/FatFs/src/ff.c **** 	do {
2248:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = move_window(fs, dp->sect);
2249:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) break;
2250:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = dp->dir[DIR_Name];
2251:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
2252:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
2253:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
2254:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
2255:Middlewares/Third_Party/FatFs/src/ff.c **** 			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2256:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
2257:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (a == AM_LFN) {			/* An LFN entry is found */
2258:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
2259:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (c & LLEF) {		/* Is it start of LFN sequence? */
2260:Middlewares/Third_Party/FatFs/src/ff.c **** 						sum = dp->dir[LDIR_Chksum];
2261:Middlewares/Third_Party/FatFs/src/ff.c **** 						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
2262:Middlewares/Third_Party/FatFs/src/ff.c **** 						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
2263:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
2264:Middlewares/Third_Party/FatFs/src/ff.c **** 					/* Check validity of the LFN entry and compare it with given name */
2265:Middlewares/Third_Party/FatFs/src/ff.c **** 					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0x
2266:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
2267:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {					/* An SFN entry is found */
2268:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
2269:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
2270:Middlewares/Third_Party/FatFs/src/ff.c **** 				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2271:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2272:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2273:Middlewares/Third_Party/FatFs/src/ff.c **** #else		/* Non LFN configuration */
2274:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
2275:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry
2276:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2277:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = dir_next(dp, 0);	/* Next entry */
2278:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (res == FR_OK);
2279:Middlewares/Third_Party/FatFs/src/ff.c **** 
2280:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
2281:Middlewares/Third_Party/FatFs/src/ff.c **** }
2282:Middlewares/Third_Party/FatFs/src/ff.c **** 
2283:Middlewares/Third_Party/FatFs/src/ff.c **** 
2284:Middlewares/Third_Party/FatFs/src/ff.c **** 
2285:Middlewares/Third_Party/FatFs/src/ff.c **** 
2286:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
2287:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2288:Middlewares/Third_Party/FatFs/src/ff.c **** /* Register an object to the directory                                   */
2289:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2290:Middlewares/Third_Party/FatFs/src/ff.c **** 
2291:Middlewares/Third_Party/FatFs/src/ff.c **** static
2292:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DI
2293:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp				/* Target directory with object name to be created */
2294:Middlewares/Third_Party/FatFs/src/ff.c **** )
2295:Middlewares/Third_Party/FatFs/src/ff.c **** {
2296:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
2297:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs = dp->obj.fs;
2298:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
2299:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT n, nlen, nent;
2300:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE sn[12], sum;
ARM GAS  /tmp/ccqUXb8n.s 			page 59


2301:Middlewares/Third_Party/FatFs/src/ff.c **** 
2302:Middlewares/Third_Party/FatFs/src/ff.c **** 
2303:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
2304:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
2305:Middlewares/Third_Party/FatFs/src/ff.c **** 
2306:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
2307:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2308:Middlewares/Third_Party/FatFs/src/ff.c **** 		DIR dj;
2309:Middlewares/Third_Party/FatFs/src/ff.c **** 
2310:Middlewares/Third_Party/FatFs/src/ff.c **** 		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
2311:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = dir_alloc(dp, nent);		/* Allocate entries */
2312:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) return res;
2313:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
2314:Middlewares/Third_Party/FatFs/src/ff.c **** 
2315:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
2316:Middlewares/Third_Party/FatFs/src/ff.c **** 			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
2317:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
2318:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) return res;
2319:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if neede
2320:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) return res;
2321:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
2322:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) return res;
2323:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
2324:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
2325:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
2326:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = store_xdir(&dj);							/* Store the object status */
2327:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) return res;
2328:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2329:Middlewares/Third_Party/FatFs/src/ff.c **** 
2330:Middlewares/Third_Party/FatFs/src/ff.c **** 		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
2331:Middlewares/Third_Party/FatFs/src/ff.c **** 		return FR_OK;
2332:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2333:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2334:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* On the FAT12/16/32 volume */
2335:Middlewares/Third_Party/FatFs/src/ff.c **** 	mem_cpy(sn, dp->fn, 12);
2336:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
2337:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
2338:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (n = 1; n < 100; n++) {
2339:Middlewares/Third_Party/FatFs/src/ff.c **** 			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
2340:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = dir_find(dp);				/* Check if the name collides with existing SFN */
2341:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
2342:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2343:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
2344:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
2345:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->fn[NSFLAG] = sn[NSFLAG];
2346:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2347:Middlewares/Third_Party/FatFs/src/ff.c **** 
2348:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Create an SFN with/without LFNs. */
2349:Middlewares/Third_Party/FatFs/src/ff.c **** 	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2350:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = dir_alloc(dp, nent);		/* Allocate entries */
2351:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
2352:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
2353:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
2354:Middlewares/Third_Party/FatFs/src/ff.c **** 			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
2355:Middlewares/Third_Party/FatFs/src/ff.c **** 			do {					/* Store LFN entries in bottom first */
2356:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = move_window(fs, dp->sect);
2357:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res != FR_OK) break;
ARM GAS  /tmp/ccqUXb8n.s 			page 60


2358:Middlewares/Third_Party/FatFs/src/ff.c **** 				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
2359:Middlewares/Third_Party/FatFs/src/ff.c **** 				fs->wflag = 1;
2360:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = dir_next(dp, 0);	/* Next entry */
2361:Middlewares/Third_Party/FatFs/src/ff.c **** 			} while (res == FR_OK && --nent);
2362:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2363:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2364:Middlewares/Third_Party/FatFs/src/ff.c **** 
2365:Middlewares/Third_Party/FatFs/src/ff.c **** #else	/* Non LFN configuration */
2366:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
2367:Middlewares/Third_Party/FatFs/src/ff.c **** 
2368:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2369:Middlewares/Third_Party/FatFs/src/ff.c **** 
2370:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Set SFN entry */
2371:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
2372:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = move_window(fs, dp->sect);
2373:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
2374:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
2375:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
2376:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0
2377:Middlewares/Third_Party/FatFs/src/ff.c **** 			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
2378:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2379:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
2380:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2381:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2382:Middlewares/Third_Party/FatFs/src/ff.c **** 
2383:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
2384:Middlewares/Third_Party/FatFs/src/ff.c **** }
2385:Middlewares/Third_Party/FatFs/src/ff.c **** 
2386:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* !_FS_READONLY */
2387:Middlewares/Third_Party/FatFs/src/ff.c **** 
2388:Middlewares/Third_Party/FatFs/src/ff.c **** 
2389:Middlewares/Third_Party/FatFs/src/ff.c **** 
2390:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY && _FS_MINIMIZE == 0
2391:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2392:Middlewares/Third_Party/FatFs/src/ff.c **** /* Remove an object from the directory                                   */
2393:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2394:Middlewares/Third_Party/FatFs/src/ff.c **** 
2395:Middlewares/Third_Party/FatFs/src/ff.c **** static
2396:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
2397:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp				/* Directory object pointing the entry to be removed */
2398:Middlewares/Third_Party/FatFs/src/ff.c **** )
2399:Middlewares/Third_Party/FatFs/src/ff.c **** {
2400:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
2401:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs = dp->obj.fs;
2402:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
2403:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD last = dp->dptr;
2404:Middlewares/Third_Party/FatFs/src/ff.c **** 
2405:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry blo
2406:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
2407:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
2408:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = move_window(fs, dp->sect);
2409:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
2410:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Mark an entry 'deleted' */
2411:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2412:Middlewares/Third_Party/FatFs/src/ff.c **** 				dp->dir[XDIR_Type] &= 0x7F;
2413:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {									/* On the FAT12/16/32 volume */
2414:Middlewares/Third_Party/FatFs/src/ff.c **** 				dp->dir[DIR_Name] = DDEM;
ARM GAS  /tmp/ccqUXb8n.s 			page 61


2415:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2416:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
2417:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been de
2418:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = dir_next(dp, 0);	/* Next entry */
2419:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (res == FR_OK);
2420:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_NO_FILE) res = FR_INT_ERR;
2421:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2422:Middlewares/Third_Party/FatFs/src/ff.c **** #else			/* Non LFN configuration */
2423:Middlewares/Third_Party/FatFs/src/ff.c **** 
2424:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = move_window(fs, dp->sect);
2425:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
2426:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->dir[DIR_Name] = DDEM;
2427:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->wflag = 1;
2428:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2429:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2430:Middlewares/Third_Party/FatFs/src/ff.c **** 
2431:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
2432:Middlewares/Third_Party/FatFs/src/ff.c **** }
2433:Middlewares/Third_Party/FatFs/src/ff.c **** 
2434:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* !_FS_READONLY && _FS_MINIMIZE == 0 */
2435:Middlewares/Third_Party/FatFs/src/ff.c **** 
2436:Middlewares/Third_Party/FatFs/src/ff.c **** 
2437:Middlewares/Third_Party/FatFs/src/ff.c **** 
2438:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_MINIMIZE <= 1 || _FS_RPATH >= 2
2439:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2440:Middlewares/Third_Party/FatFs/src/ff.c **** /* Get file information from directory entry                             */
2441:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2442:Middlewares/Third_Party/FatFs/src/ff.c **** 
2443:Middlewares/Third_Party/FatFs/src/ff.c **** static
2444:Middlewares/Third_Party/FatFs/src/ff.c **** void get_fileinfo (		/* No return code */
2445:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp,			/* Pointer to the directory object */
2446:Middlewares/Third_Party/FatFs/src/ff.c **** 	FILINFO* fno	 	/* Pointer to the file information to be filled */
2447:Middlewares/Third_Party/FatFs/src/ff.c **** )
2448:Middlewares/Third_Party/FatFs/src/ff.c **** {
 1002              		.loc 1 2448 0
 1003              		.cfi_startproc
 1004              		@ args = 0, pretend = 0, frame = 0
 1005              		@ frame_needed = 0, uses_anonymous_args = 0
 1006              	.LVL123:
2449:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, j;
2450:Middlewares/Third_Party/FatFs/src/ff.c **** 	TCHAR c;
2451:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD tm;
2452:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0
2453:Middlewares/Third_Party/FatFs/src/ff.c **** 	WCHAR w, lfv;
2454:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs = dp->obj.fs;
2455:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2456:Middlewares/Third_Party/FatFs/src/ff.c **** 
2457:Middlewares/Third_Party/FatFs/src/ff.c **** 
2458:Middlewares/Third_Party/FatFs/src/ff.c **** 	fno->fname[0] = 0;		/* Invaidate file info */
 1007              		.loc 1 2458 0
 1008 0000 0023     		movs	r3, #0
 1009 0002 4B72     		strb	r3, [r1, #9]
2459:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 1010              		.loc 1 2459 0
 1011 0004 C369     		ldr	r3, [r0, #28]
 1012 0006 73B3     		cbz	r3, .L107
2448:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, j;
ARM GAS  /tmp/ccqUXb8n.s 			page 62


 1013              		.loc 1 2448 0
 1014 0008 70B5     		push	{r4, r5, r6, lr}
 1015              	.LCFI14:
 1016              		.cfi_def_cfa_offset 16
 1017              		.cfi_offset 4, -16
 1018              		.cfi_offset 5, -12
 1019              		.cfi_offset 6, -8
 1020              		.cfi_offset 14, -4
2460:Middlewares/Third_Party/FatFs/src/ff.c **** 
2461:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
2462:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
2463:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2464:Middlewares/Third_Party/FatFs/src/ff.c **** 		get_xdir_info(fs->dirbuf, fno);
2465:Middlewares/Third_Party/FatFs/src/ff.c **** 		return;
2466:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else
2467:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2468:Middlewares/Third_Party/FatFs/src/ff.c **** 	{	/* On the FAT12/16/32 volume */
2469:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
2470:Middlewares/Third_Party/FatFs/src/ff.c **** 			i = j = 0;
2471:Middlewares/Third_Party/FatFs/src/ff.c **** 			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
2472:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_LFN_UNICODE
2473:Middlewares/Third_Party/FatFs/src/ff.c **** 				w = ff_convert(w, 0);		/* Unicode -> OEM */
2474:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
2475:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
2476:Middlewares/Third_Party/FatFs/src/ff.c **** 					fno->fname[i++] = (char)(w >> 8);
2477:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
2478:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2479:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
2480:Middlewares/Third_Party/FatFs/src/ff.c **** 				fno->fname[i++] = (TCHAR)w;
2481:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2482:Middlewares/Third_Party/FatFs/src/ff.c **** 			fno->fname[i] = 0;	/* Terminate the LFN */
2483:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2484:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2485:Middlewares/Third_Party/FatFs/src/ff.c **** 
2486:Middlewares/Third_Party/FatFs/src/ff.c **** 	i = j = 0;
2487:Middlewares/Third_Party/FatFs/src/ff.c **** 	lfv = fno->fname[i];	/* LFN is exist if non-zero */
2488:Middlewares/Third_Party/FatFs/src/ff.c **** 	while (i < 11) {		/* Copy name body and extension */
2489:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = (TCHAR)dp->dir[i++];
2490:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == ' ') continue;				/* Skip padding spaces */
2491:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
2492:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i == 9) {						/* Insert a . if extension is exist */
2493:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!lfv) fno->fname[j] = '.';
2494:Middlewares/Third_Party/FatFs/src/ff.c **** 			fno->altname[j++] = '.';
2495:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2496:Middlewares/Third_Party/FatFs/src/ff.c **** #if _LFN_UNICODE
2497:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (IsDBCS1(c) && i != 8 && i != 11 && IsDBCS2(dp->dir[i])) {
2498:Middlewares/Third_Party/FatFs/src/ff.c **** 			c = c << 8 | dp->dir[i++];
2499:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2500:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = ff_convert(c, 1);	/* OEM -> Unicode */
2501:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!c) c = '?';
2502:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2503:Middlewares/Third_Party/FatFs/src/ff.c **** 		fno->altname[j] = c;
2504:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!lfv) {
2505:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
2506:Middlewares/Third_Party/FatFs/src/ff.c **** 				c += 0x20;			/* To lower */
2507:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2508:Middlewares/Third_Party/FatFs/src/ff.c **** 			fno->fname[j] = c;
ARM GAS  /tmp/ccqUXb8n.s 			page 63


2509:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2510:Middlewares/Third_Party/FatFs/src/ff.c **** 		j++;
2511:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2512:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!lfv) {
2513:Middlewares/Third_Party/FatFs/src/ff.c **** 		fno->fname[j] = 0;
2514:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is ex
2515:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2516:Middlewares/Third_Party/FatFs/src/ff.c **** 	fno->altname[j] = 0;	/* Terminate the SFN */
2517:Middlewares/Third_Party/FatFs/src/ff.c **** 
2518:Middlewares/Third_Party/FatFs/src/ff.c **** #else	/* Non-LFN configuration */
2519:Middlewares/Third_Party/FatFs/src/ff.c **** 	i = j = 0;
 1021              		.loc 1 2519 0
 1022 000a 0022     		movs	r2, #0
 1023 000c 1346     		mov	r3, r2
 1024 000e 05E0     		b	.L100
 1025              	.LVL124:
 1026              	.L102:
2520:Middlewares/Third_Party/FatFs/src/ff.c **** 	while (i < 11) {		/* Copy name body and extension */
2521:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = (TCHAR)dp->dir[i++];
2522:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == ' ') continue;				/* Skip padding spaces */
2523:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
2524:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 1027              		.loc 1 2524 0
 1028 0010 092C     		cmp	r4, #9
 1029 0012 0ED0     		beq	.L110
 1030              	.L103:
 1031              	.LVL125:
2525:Middlewares/Third_Party/FatFs/src/ff.c **** 		fno->fname[j++] = c;
 1032              		.loc 1 2525 0
 1033 0014 8D18     		adds	r5, r1, r2
 1034 0016 6B72     		strb	r3, [r5, #9]
 1035 0018 0132     		adds	r2, r2, #1
 1036              	.LVL126:
 1037              	.L101:
 1038 001a 2346     		mov	r3, r4
 1039              	.LVL127:
 1040              	.L100:
2520:Middlewares/Third_Party/FatFs/src/ff.c **** 	while (i < 11) {		/* Copy name body and extension */
 1041              		.loc 1 2520 0
 1042 001c 0A2B     		cmp	r3, #10
 1043 001e 0DD8     		bhi	.L111
2521:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == ' ') continue;				/* Skip padding spaces */
 1044              		.loc 1 2521 0
 1045 0020 056A     		ldr	r5, [r0, #32]
 1046 0022 5C1C     		adds	r4, r3, #1
 1047              	.LVL128:
 1048 0024 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1049              	.LVL129:
2522:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 1050              		.loc 1 2522 0
 1051 0026 202B     		cmp	r3, #32
 1052 0028 F7D0     		beq	.L101
2523:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 1053              		.loc 1 2523 0
 1054 002a 052B     		cmp	r3, #5
 1055 002c F0D1     		bne	.L102
 1056 002e E523     		movs	r3, #229
ARM GAS  /tmp/ccqUXb8n.s 			page 64


 1057              	.LVL130:
 1058 0030 EEE7     		b	.L102
 1059              	.LVL131:
 1060              	.L110:
2524:Middlewares/Third_Party/FatFs/src/ff.c **** 		fno->fname[j++] = c;
 1061              		.loc 1 2524 0 discriminator 1
 1062 0032 8D18     		adds	r5, r1, r2
 1063 0034 2E26     		movs	r6, #46
 1064 0036 6E72     		strb	r6, [r5, #9]
 1065 0038 0132     		adds	r2, r2, #1
 1066              	.LVL132:
 1067 003a EBE7     		b	.L103
 1068              	.LVL133:
 1069              	.L111:
 1070 003c 0D46     		mov	r5, r1
 1071 003e 0446     		mov	r4, r0
2526:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2527:Middlewares/Third_Party/FatFs/src/ff.c **** 	fno->fname[j] = 0;
 1072              		.loc 1 2527 0
 1073 0040 0A44     		add	r2, r2, r1
 1074              	.LVL134:
 1075 0042 0023     		movs	r3, #0
 1076              	.LVL135:
 1077 0044 5372     		strb	r3, [r2, #9]
2528:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2529:Middlewares/Third_Party/FatFs/src/ff.c **** 
2530:Middlewares/Third_Party/FatFs/src/ff.c **** 	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 1078              		.loc 1 2530 0
 1079 0046 036A     		ldr	r3, [r0, #32]
 1080 0048 DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 1081 004a 0B72     		strb	r3, [r1, #8]
2531:Middlewares/Third_Party/FatFs/src/ff.c **** 	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 1082              		.loc 1 2531 0
 1083 004c 006A     		ldr	r0, [r0, #32]
 1084              	.LVL136:
 1085 004e 1C30     		adds	r0, r0, #28
 1086 0050 FFF7FEFF 		bl	ld_dword
 1087              	.LVL137:
 1088 0054 2860     		str	r0, [r5]
2532:Middlewares/Third_Party/FatFs/src/ff.c **** 	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 1089              		.loc 1 2532 0
 1090 0056 206A     		ldr	r0, [r4, #32]
 1091 0058 1630     		adds	r0, r0, #22
 1092 005a FFF7FEFF 		bl	ld_dword
 1093              	.LVL138:
2533:Middlewares/Third_Party/FatFs/src/ff.c **** 	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 1094              		.loc 1 2533 0
 1095 005e E880     		strh	r0, [r5, #6]	@ movhi
 1096 0060 000C     		lsrs	r0, r0, #16
 1097              	.LVL139:
 1098 0062 A880     		strh	r0, [r5, #4]	@ movhi
2534:Middlewares/Third_Party/FatFs/src/ff.c **** }
 1099              		.loc 1 2534 0
 1100 0064 70BD     		pop	{r4, r5, r6, pc}
 1101              	.LVL140:
 1102              	.L107:
 1103              	.LCFI15:
ARM GAS  /tmp/ccqUXb8n.s 			page 65


 1104              		.cfi_def_cfa_offset 0
 1105              		.cfi_restore 4
 1106              		.cfi_restore 5
 1107              		.cfi_restore 6
 1108              		.cfi_restore 14
 1109 0066 7047     		bx	lr
 1110              		.cfi_endproc
 1111              	.LFE174:
 1113              		.section	.text.create_name,"ax",%progbits
 1114              		.align	1
 1115              		.syntax unified
 1116              		.thumb
 1117              		.thumb_func
 1118              		.fpu fpv5-sp-d16
 1120              	create_name:
 1121              	.LFB175:
2535:Middlewares/Third_Party/FatFs/src/ff.c **** 
2536:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _FS_MINIMIZE <= 1 || _FS_RPATH >= 2 */
2537:Middlewares/Third_Party/FatFs/src/ff.c **** 
2538:Middlewares/Third_Party/FatFs/src/ff.c **** 
2539:Middlewares/Third_Party/FatFs/src/ff.c **** 
2540:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_FIND && _FS_MINIMIZE <= 1
2541:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2542:Middlewares/Third_Party/FatFs/src/ff.c **** /* Pattern matching                                                      */
2543:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2544:Middlewares/Third_Party/FatFs/src/ff.c **** 
2545:Middlewares/Third_Party/FatFs/src/ff.c **** static
2546:Middlewares/Third_Party/FatFs/src/ff.c **** WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
2547:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
2548:Middlewares/Third_Party/FatFs/src/ff.c **** )
2549:Middlewares/Third_Party/FatFs/src/ff.c **** {
2550:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_LFN_UNICODE
2551:Middlewares/Third_Party/FatFs/src/ff.c **** 	WCHAR chr;
2552:Middlewares/Third_Party/FatFs/src/ff.c **** 
2553:Middlewares/Third_Party/FatFs/src/ff.c **** 	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2554:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2555:Middlewares/Third_Party/FatFs/src/ff.c **** #ifdef _EXCVT
2556:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2557:Middlewares/Third_Party/FatFs/src/ff.c **** #else
2558:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
2559:Middlewares/Third_Party/FatFs/src/ff.c **** 		chr = chr << 8 | (BYTE)*(*ptr)++;
2560:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2561:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2562:Middlewares/Third_Party/FatFs/src/ff.c **** 	return chr;
2563:Middlewares/Third_Party/FatFs/src/ff.c **** #else
2564:Middlewares/Third_Party/FatFs/src/ff.c **** 	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
2565:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2566:Middlewares/Third_Party/FatFs/src/ff.c **** }
2567:Middlewares/Third_Party/FatFs/src/ff.c **** 
2568:Middlewares/Third_Party/FatFs/src/ff.c **** 
2569:Middlewares/Third_Party/FatFs/src/ff.c **** static
2570:Middlewares/Third_Party/FatFs/src/ff.c **** int pattern_matching (	/* 0:not matched, 1:matched */
2571:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* pat,	/* Matching pattern */
2572:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* nam,	/* String to be tested */
2573:Middlewares/Third_Party/FatFs/src/ff.c **** 	int skip,			/* Number of pre-skip chars (number of ?s) */
2574:Middlewares/Third_Party/FatFs/src/ff.c **** 	int inf				/* Infinite search (* specified) */
2575:Middlewares/Third_Party/FatFs/src/ff.c **** )
ARM GAS  /tmp/ccqUXb8n.s 			page 66


2576:Middlewares/Third_Party/FatFs/src/ff.c **** {
2577:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR *pp, *np;
2578:Middlewares/Third_Party/FatFs/src/ff.c **** 	WCHAR pc, nc;
2579:Middlewares/Third_Party/FatFs/src/ff.c **** 	int nm, nx;
2580:Middlewares/Third_Party/FatFs/src/ff.c **** 
2581:Middlewares/Third_Party/FatFs/src/ff.c **** 
2582:Middlewares/Third_Party/FatFs/src/ff.c **** 	while (skip--) {				/* Pre-skip name chars */
2583:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
2584:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2585:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!*pat && inf) return 1;		/* (short circuit) */
2586:Middlewares/Third_Party/FatFs/src/ff.c **** 
2587:Middlewares/Third_Party/FatFs/src/ff.c **** 	do {
2588:Middlewares/Third_Party/FatFs/src/ff.c **** 		pp = pat; np = nam;			/* Top of pattern and name to match */
2589:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (;;) {
2590:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
2591:Middlewares/Third_Party/FatFs/src/ff.c **** 				nm = nx = 0;
2592:Middlewares/Third_Party/FatFs/src/ff.c **** 				do {				/* Analyze the wildcard chars */
2593:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (*pp++ == '?') nm++; else nx = 1;
2594:Middlewares/Third_Party/FatFs/src/ff.c **** 				} while (*pp == '?' || *pp == '*');
2595:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildc
2596:Middlewares/Third_Party/FatFs/src/ff.c **** 				nc = *np; break;	/* Branch mismatched */
2597:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2598:Middlewares/Third_Party/FatFs/src/ff.c **** 			pc = get_achar(&pp);	/* Get a pattern char */
2599:Middlewares/Third_Party/FatFs/src/ff.c **** 			nc = get_achar(&np);	/* Get a name char */
2600:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (pc != nc) break;	/* Branch mismatched? */
2601:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
2602:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2603:Middlewares/Third_Party/FatFs/src/ff.c **** 		get_achar(&nam);			/* nam++ */
2604:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
2605:Middlewares/Third_Party/FatFs/src/ff.c **** 
2606:Middlewares/Third_Party/FatFs/src/ff.c **** 	return 0;
2607:Middlewares/Third_Party/FatFs/src/ff.c **** }
2608:Middlewares/Third_Party/FatFs/src/ff.c **** 
2609:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _USE_FIND && _FS_MINIMIZE <= 1 */
2610:Middlewares/Third_Party/FatFs/src/ff.c **** 
2611:Middlewares/Third_Party/FatFs/src/ff.c **** 
2612:Middlewares/Third_Party/FatFs/src/ff.c **** 
2613:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2614:Middlewares/Third_Party/FatFs/src/ff.c **** /* Pick a top segment and create the object name in directory form       */
2615:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2616:Middlewares/Third_Party/FatFs/src/ff.c **** 
2617:Middlewares/Third_Party/FatFs/src/ff.c **** static
2618:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
2619:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp,			/* Pointer to the directory object */
2620:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
2621:Middlewares/Third_Party/FatFs/src/ff.c **** )
2622:Middlewares/Third_Party/FatFs/src/ff.c **** {
 1122              		.loc 1 2622 0
 1123              		.cfi_startproc
 1124              		@ args = 0, pretend = 0, frame = 0
 1125              		@ frame_needed = 0, uses_anonymous_args = 0
 1126              	.LVL141:
 1127 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1128              	.LCFI16:
 1129              		.cfi_def_cfa_offset 40
 1130              		.cfi_offset 3, -40
 1131              		.cfi_offset 4, -36
ARM GAS  /tmp/ccqUXb8n.s 			page 67


 1132              		.cfi_offset 5, -32
 1133              		.cfi_offset 6, -28
 1134              		.cfi_offset 7, -24
 1135              		.cfi_offset 8, -20
 1136              		.cfi_offset 9, -16
 1137              		.cfi_offset 10, -12
 1138              		.cfi_offset 11, -8
 1139              		.cfi_offset 14, -4
 1140 0004 8246     		mov	r10, r0
 1141 0006 8B46     		mov	fp, r1
2623:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
2624:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE b, cf;
2625:Middlewares/Third_Party/FatFs/src/ff.c **** 	WCHAR w, *lfn;
2626:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, ni, si, di;
2627:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR *p;
2628:Middlewares/Third_Party/FatFs/src/ff.c **** 
2629:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Create LFN in Unicode */
2630:Middlewares/Third_Party/FatFs/src/ff.c **** 	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
2631:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (;;) {
2632:Middlewares/Third_Party/FatFs/src/ff.c **** 		w = p[si++];					/* Get a character */
2633:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (w < ' ') break;				/* Break if end of the path name */
2634:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (w == '/' || w == '\\') {	/* Break if a separator is found */
2635:Middlewares/Third_Party/FatFs/src/ff.c **** 			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
2636:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
2637:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2638:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
2639:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_LFN_UNICODE
2640:Middlewares/Third_Party/FatFs/src/ff.c **** 		w &= 0xFF;
2641:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
2642:Middlewares/Third_Party/FatFs/src/ff.c **** 			b = (BYTE)p[si++];			/* Get 2nd byte */
2643:Middlewares/Third_Party/FatFs/src/ff.c **** 			w = (w << 8) + b;			/* Create a DBC */
2644:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
2645:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2646:Middlewares/Third_Party/FatFs/src/ff.c **** 		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
2647:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
2648:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2649:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters
2650:Middlewares/Third_Party/FatFs/src/ff.c **** 		lfn[di++] = w;					/* Store the Unicode character */
2651:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2652:Middlewares/Third_Party/FatFs/src/ff.c **** 	*path = &p[si];						/* Return pointer to the next segment */
2653:Middlewares/Third_Party/FatFs/src/ff.c **** 	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
2654:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_RPATH != 0
2655:Middlewares/Third_Party/FatFs/src/ff.c **** 	if ((di == 1 && lfn[di - 1] == '.') ||
2656:Middlewares/Third_Party/FatFs/src/ff.c **** 		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
2657:Middlewares/Third_Party/FatFs/src/ff.c **** 		lfn[di] = 0;
2658:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
2659:Middlewares/Third_Party/FatFs/src/ff.c **** 			dp->fn[i] = (i < di) ? '.' : ' ';
2660:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
2661:Middlewares/Third_Party/FatFs/src/ff.c **** 		return FR_OK;
2662:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2663:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2664:Middlewares/Third_Party/FatFs/src/ff.c **** 	while (di) {						/* Snip off trailing spaces and dots if exist */
2665:Middlewares/Third_Party/FatFs/src/ff.c **** 		w = lfn[di - 1];
2666:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (w != ' ' && w != '.') break;
2667:Middlewares/Third_Party/FatFs/src/ff.c **** 		di--;
2668:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2669:Middlewares/Third_Party/FatFs/src/ff.c **** 	lfn[di] = 0;						/* LFN is created */
ARM GAS  /tmp/ccqUXb8n.s 			page 68


2670:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
2671:Middlewares/Third_Party/FatFs/src/ff.c **** 
2672:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Create SFN in directory form */
2673:Middlewares/Third_Party/FatFs/src/ff.c **** 	mem_set(dp->fn, ' ', 11);
2674:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
2675:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (si) cf |= NS_LOSS | NS_LFN;
2676:Middlewares/Third_Party/FatFs/src/ff.c **** 	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
2677:Middlewares/Third_Party/FatFs/src/ff.c **** 
2678:Middlewares/Third_Party/FatFs/src/ff.c **** 	i = b = 0; ni = 8;
2679:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (;;) {
2680:Middlewares/Third_Party/FatFs/src/ff.c **** 		w = lfn[si++];					/* Get an LFN character */
2681:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!w) break;					/* Break on end of the LFN */
2682:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
2683:Middlewares/Third_Party/FatFs/src/ff.c **** 			cf |= NS_LOSS | NS_LFN; continue;
2684:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2685:Middlewares/Third_Party/FatFs/src/ff.c **** 
2686:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i >= ni || si == di) {		/* Extension or end of SFN */
2687:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ni == 11) {				/* Long extension */
2688:Middlewares/Third_Party/FatFs/src/ff.c **** 				cf |= NS_LOSS | NS_LFN; break;
2689:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2690:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
2691:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (si > di) break;			/* No extension */
2692:Middlewares/Third_Party/FatFs/src/ff.c **** 			si = di; i = 8; ni = 11;	/* Enter extension section */
2693:Middlewares/Third_Party/FatFs/src/ff.c **** 			b <<= 2; continue;
2694:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2695:Middlewares/Third_Party/FatFs/src/ff.c **** 
2696:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (w >= 0x80) {				/* Non ASCII character */
2697:Middlewares/Third_Party/FatFs/src/ff.c **** #ifdef _EXCVT
2698:Middlewares/Third_Party/FatFs/src/ff.c **** 			w = ff_convert(w, 0);		/* Unicode -> OEM code */
2699:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2700:Middlewares/Third_Party/FatFs/src/ff.c **** #else
2701:Middlewares/Third_Party/FatFs/src/ff.c **** 			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
2702:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2703:Middlewares/Third_Party/FatFs/src/ff.c **** 			cf |= NS_LFN;				/* Force create LFN entry */
2704:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2705:Middlewares/Third_Party/FatFs/src/ff.c **** 
2706:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (_DF1S && w >= 0x100) {		/* Is this DBC? (always false at SBCS cfg) */
2707:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (i >= ni - 1) {
2708:Middlewares/Third_Party/FatFs/src/ff.c **** 				cf |= NS_LOSS | NS_LFN; i = ni; continue;
2709:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2710:Middlewares/Third_Party/FatFs/src/ff.c **** 			dp->fn[i++] = (BYTE)(w >> 8);
2711:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {						/* SBC */
2712:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
2713:Middlewares/Third_Party/FatFs/src/ff.c **** 				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
2714:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
2715:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (IsUpper(w)) {		/* ASCII large capital */
2716:Middlewares/Third_Party/FatFs/src/ff.c **** 					b |= 2;
2717:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {
2718:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (IsLower(w)) {	/* ASCII small capital */
2719:Middlewares/Third_Party/FatFs/src/ff.c **** 						b |= 1; w -= 0x20;
2720:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
2721:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
2722:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2723:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2724:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->fn[i++] = (BYTE)w;
2725:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2726:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  /tmp/ccqUXb8n.s 			page 69


2727:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it
2728:Middlewares/Third_Party/FatFs/src/ff.c **** 
2729:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (ni == 8) b <<= 2;
2730:Middlewares/Third_Party/FatFs/src/ff.c **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are com
2731:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are c
2732:Middlewares/Third_Party/FatFs/src/ff.c **** 		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
2733:Middlewares/Third_Party/FatFs/src/ff.c **** 		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
2734:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2735:Middlewares/Third_Party/FatFs/src/ff.c **** 
2736:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->fn[NSFLAG] = cf;	/* SFN is created */
2737:Middlewares/Third_Party/FatFs/src/ff.c **** 
2738:Middlewares/Third_Party/FatFs/src/ff.c **** 	return FR_OK;
2739:Middlewares/Third_Party/FatFs/src/ff.c **** 
2740:Middlewares/Third_Party/FatFs/src/ff.c **** 
2741:Middlewares/Third_Party/FatFs/src/ff.c **** #else	/* _USE_LFN != 0 : Non-LFN configuration */
2742:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE c, d, *sfn;
2743:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT ni, si, i;
2744:Middlewares/Third_Party/FatFs/src/ff.c **** 	const char *p;
2745:Middlewares/Third_Party/FatFs/src/ff.c **** 
2746:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Create file name in directory form */
2747:Middlewares/Third_Party/FatFs/src/ff.c **** 	p = *path; sfn = dp->fn;
 1142              		.loc 1 2747 0
 1143 0008 D1F80080 		ldr	r8, [r1]
 1144              	.LVL142:
 1145 000c 00F12409 		add	r9, r0, #36
 1146              	.LVL143:
2748:Middlewares/Third_Party/FatFs/src/ff.c **** 	mem_set(sfn, ' ', 11);
 1147              		.loc 1 2748 0
 1148 0010 0B22     		movs	r2, #11
 1149 0012 2021     		movs	r1, #32
 1150              	.LVL144:
 1151 0014 4846     		mov	r0, r9
 1152              	.LVL145:
 1153 0016 FFF7FEFF 		bl	mem_set
 1154              	.LVL146:
2749:Middlewares/Third_Party/FatFs/src/ff.c **** 	si = i = 0; ni = 8;
 1155              		.loc 1 2749 0
 1156 001a 0025     		movs	r5, #0
 1157 001c 2B46     		mov	r3, r5
 1158 001e 0827     		movs	r7, #8
 1159 0020 29E0     		b	.L113
 1160              	.LVL147:
 1161              	.L117:
2750:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_RPATH != 0
2751:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (p[si] == '.') { /* Is this a dot entry? */
2752:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (;;) {
2753:Middlewares/Third_Party/FatFs/src/ff.c **** 			c = (BYTE)p[si++];
2754:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (c != '.' || si >= 3) break;
2755:Middlewares/Third_Party/FatFs/src/ff.c **** 			sfn[i++] = c;
2756:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2757:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
2758:Middlewares/Third_Party/FatFs/src/ff.c **** 		*path = p + si;								/* Return pointer to the next segment */
2759:Middlewares/Third_Party/FatFs/src/ff.c **** 		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path
2760:Middlewares/Third_Party/FatFs/src/ff.c **** 		return FR_OK;
2761:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2762:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2763:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (;;) {
ARM GAS  /tmp/ccqUXb8n.s 			page 70


2764:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = (BYTE)p[si++];
2765:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c <= ' ') break; 			/* Break if end of the path name */
2766:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == '/' || c == '\\') {	/* Break if a separator is found */
2767:Middlewares/Third_Party/FatFs/src/ff.c **** 			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 1162              		.loc 1 2767 0 discriminator 2
 1163 0022 0136     		adds	r6, r6, #1
 1164              	.LVL148:
 1165              	.L115:
 1166              		.loc 1 2767 0 is_stmt 0 discriminator 1
 1167 0024 18F80630 		ldrb	r3, [r8, r6]	@ zero_extendqisi2
 1168 0028 5C2B     		cmp	r3, #92
 1169 002a 18BF     		it	ne
 1170 002c 2F2B     		cmpne	r3, #47
 1171 002e F8D0     		beq	.L117
 1172              	.L114:
2768:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
2769:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2770:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == '.' || i >= ni) {		/* End of body or over size? */
2771:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
2772:Middlewares/Third_Party/FatFs/src/ff.c **** 			i = 8; ni = 11;				/* Goto extension */
2773:Middlewares/Third_Party/FatFs/src/ff.c **** 			continue;
2774:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2775:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c >= 0x80) {				/* Extended character? */
2776:Middlewares/Third_Party/FatFs/src/ff.c **** #ifdef _EXCVT
2777:Middlewares/Third_Party/FatFs/src/ff.c **** 			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
2778:Middlewares/Third_Party/FatFs/src/ff.c **** #else
2779:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_DF1S
2780:Middlewares/Third_Party/FatFs/src/ff.c **** 			return FR_INVALID_NAME;		/* Reject extended characters (ASCII only cfg) */
2781:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2782:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2783:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2784:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false at SBCS cfg.) */
2785:Middlewares/Third_Party/FatFs/src/ff.c **** 			d = (BYTE)p[si++];			/* Get 2nd byte */
2786:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
2787:Middlewares/Third_Party/FatFs/src/ff.c **** 			sfn[i++] = c;
2788:Middlewares/Third_Party/FatFs/src/ff.c **** 			sfn[i++] = d;
2789:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {						/* SBC */
2790:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
2791:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (IsLower(c)) c -= 0x20;	/* To upper */
2792:Middlewares/Third_Party/FatFs/src/ff.c **** 			sfn[i++] = c;
2793:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2794:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2795:Middlewares/Third_Party/FatFs/src/ff.c **** 	*path = p + si;						/* Return pointer to the next segment */
 1173              		.loc 1 2795 0 is_stmt 1
 1174 0030 4644     		add	r6, r6, r8
 1175              	.LVL149:
 1176 0032 CBF80060 		str	r6, [fp]
2796:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 1177              		.loc 1 2796 0
 1178 0036 002D     		cmp	r5, #0
 1179 0038 45D0     		beq	.L127
2797:Middlewares/Third_Party/FatFs/src/ff.c **** 
2798:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with 
 1180              		.loc 1 2798 0
 1181 003a 9AF82430 		ldrb	r3, [r10, #36]	@ zero_extendqisi2
 1182 003e E52B     		cmp	r3, #229
 1183 0040 36D0     		beq	.L131
ARM GAS  /tmp/ccqUXb8n.s 			page 71


 1184              	.L123:
2799:Middlewares/Third_Party/FatFs/src/ff.c **** 	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 1185              		.loc 1 2799 0
 1186 0042 202C     		cmp	r4, #32
 1187 0044 38D8     		bhi	.L128
 1188 0046 0423     		movs	r3, #4
 1189              	.L124:
 1190              		.loc 1 2799 0 is_stmt 0 discriminator 4
 1191 0048 8AF82F30 		strb	r3, [r10, #47]
2800:Middlewares/Third_Party/FatFs/src/ff.c **** 
2801:Middlewares/Third_Party/FatFs/src/ff.c **** 	return FR_OK;
 1192              		.loc 1 2801 0 is_stmt 1 discriminator 4
 1193 004c 0020     		movs	r0, #0
 1194 004e 36E0     		b	.L119
 1195              	.LVL150:
 1196              	.L118:
2775:Middlewares/Third_Party/FatFs/src/ff.c **** #ifdef _EXCVT
 1197              		.loc 1 2775 0
 1198 0050 14F0800F 		tst	r4, #128
 1199 0054 28D1     		bne	.L132
 1200              	.L121:
2790:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (IsLower(c)) c -= 0x20;	/* To upper */
 1201              		.loc 1 2790 0
 1202 0056 2146     		mov	r1, r4
 1203 0058 1C48     		ldr	r0, .L133
 1204 005a FFF7FEFF 		bl	chk_chr
 1205              	.LVL151:
 1206 005e 80BB     		cbnz	r0, .L126
2791:Middlewares/Third_Party/FatFs/src/ff.c **** 			sfn[i++] = c;
 1207              		.loc 1 2791 0
 1208 0060 A4F16103 		sub	r3, r4, #97
 1209 0064 DBB2     		uxtb	r3, r3
 1210 0066 192B     		cmp	r3, #25
 1211 0068 01D8     		bhi	.L122
2791:Middlewares/Third_Party/FatFs/src/ff.c **** 			sfn[i++] = c;
 1212              		.loc 1 2791 0 is_stmt 0 discriminator 1
 1213 006a 203C     		subs	r4, r4, #32
 1214              	.LVL152:
 1215 006c E4B2     		uxtb	r4, r4
 1216              	.LVL153:
 1217              	.L122:
2792:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 1218              		.loc 1 2792 0 is_stmt 1
 1219 006e 09F80540 		strb	r4, [r9, r5]
 1220 0072 0135     		adds	r5, r5, #1
 1221              	.LVL154:
 1222              	.L120:
 1223 0074 3346     		mov	r3, r6
 1224              	.LVL155:
 1225              	.L113:
2764:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c <= ' ') break; 			/* Break if end of the path name */
 1226              		.loc 1 2764 0
 1227 0076 5E1C     		adds	r6, r3, #1
 1228              	.LVL156:
 1229 0078 18F80340 		ldrb	r4, [r8, r3]	@ zero_extendqisi2
 1230              	.LVL157:
2765:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == '/' || c == '\\') {	/* Break if a separator is found */
ARM GAS  /tmp/ccqUXb8n.s 			page 72


 1231              		.loc 1 2765 0
 1232 007c 202C     		cmp	r4, #32
 1233 007e D7D9     		bls	.L114
2766:Middlewares/Third_Party/FatFs/src/ff.c **** 			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 1234              		.loc 1 2766 0
 1235 0080 5C2C     		cmp	r4, #92
 1236 0082 18BF     		it	ne
 1237 0084 2F2C     		cmpne	r4, #47
 1238 0086 CDD0     		beq	.L115
2770:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 1239              		.loc 1 2770 0
 1240 0088 2E2C     		cmp	r4, #46
 1241 008a 18BF     		it	ne
 1242 008c AF42     		cmpne	r7, r5
 1243 008e DFD8     		bhi	.L118
2771:Middlewares/Third_Party/FatFs/src/ff.c **** 			i = 8; ni = 11;				/* Goto extension */
 1244              		.loc 1 2771 0
 1245 0090 2E3C     		subs	r4, r4, #46
 1246              	.LVL158:
 1247 0092 18BF     		it	ne
 1248 0094 0124     		movne	r4, #1
 1249              	.LVL159:
 1250 0096 0B2F     		cmp	r7, #11
 1251 0098 14BF     		ite	ne
 1252 009a 2746     		movne	r7, r4
 1253 009c 44F00107 		orreq	r7, r4, #1
 1254              	.LVL160:
 1255 00a0 67B9     		cbnz	r7, .L125
2772:Middlewares/Third_Party/FatFs/src/ff.c **** 			continue;
 1256              		.loc 1 2772 0
 1257 00a2 0825     		movs	r5, #8
 1258              	.LVL161:
 1259 00a4 0B27     		movs	r7, #11
 1260 00a6 E5E7     		b	.L120
 1261              	.LVL162:
 1262              	.L132:
2777:Middlewares/Third_Party/FatFs/src/ff.c **** #else
 1263              		.loc 1 2777 0
 1264 00a8 803C     		subs	r4, r4, #128
 1265              	.LVL163:
 1266 00aa 094B     		ldr	r3, .L133+4
 1267 00ac 1C5D     		ldrb	r4, [r3, r4]	@ zero_extendqisi2
 1268              	.LVL164:
 1269 00ae D2E7     		b	.L121
 1270              	.LVL165:
 1271              	.L131:
2798:Middlewares/Third_Party/FatFs/src/ff.c **** 	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 1272              		.loc 1 2798 0 discriminator 1
 1273 00b0 0523     		movs	r3, #5
 1274 00b2 8AF82430 		strb	r3, [r10, #36]
 1275 00b6 C4E7     		b	.L123
 1276              	.L128:
2799:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1277              		.loc 1 2799 0
 1278 00b8 0023     		movs	r3, #0
 1279 00ba C5E7     		b	.L124
 1280              	.LVL166:
ARM GAS  /tmp/ccqUXb8n.s 			page 73


 1281              	.L125:
2771:Middlewares/Third_Party/FatFs/src/ff.c **** 			i = 8; ni = 11;				/* Goto extension */
 1282              		.loc 1 2771 0
 1283 00bc 0620     		movs	r0, #6
 1284              	.LVL167:
 1285              	.L119:
2802:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _USE_LFN != 0 */
2803:Middlewares/Third_Party/FatFs/src/ff.c **** }
 1286              		.loc 1 2803 0
 1287 00be BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1288              	.LVL168:
 1289              	.L126:
2790:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (IsLower(c)) c -= 0x20;	/* To upper */
 1290              		.loc 1 2790 0
 1291 00c2 0620     		movs	r0, #6
 1292 00c4 FBE7     		b	.L119
 1293              	.LVL169:
 1294              	.L127:
2796:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1295              		.loc 1 2796 0
 1296 00c6 0620     		movs	r0, #6
 1297 00c8 F9E7     		b	.L119
 1298              	.L134:
 1299 00ca 00BF     		.align	2
 1300              	.L133:
 1301 00cc 00000000 		.word	.LC0
 1302 00d0 00000000 		.word	.LANCHOR1
 1303              		.cfi_endproc
 1304              	.LFE175:
 1306              		.section	.text.get_ldnumber,"ax",%progbits
 1307              		.align	1
 1308              		.syntax unified
 1309              		.thumb
 1310              		.thumb_func
 1311              		.fpu fpv5-sp-d16
 1313              	get_ldnumber:
 1314              	.LFB177:
2804:Middlewares/Third_Party/FatFs/src/ff.c **** 
2805:Middlewares/Third_Party/FatFs/src/ff.c **** 
2806:Middlewares/Third_Party/FatFs/src/ff.c **** 
2807:Middlewares/Third_Party/FatFs/src/ff.c **** 
2808:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2809:Middlewares/Third_Party/FatFs/src/ff.c **** /* Follow a file path                                                    */
2810:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2811:Middlewares/Third_Party/FatFs/src/ff.c **** 
2812:Middlewares/Third_Party/FatFs/src/ff.c **** static
2813:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
2814:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp,			/* Directory object to return last directory and found object */
2815:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path	/* Full-path string to find a file or directory */
2816:Middlewares/Third_Party/FatFs/src/ff.c **** )
2817:Middlewares/Third_Party/FatFs/src/ff.c **** {
2818:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
2819:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE ns;
2820:Middlewares/Third_Party/FatFs/src/ff.c **** 	_FDID *obj = &dp->obj;
2821:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs = obj->fs;
2822:Middlewares/Third_Party/FatFs/src/ff.c **** 
2823:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  /tmp/ccqUXb8n.s 			page 74


2824:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_RPATH != 0
2825:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (*path != '/' && *path != '\\') {	/* Without heading separator */
2826:Middlewares/Third_Party/FatFs/src/ff.c **** 		obj->sclust = fs->cdir;				/* Start from current directory */
2827:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else
2828:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2829:Middlewares/Third_Party/FatFs/src/ff.c **** 	{										/* With heading separator */
2830:Middlewares/Third_Party/FatFs/src/ff.c **** 		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
2831:Middlewares/Third_Party/FatFs/src/ff.c **** 		obj->sclust = 0;					/* Start from root directory */
2832:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2833:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
2834:Middlewares/Third_Party/FatFs/src/ff.c **** 	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
2835:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_RPATH != 0
2836:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->fs_type == FS_EXFAT && obj->sclust) {	/* Retrieve the sub-directory status if needed */
2837:Middlewares/Third_Party/FatFs/src/ff.c **** 		DIR dj;
2838:Middlewares/Third_Party/FatFs/src/ff.c **** 
2839:Middlewares/Third_Party/FatFs/src/ff.c **** 		obj->c_scl = fs->cdc_scl;
2840:Middlewares/Third_Party/FatFs/src/ff.c **** 		obj->c_size = fs->cdc_size;
2841:Middlewares/Third_Party/FatFs/src/ff.c **** 		obj->c_ofs = fs->cdc_ofs;
2842:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = load_obj_dir(&dj, obj);
2843:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) return res;
2844:Middlewares/Third_Party/FatFs/src/ff.c **** 		obj->objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
2845:Middlewares/Third_Party/FatFs/src/ff.c **** 		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
2846:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2847:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2848:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2849:Middlewares/Third_Party/FatFs/src/ff.c **** 
2850:Middlewares/Third_Party/FatFs/src/ff.c **** 	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
2851:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->fn[NSFLAG] = NS_NONAME;
2852:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = dir_sdi(dp, 0);
2853:Middlewares/Third_Party/FatFs/src/ff.c **** 
2854:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else {								/* Follow path */
2855:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (;;) {
2856:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = create_name(dp, &path);	/* Get a segment name of the path */
2857:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
2858:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = dir_find(dp);				/* Find an object with the segment name */
2859:Middlewares/Third_Party/FatFs/src/ff.c **** 			ns = dp->fn[NSFLAG];
2860:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) {				/* Failed to find the object */
2861:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_NO_FILE) {	/* Object is not found */
2862:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
2863:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
2864:Middlewares/Third_Party/FatFs/src/ff.c **** 						dp->fn[NSFLAG] = NS_NONAME;
2865:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = FR_OK;
2866:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else {							/* Could not find the object */
2867:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
2868:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
2869:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
2870:Middlewares/Third_Party/FatFs/src/ff.c **** 				break;
2871:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2872:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
2873:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Get into the sub-directory */
2874:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
2875:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_NO_PATH; break;
2876:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2877:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
2878:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
2879:Middlewares/Third_Party/FatFs/src/ff.c **** 				obj->c_scl = obj->sclust;
2880:Middlewares/Third_Party/FatFs/src/ff.c **** 				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
ARM GAS  /tmp/ccqUXb8n.s 			page 75


2881:Middlewares/Third_Party/FatFs/src/ff.c **** 				obj->c_ofs = dp->blk_ofs;
2882:Middlewares/Third_Party/FatFs/src/ff.c **** 				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
2883:Middlewares/Third_Party/FatFs/src/ff.c **** 				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
2884:Middlewares/Third_Party/FatFs/src/ff.c **** 				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
2885:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else
2886:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2887:Middlewares/Third_Party/FatFs/src/ff.c **** 			{
2888:Middlewares/Third_Party/FatFs/src/ff.c **** 				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
2889:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2890:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2891:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2892:Middlewares/Third_Party/FatFs/src/ff.c **** 
2893:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
2894:Middlewares/Third_Party/FatFs/src/ff.c **** }
2895:Middlewares/Third_Party/FatFs/src/ff.c **** 
2896:Middlewares/Third_Party/FatFs/src/ff.c **** 
2897:Middlewares/Third_Party/FatFs/src/ff.c **** 
2898:Middlewares/Third_Party/FatFs/src/ff.c **** 
2899:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2900:Middlewares/Third_Party/FatFs/src/ff.c **** /* Get logical drive number from path name                               */
2901:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2902:Middlewares/Third_Party/FatFs/src/ff.c **** 
2903:Middlewares/Third_Party/FatFs/src/ff.c **** static
2904:Middlewares/Third_Party/FatFs/src/ff.c **** int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
2905:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR** path	/* Pointer to pointer to the path name */
2906:Middlewares/Third_Party/FatFs/src/ff.c **** )
2907:Middlewares/Third_Party/FatFs/src/ff.c **** {
 1315              		.loc 1 2907 0
 1316              		.cfi_startproc
 1317              		@ args = 0, pretend = 0, frame = 0
 1318              		@ frame_needed = 0, uses_anonymous_args = 0
 1319              		@ link register save eliminated.
 1320              	.LVL170:
2908:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR *tp, *tt;
2909:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i;
2910:Middlewares/Third_Party/FatFs/src/ff.c **** 	int vol = -1;
2911:Middlewares/Third_Party/FatFs/src/ff.c **** #if _STR_VOLUME_ID		/* Find string drive id */
2912:Middlewares/Third_Party/FatFs/src/ff.c **** 	static const char* const volid[] = {_VOLUME_STRS};
2913:Middlewares/Third_Party/FatFs/src/ff.c **** 	const char *sp;
2914:Middlewares/Third_Party/FatFs/src/ff.c **** 	char c;
2915:Middlewares/Third_Party/FatFs/src/ff.c **** 	TCHAR tc;
2916:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2917:Middlewares/Third_Party/FatFs/src/ff.c **** 
2918:Middlewares/Third_Party/FatFs/src/ff.c **** 
2919:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (*path) {	/* If the pointer is not a null */
 1321              		.loc 1 2919 0
 1322 0000 0168     		ldr	r1, [r0]
 1323 0002 09B1     		cbz	r1, .L147
2920:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the pa
 1324              		.loc 1 2920 0
 1325 0004 0A46     		mov	r2, r1
 1326 0006 03E0     		b	.L136
 1327              	.L147:
2910:Middlewares/Third_Party/FatFs/src/ff.c **** #if _STR_VOLUME_ID		/* Find string drive id */
 1328              		.loc 1 2910 0
 1329 0008 4FF0FF33 		mov	r3, #-1
 1330 000c 08E0     		b	.L144
ARM GAS  /tmp/ccqUXb8n.s 			page 76


 1331              	.LVL171:
 1332              	.L138:
 1333              		.loc 1 2920 0 discriminator 3
 1334 000e 0132     		adds	r2, r2, #1
 1335              	.LVL172:
 1336              	.L136:
 1337              		.loc 1 2920 0 is_stmt 0 discriminator 1
 1338 0010 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1339 0012 3A2B     		cmp	r3, #58
 1340 0014 18BF     		it	ne
 1341 0016 202B     		cmpne	r3, #32
 1342 0018 F9D8     		bhi	.L138
2921:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (*tt == ':') {	/* If a ':' is exist in the path name */
 1343              		.loc 1 2921 0 is_stmt 1
 1344 001a 3A2B     		cmp	r3, #58
 1345 001c 02D0     		beq	.L148
2922:Middlewares/Third_Party/FatFs/src/ff.c **** 			tp = *path;
2923:Middlewares/Third_Party/FatFs/src/ff.c **** 			i = *tp++ - '0';
2924:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
2925:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
2926:Middlewares/Third_Party/FatFs/src/ff.c **** 					vol = (int)i;
2927:Middlewares/Third_Party/FatFs/src/ff.c **** 					*path = ++tt;
2928:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
2929:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2930:Middlewares/Third_Party/FatFs/src/ff.c **** #if _STR_VOLUME_ID
2931:Middlewares/Third_Party/FatFs/src/ff.c **** 			 else {	/* No numeric drive number, find string drive id */
2932:Middlewares/Third_Party/FatFs/src/ff.c **** 				i = 0; tt++;
2933:Middlewares/Third_Party/FatFs/src/ff.c **** 				do {
2934:Middlewares/Third_Party/FatFs/src/ff.c **** 					sp = volid[i]; tp = *path;
2935:Middlewares/Third_Party/FatFs/src/ff.c **** 					do {	/* Compare a string drive id with path name */
2936:Middlewares/Third_Party/FatFs/src/ff.c **** 						c = *sp++; tc = *tp++;
2937:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (IsLower(tc)) tc -= 0x20;
2938:Middlewares/Third_Party/FatFs/src/ff.c **** 					} while (c && (TCHAR)c == tc);
2939:Middlewares/Third_Party/FatFs/src/ff.c **** 				} while ((c || tp != tt) && ++i < _VOLUMES);	/* Repeat for each id until pattern match */
2940:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
2941:Middlewares/Third_Party/FatFs/src/ff.c **** 					vol = (int)i;
2942:Middlewares/Third_Party/FatFs/src/ff.c **** 					*path = tt;
2943:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
2944:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2945:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2946:Middlewares/Third_Party/FatFs/src/ff.c **** 			return vol;
2947:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2948:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_RPATH != 0 && _VOLUMES >= 2
2949:Middlewares/Third_Party/FatFs/src/ff.c **** 		vol = CurrVol;	/* Current drive */
2950:Middlewares/Third_Party/FatFs/src/ff.c **** #else
2951:Middlewares/Third_Party/FatFs/src/ff.c **** 		vol = 0;		/* Drive 0 */
 1346              		.loc 1 2951 0
 1347 001e 0023     		movs	r3, #0
 1348              	.LVL173:
 1349              	.L144:
2952:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2953:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2954:Middlewares/Third_Party/FatFs/src/ff.c **** 	return vol;
2955:Middlewares/Third_Party/FatFs/src/ff.c **** }
 1350              		.loc 1 2955 0
 1351 0020 1846     		mov	r0, r3
 1352              	.LVL174:
ARM GAS  /tmp/ccqUXb8n.s 			page 77


 1353 0022 7047     		bx	lr
 1354              	.LVL175:
 1355              	.L148:
2907:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR *tp, *tt;
 1356              		.loc 1 2907 0
 1357 0024 10B4     		push	{r4}
 1358              	.LCFI17:
 1359              		.cfi_def_cfa_offset 4
 1360              		.cfi_offset 4, -4
 1361              	.LVL176:
2923:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 1362              		.loc 1 2923 0
 1363 0026 4C1C     		adds	r4, r1, #1
 1364              	.LVL177:
 1365 0028 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 1366 002a 303B     		subs	r3, r3, #48
 1367              	.LVL178:
2924:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 1368              		.loc 1 2924 0
 1369 002c 092B     		cmp	r3, #9
 1370 002e 98BF     		it	ls
 1371 0030 A242     		cmpls	r2, r4
 1372 0032 06D1     		bne	.L141
2925:Middlewares/Third_Party/FatFs/src/ff.c **** 					vol = (int)i;
 1373              		.loc 1 2925 0
 1374 0034 43B9     		cbnz	r3, .L142
 1375              	.LVL179:
2927:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 1376              		.loc 1 2927 0
 1377 0036 0132     		adds	r2, r2, #1
 1378              	.LVL180:
 1379 0038 0260     		str	r2, [r0]
 1380              	.LVL181:
 1381              	.L135:
 1382              		.loc 1 2955 0
 1383 003a 1846     		mov	r0, r3
 1384              	.LVL182:
 1385 003c 5DF8044B 		ldr	r4, [sp], #4
 1386              	.LCFI18:
 1387              		.cfi_remember_state
 1388              		.cfi_restore 4
 1389              		.cfi_def_cfa_offset 0
 1390              	.LVL183:
 1391 0040 7047     		bx	lr
 1392              	.LVL184:
 1393              	.L141:
 1394              	.LCFI19:
 1395              		.cfi_restore_state
2910:Middlewares/Third_Party/FatFs/src/ff.c **** #if _STR_VOLUME_ID		/* Find string drive id */
 1396              		.loc 1 2910 0
 1397 0042 4FF0FF33 		mov	r3, #-1
 1398              	.LVL185:
 1399 0046 F8E7     		b	.L135
 1400              	.LVL186:
 1401              	.L142:
 1402 0048 4FF0FF33 		mov	r3, #-1
 1403              	.LVL187:
ARM GAS  /tmp/ccqUXb8n.s 			page 78


 1404 004c F5E7     		b	.L135
 1405              		.cfi_endproc
 1406              	.LFE177:
 1408              		.section	.text.putc_init,"ax",%progbits
 1409              		.align	1
 1410              		.syntax unified
 1411              		.thumb
 1412              		.thumb_func
 1413              		.fpu fpv5-sp-d16
 1415              	putc_init:
 1416              	.LFB201:
2956:Middlewares/Third_Party/FatFs/src/ff.c **** 
2957:Middlewares/Third_Party/FatFs/src/ff.c **** 
2958:Middlewares/Third_Party/FatFs/src/ff.c **** 
2959:Middlewares/Third_Party/FatFs/src/ff.c **** 
2960:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2961:Middlewares/Third_Party/FatFs/src/ff.c **** /* Load a sector and check if it is an FAT boot sector                   */
2962:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2963:Middlewares/Third_Party/FatFs/src/ff.c **** 
2964:Middlewares/Third_Party/FatFs/src/ff.c **** static
2965:Middlewares/Third_Party/FatFs/src/ff.c **** BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
2966:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS* fs,	/* File system object */
2967:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
2968:Middlewares/Third_Party/FatFs/src/ff.c **** )
2969:Middlewares/Third_Party/FatFs/src/ff.c **** {
2970:Middlewares/Third_Party/FatFs/src/ff.c **** 	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
2971:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
2972:Middlewares/Third_Party/FatFs/src/ff.c **** 
2973:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed 
2974:Middlewares/Third_Party/FatFs/src/ff.c **** 
2975:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90
2976:Middlewares/Third_Party/FatFs/src/ff.c **** 		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string *
2977:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
2978:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2979:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
2980:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
2981:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2982:Middlewares/Third_Party/FatFs/src/ff.c **** 	return 2;
2983:Middlewares/Third_Party/FatFs/src/ff.c **** }
2984:Middlewares/Third_Party/FatFs/src/ff.c **** 
2985:Middlewares/Third_Party/FatFs/src/ff.c **** 
2986:Middlewares/Third_Party/FatFs/src/ff.c **** 
2987:Middlewares/Third_Party/FatFs/src/ff.c **** 
2988:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2989:Middlewares/Third_Party/FatFs/src/ff.c **** /* Find logical drive and check if the volume is mounted                 */
2990:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2991:Middlewares/Third_Party/FatFs/src/ff.c **** 
2992:Middlewares/Third_Party/FatFs/src/ff.c **** static
2993:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
2994:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
2995:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS** rfs,		/* Pointer to pointer to the found file system object */
2996:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE mode			/* !=0: Check write protection for write access */
2997:Middlewares/Third_Party/FatFs/src/ff.c **** )
2998:Middlewares/Third_Party/FatFs/src/ff.c **** {
2999:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE fmt, *pt;
3000:Middlewares/Third_Party/FatFs/src/ff.c **** 	int vol;
3001:Middlewares/Third_Party/FatFs/src/ff.c **** 	DSTATUS stat;
ARM GAS  /tmp/ccqUXb8n.s 			page 79


3002:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];
3003:Middlewares/Third_Party/FatFs/src/ff.c **** 	WORD nrsv;
3004:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
3005:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i;
3006:Middlewares/Third_Party/FatFs/src/ff.c **** 
3007:Middlewares/Third_Party/FatFs/src/ff.c **** 
3008:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get logical drive number */
3009:Middlewares/Third_Party/FatFs/src/ff.c **** 	*rfs = 0;
3010:Middlewares/Third_Party/FatFs/src/ff.c **** 	vol = get_ldnumber(path);
3011:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
3012:Middlewares/Third_Party/FatFs/src/ff.c **** 
3013:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Check if the file system object is valid or not */
3014:Middlewares/Third_Party/FatFs/src/ff.c **** 	fs = FatFs[vol];					/* Get pointer to the file system object */
3015:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
3016:Middlewares/Third_Party/FatFs/src/ff.c **** 
3017:Middlewares/Third_Party/FatFs/src/ff.c **** 	ENTER_FF(fs);						/* Lock the volume */
3018:Middlewares/Third_Party/FatFs/src/ff.c **** 	*rfs = fs;							/* Return pointer to the file system object */
3019:Middlewares/Third_Party/FatFs/src/ff.c **** 
3020:Middlewares/Third_Party/FatFs/src/ff.c **** 	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
3021:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->fs_type) {					/* If the volume has been mounted */
3022:Middlewares/Third_Party/FatFs/src/ff.c **** 		stat = disk_status(fs->drv);
3023:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
3024:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
3025:Middlewares/Third_Party/FatFs/src/ff.c **** 				return FR_WRITE_PROTECTED;
3026:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3027:Middlewares/Third_Party/FatFs/src/ff.c **** 			return FR_OK;				/* The file system object is valid */
3028:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3029:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3030:Middlewares/Third_Party/FatFs/src/ff.c **** 
3031:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* The file system object is not valid. */
3032:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */
3033:Middlewares/Third_Party/FatFs/src/ff.c **** 
3034:Middlewares/Third_Party/FatFs/src/ff.c **** 	fs->fs_type = 0;					/* Clear the file system object */
3035:Middlewares/Third_Party/FatFs/src/ff.c **** 	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
3036:Middlewares/Third_Party/FatFs/src/ff.c **** 	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
3037:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
3038:Middlewares/Third_Party/FatFs/src/ff.c **** 		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
3039:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3040:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
3041:Middlewares/Third_Party/FatFs/src/ff.c **** 		return FR_WRITE_PROTECTED;
3042:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3043:Middlewares/Third_Party/FatFs/src/ff.c **** #if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
3044:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
3045:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
3046:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3047:Middlewares/Third_Party/FatFs/src/ff.c **** 
3048:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
3049:Middlewares/Third_Party/FatFs/src/ff.c **** 	bsect = 0;
3050:Middlewares/Third_Party/FatFs/src/ff.c **** 	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
3051:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
3052:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (i = 0; i < 4; i++) {		/* Get partition offset */
3053:Middlewares/Third_Party/FatFs/src/ff.c **** 			pt = fs->win + (MBR_Table + i * SZ_PTE);
3054:Middlewares/Third_Party/FatFs/src/ff.c **** 			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
3055:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3056:Middlewares/Third_Party/FatFs/src/ff.c **** 		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
3057:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i) i--;
3058:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {							/* Find an FAT volume */
ARM GAS  /tmp/ccqUXb8n.s 			page 80


3059:Middlewares/Third_Party/FatFs/src/ff.c **** 			bsect = br[i];
3060:Middlewares/Third_Party/FatFs/src/ff.c **** 			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
3061:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
3062:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3063:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
3064:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
3065:Middlewares/Third_Party/FatFs/src/ff.c **** 
3066:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* An FAT volume is found (bsect). Following code initializes the file system object */
3067:Middlewares/Third_Party/FatFs/src/ff.c **** 
3068:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
3069:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fmt == 1) {
3070:Middlewares/Third_Party/FatFs/src/ff.c **** 		QWORD maxlba;
3071:Middlewares/Third_Party/FatFs/src/ff.c **** 
3072:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
3073:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
3074:Middlewares/Third_Party/FatFs/src/ff.c **** 
3075:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Mu
3076:Middlewares/Third_Party/FatFs/src/ff.c **** 
3077:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physica
3078:Middlewares/Third_Party/FatFs/src/ff.c **** 			return FR_NO_FILESYSTEM;
3079:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3080:Middlewares/Third_Party/FatFs/src/ff.c **** 
3081:Middlewares/Third_Party/FatFs/src/ff.c **** 		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
3082:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
3083:Middlewares/Third_Party/FatFs/src/ff.c **** 
3084:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
3085:Middlewares/Third_Party/FatFs/src/ff.c **** 
3086:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
3087:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
3088:Middlewares/Third_Party/FatFs/src/ff.c **** 
3089:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
3090:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
3091:Middlewares/Third_Party/FatFs/src/ff.c **** 
3092:Middlewares/Third_Party/FatFs/src/ff.c **** 		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
3093:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
3094:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->n_fatent = nclst + 2;
3095:Middlewares/Third_Party/FatFs/src/ff.c **** 
3096:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Boundaries and Limits */
3097:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->volbase = bsect;
3098:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
3099:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
3100:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size mu
3101:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
3102:Middlewares/Third_Party/FatFs/src/ff.c **** 
3103:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Check if bitmap location is in assumption (at the first cluster) */
3104:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
3105:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (i = 0; i < SS(fs); i += SZDIRE) {
3106:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? *
3107:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3108:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i == SS(fs)) return FR_NO_FILESYSTEM;
3109:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
3110:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
3111:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3112:Middlewares/Third_Party/FatFs/src/ff.c **** 		fmt = FS_EXFAT;			/* FAT sub-type */
3113:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else
3114:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* _FS_EXFAT */
3115:Middlewares/Third_Party/FatFs/src/ff.c **** 	{
ARM GAS  /tmp/ccqUXb8n.s 			page 81


3116:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must
3117:Middlewares/Third_Party/FatFs/src/ff.c **** 
3118:Middlewares/Third_Party/FatFs/src/ff.c **** 		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
3119:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
3120:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->fsize = fasize;
3121:Middlewares/Third_Party/FatFs/src/ff.c **** 
3122:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
3123:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
3124:Middlewares/Third_Party/FatFs/src/ff.c **** 		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
3125:Middlewares/Third_Party/FatFs/src/ff.c **** 
3126:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
3127:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power o
3128:Middlewares/Third_Party/FatFs/src/ff.c **** 
3129:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
3130:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
3131:Middlewares/Third_Party/FatFs/src/ff.c **** 
3132:Middlewares/Third_Party/FatFs/src/ff.c **** 		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
3133:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
3134:Middlewares/Third_Party/FatFs/src/ff.c **** 
3135:Middlewares/Third_Party/FatFs/src/ff.c **** 		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
3136:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
3137:Middlewares/Third_Party/FatFs/src/ff.c **** 
3138:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Determine the FAT sub type */
3139:Middlewares/Third_Party/FatFs/src/ff.c **** 		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
3140:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
3141:Middlewares/Third_Party/FatFs/src/ff.c **** 		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
3142:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
3143:Middlewares/Third_Party/FatFs/src/ff.c **** 		fmt = FS_FAT32;
3144:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
3145:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
3146:Middlewares/Third_Party/FatFs/src/ff.c **** 
3147:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Boundaries and Limits */
3148:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
3149:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->volbase = bsect;							/* Volume start sector */
3150:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
3151:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->database = bsect + sysect;					/* Data start sector */
3152:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fmt == FS_FAT32) {
3153:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0
3154:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
3155:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
3156:Middlewares/Third_Party/FatFs/src/ff.c **** 			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
3157:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
3158:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
3159:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
3160:Middlewares/Third_Party/FatFs/src/ff.c **** 			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
3161:Middlewares/Third_Party/FatFs/src/ff.c **** 				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
3162:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3163:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not
3164:Middlewares/Third_Party/FatFs/src/ff.c **** 
3165:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
3166:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Get FSINFO if available */
3167:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
3168:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->fsi_flag = 0x80;
3169:Middlewares/Third_Party/FatFs/src/ff.c **** #if (_FS_NOFSINFO & 3) != 3
3170:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
3171:Middlewares/Third_Party/FatFs/src/ff.c **** 			&& ld_word(fs->win + BPB_FSInfo32) == 1
3172:Middlewares/Third_Party/FatFs/src/ff.c **** 			&& move_window(fs, bsect + 1) == FR_OK)
ARM GAS  /tmp/ccqUXb8n.s 			page 82


3173:Middlewares/Third_Party/FatFs/src/ff.c **** 		{
3174:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->fsi_flag = 0;
3175:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
3176:Middlewares/Third_Party/FatFs/src/ff.c **** 				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
3177:Middlewares/Third_Party/FatFs/src/ff.c **** 				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
3178:Middlewares/Third_Party/FatFs/src/ff.c **** 			{
3179:Middlewares/Third_Party/FatFs/src/ff.c **** #if (_FS_NOFSINFO & 1) == 0
3180:Middlewares/Third_Party/FatFs/src/ff.c **** 				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
3181:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3182:Middlewares/Third_Party/FatFs/src/ff.c **** #if (_FS_NOFSINFO & 2) == 0
3183:Middlewares/Third_Party/FatFs/src/ff.c **** 				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
3184:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3185:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3186:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3187:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* (_FS_NOFSINFO & 3) != 3 */
3188:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* !_FS_READONLY */
3189:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3190:Middlewares/Third_Party/FatFs/src/ff.c **** 
3191:Middlewares/Third_Party/FatFs/src/ff.c **** 	fs->fs_type = fmt;		/* FAT sub-type */
3192:Middlewares/Third_Party/FatFs/src/ff.c **** 	fs->id = ++Fsid;		/* File system mount ID */
3193:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN == 1
3194:Middlewares/Third_Party/FatFs/src/ff.c **** 	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
3195:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
3196:Middlewares/Third_Party/FatFs/src/ff.c **** 	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
3197:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3198:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3199:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_RPATH != 0
3200:Middlewares/Third_Party/FatFs/src/ff.c **** 	fs->cdir = 0;			/* Initialize current directory */
3201:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3202:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0			/* Clear file lock semaphores */
3203:Middlewares/Third_Party/FatFs/src/ff.c **** 	clear_lock(fs);
3204:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3205:Middlewares/Third_Party/FatFs/src/ff.c **** 	return FR_OK;
3206:Middlewares/Third_Party/FatFs/src/ff.c **** }
3207:Middlewares/Third_Party/FatFs/src/ff.c **** 
3208:Middlewares/Third_Party/FatFs/src/ff.c **** 
3209:Middlewares/Third_Party/FatFs/src/ff.c **** 
3210:Middlewares/Third_Party/FatFs/src/ff.c **** 
3211:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3212:Middlewares/Third_Party/FatFs/src/ff.c **** /* Check if the file/directory object is valid or not                    */
3213:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3214:Middlewares/Third_Party/FatFs/src/ff.c **** 
3215:Middlewares/Third_Party/FatFs/src/ff.c **** static
3216:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
3217:Middlewares/Third_Party/FatFs/src/ff.c **** 	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
3218:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
3219:Middlewares/Third_Party/FatFs/src/ff.c **** )
3220:Middlewares/Third_Party/FatFs/src/ff.c **** {
3221:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
3222:Middlewares/Third_Party/FatFs/src/ff.c **** 
3223:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) 
3224:Middlewares/Third_Party/FatFs/src/ff.c **** 		*fs = 0;
3225:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = FR_INVALID_OBJECT;	/* The object is invalid */
3226:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else {
3227:Middlewares/Third_Party/FatFs/src/ff.c **** 		*fs = obj->fs;			/* Owner file sytem object */
3228:Middlewares/Third_Party/FatFs/src/ff.c **** 		ENTER_FF(obj->fs);		/* Lock file system */
3229:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = FR_OK;			/* Valid object */
ARM GAS  /tmp/ccqUXb8n.s 			page 83


3230:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3231:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
3232:Middlewares/Third_Party/FatFs/src/ff.c **** }
3233:Middlewares/Third_Party/FatFs/src/ff.c **** 
3234:Middlewares/Third_Party/FatFs/src/ff.c **** 
3235:Middlewares/Third_Party/FatFs/src/ff.c **** 
3236:Middlewares/Third_Party/FatFs/src/ff.c **** 
3237:Middlewares/Third_Party/FatFs/src/ff.c **** /*---------------------------------------------------------------------------
3238:Middlewares/Third_Party/FatFs/src/ff.c **** 
3239:Middlewares/Third_Party/FatFs/src/ff.c ****    Public Functions (FatFs API)
3240:Middlewares/Third_Party/FatFs/src/ff.c **** 
3241:Middlewares/Third_Party/FatFs/src/ff.c **** ----------------------------------------------------------------------------*/
3242:Middlewares/Third_Party/FatFs/src/ff.c **** 
3243:Middlewares/Third_Party/FatFs/src/ff.c **** 
3244:Middlewares/Third_Party/FatFs/src/ff.c **** 
3245:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3246:Middlewares/Third_Party/FatFs/src/ff.c **** /* Mount/Unmount a Logical Drive                                         */
3247:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3248:Middlewares/Third_Party/FatFs/src/ff.c **** 
3249:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_mount (
3250:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
3251:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
3252:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
3253:Middlewares/Third_Party/FatFs/src/ff.c **** )
3254:Middlewares/Third_Party/FatFs/src/ff.c **** {
3255:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *cfs;
3256:Middlewares/Third_Party/FatFs/src/ff.c **** 	int vol;
3257:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
3258:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR *rp = path;
3259:Middlewares/Third_Party/FatFs/src/ff.c **** 
3260:Middlewares/Third_Party/FatFs/src/ff.c **** 
3261:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get logical drive number */
3262:Middlewares/Third_Party/FatFs/src/ff.c **** 	vol = get_ldnumber(&rp);
3263:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
3264:Middlewares/Third_Party/FatFs/src/ff.c **** 	cfs = FatFs[vol];					/* Pointer to fs object */
3265:Middlewares/Third_Party/FatFs/src/ff.c **** 
3266:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (cfs) {
3267:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
3268:Middlewares/Third_Party/FatFs/src/ff.c **** 		clear_lock(cfs);
3269:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3270:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_REENTRANT						/* Discard sync object of the current volume */
3271:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
3272:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3273:Middlewares/Third_Party/FatFs/src/ff.c **** 		cfs->fs_type = 0;				/* Clear old fs object */
3274:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3275:Middlewares/Third_Party/FatFs/src/ff.c **** 
3276:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs) {
3277:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->fs_type = 0;				/* Clear new fs object */
3278:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_REENTRANT						/* Create sync object for the new volume */
3279:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
3280:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3281:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3282:Middlewares/Third_Party/FatFs/src/ff.c **** 	FatFs[vol] = fs;					/* Register new fs object */
3283:Middlewares/Third_Party/FatFs/src/ff.c **** 
3284:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
3285:Middlewares/Third_Party/FatFs/src/ff.c **** 
3286:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
ARM GAS  /tmp/ccqUXb8n.s 			page 84


3287:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
3288:Middlewares/Third_Party/FatFs/src/ff.c **** }
3289:Middlewares/Third_Party/FatFs/src/ff.c **** 
3290:Middlewares/Third_Party/FatFs/src/ff.c **** 
3291:Middlewares/Third_Party/FatFs/src/ff.c **** 
3292:Middlewares/Third_Party/FatFs/src/ff.c **** 
3293:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3294:Middlewares/Third_Party/FatFs/src/ff.c **** /* Open or Create a File                                                 */
3295:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3296:Middlewares/Third_Party/FatFs/src/ff.c **** 
3297:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_open (
3298:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp,			/* Pointer to the blank file object */
3299:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path,	/* Pointer to the file name */
3300:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE mode			/* Access mode and file open mode flags */
3301:Middlewares/Third_Party/FatFs/src/ff.c **** )
3302:Middlewares/Third_Party/FatFs/src/ff.c **** {
3303:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
3304:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR dj;
3305:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
3306:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
3307:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD dw, cl, bcs, clst, sc;
3308:Middlewares/Third_Party/FatFs/src/ff.c **** 	FSIZE_t ofs;
3309:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3310:Middlewares/Third_Party/FatFs/src/ff.c **** 	DEF_NAMBUF
3311:Middlewares/Third_Party/FatFs/src/ff.c **** 
3312:Middlewares/Third_Party/FatFs/src/ff.c **** 
3313:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!fp) return FR_INVALID_OBJECT;
3314:Middlewares/Third_Party/FatFs/src/ff.c **** 
3315:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get logical drive */
3316:Middlewares/Third_Party/FatFs/src/ff.c **** 	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_A
3317:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&path, &fs, mode);
3318:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
3319:Middlewares/Third_Party/FatFs/src/ff.c **** 		dj.obj.fs = fs;
3320:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
3321:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
3322:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY	/* R/W configuration */
3323:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
3324:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
3325:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_INVALID_NAME;
3326:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3327:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
3328:Middlewares/Third_Party/FatFs/src/ff.c **** 			else {
3329:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
3330:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3331:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3332:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3333:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Create or Open a file */
3334:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
3335:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) {					/* No file, create new */
3336:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
3337:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
3338:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
3339:Middlewares/Third_Party/FatFs/src/ff.c **** #else
3340:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = dir_register(&dj);
3341:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3342:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3343:Middlewares/Third_Party/FatFs/src/ff.c **** 				mode |= FA_CREATE_ALWAYS;		/* File is created */
ARM GAS  /tmp/ccqUXb8n.s 			page 85


3344:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3345:Middlewares/Third_Party/FatFs/src/ff.c **** 			else {								/* Any object is already existing */
3346:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
3347:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = FR_DENIED;
3348:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {
3349:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
3350:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3351:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3352:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
3353:Middlewares/Third_Party/FatFs/src/ff.c **** 				dw = GET_FATTIME();
3354:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
3355:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fs->fs_type == FS_EXFAT) {
3356:Middlewares/Third_Party/FatFs/src/ff.c **** 					/* Get current allocation info */
3357:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->obj.fs = fs;
3358:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
3359:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
3360:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
3361:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->obj.n_frag = 0;
3362:Middlewares/Third_Party/FatFs/src/ff.c **** 					/* Initialize directory entry block */
3363:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
3364:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->dirbuf[XDIR_CrtTime10] = 0;
3365:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
3366:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->dirbuf[XDIR_ModTime10] = 0;
3367:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
3368:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
3369:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_qword(fs->dirbuf + XDIR_FileSize, 0);
3370:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
3371:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->dirbuf[XDIR_GenFlags] = 1;
3372:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = store_xdir(&dj);
3373:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
3374:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
3375:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
3376:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
3377:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else
3378:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3379:Middlewares/Third_Party/FatFs/src/ff.c **** 				{
3380:Middlewares/Third_Party/FatFs/src/ff.c **** 					/* Clean directory info */
3381:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
3382:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
3383:Middlewares/Third_Party/FatFs/src/ff.c **** 					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
3384:Middlewares/Third_Party/FatFs/src/ff.c **** 					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
3385:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
3386:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(dj.dir + DIR_FileSize, 0);
3387:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->wflag = 1;
3388:Middlewares/Third_Party/FatFs/src/ff.c **** 
3389:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (cl) {							/* Remove the cluster chain if exist */
3390:Middlewares/Third_Party/FatFs/src/ff.c **** 						dw = fs->winsect;
3391:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = remove_chain(&dj.obj, cl, 0);
3392:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (res == FR_OK) {
3393:Middlewares/Third_Party/FatFs/src/ff.c **** 							res = move_window(fs, dw);
3394:Middlewares/Third_Party/FatFs/src/ff.c **** 							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
3395:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
3396:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
3397:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3398:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3399:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3400:Middlewares/Third_Party/FatFs/src/ff.c **** 		else {	/* Open an existing file */
ARM GAS  /tmp/ccqUXb8n.s 			page 86


3401:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) {					/* Following succeeded */
3402:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
3403:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = FR_NO_FILE;
3404:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {
3405:Middlewares/Third_Party/FatFs/src/ff.c **** 					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
3406:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = FR_DENIED;
3407:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
3408:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3409:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3410:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3411:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
3412:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
3413:Middlewares/Third_Party/FatFs/src/ff.c **** 				mode |= FA_MODIFIED;
3414:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
3415:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->dir_ptr = dj.dir;
3416:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
3417:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
3418:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!fp->obj.lockid) res = FR_INT_ERR;
3419:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3420:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3421:Middlewares/Third_Party/FatFs/src/ff.c **** #else		/* R/O configuration */
3422:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
3423:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
3424:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_INVALID_NAME;
3425:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
3426:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
3427:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = FR_NO_FILE;
3428:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3429:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3430:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3431:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3432:Middlewares/Third_Party/FatFs/src/ff.c **** 
3433:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
3434:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
3435:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
3436:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
3437:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
3438:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->obj.c_ofs = dj.blk_ofs;
3439:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
3440:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
3441:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
3442:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else
3443:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3444:Middlewares/Third_Party/FatFs/src/ff.c **** 			{
3445:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
3446:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
3447:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3448:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_FASTSEEK
3449:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->cltbl = 0;			/* Disable fast seek mode */
3450:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3451:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->obj.fs = fs;	 	/* Validate the file object */
3452:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->obj.id = fs->id;
3453:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->flag = mode;		/* Set file access mode */
3454:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->err = 0;			/* Clear error flag */
3455:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->sect = 0;			/* Invalidate current data sector */
3456:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->fptr = 0;			/* Set file pointer top of the file */
3457:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
ARM GAS  /tmp/ccqUXb8n.s 			page 87


3458:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_TINY
3459:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
3460:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3461:Middlewares/Third_Party/FatFs/src/ff.c **** 			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is sp
3462:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->fptr = fp->obj.objsize;			/* Offset to seek */
3463:Middlewares/Third_Party/FatFs/src/ff.c **** 				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
3464:Middlewares/Third_Party/FatFs/src/ff.c **** 				clst = fp->obj.sclust;				/* Follow the cluster chain */
3465:Middlewares/Third_Party/FatFs/src/ff.c **** 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
3466:Middlewares/Third_Party/FatFs/src/ff.c **** 					clst = get_fat(&fp->obj, clst);
3467:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst <= 1) res = FR_INT_ERR;
3468:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
3469:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3470:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->clust = clst;
3471:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
3472:Middlewares/Third_Party/FatFs/src/ff.c **** 					if ((sc = clust2sect(fs, clst)) == 0) {
3473:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = FR_INT_ERR;
3474:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else {
3475:Middlewares/Third_Party/FatFs/src/ff.c **** 						fp->sect = sc + (DWORD)(ofs / SS(fs));
3476:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_TINY
3477:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
3478:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3479:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
3480:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3481:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3482:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3483:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3484:Middlewares/Third_Party/FatFs/src/ff.c **** 
3485:Middlewares/Third_Party/FatFs/src/ff.c **** 		FREE_NAMBUF();
3486:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3487:Middlewares/Third_Party/FatFs/src/ff.c **** 
3488:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
3489:Middlewares/Third_Party/FatFs/src/ff.c **** 
3490:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
3491:Middlewares/Third_Party/FatFs/src/ff.c **** }
3492:Middlewares/Third_Party/FatFs/src/ff.c **** 
3493:Middlewares/Third_Party/FatFs/src/ff.c **** 
3494:Middlewares/Third_Party/FatFs/src/ff.c **** 
3495:Middlewares/Third_Party/FatFs/src/ff.c **** 
3496:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3497:Middlewares/Third_Party/FatFs/src/ff.c **** /* Read File                                                             */
3498:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3499:Middlewares/Third_Party/FatFs/src/ff.c **** 
3500:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_read (
3501:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp, 	/* Pointer to the file object */
3502:Middlewares/Third_Party/FatFs/src/ff.c **** 	void* buff,	/* Pointer to data buffer */
3503:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT btr,	/* Number of bytes to read */
3504:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT* br	/* Pointer to number of bytes read */
3505:Middlewares/Third_Party/FatFs/src/ff.c **** )
3506:Middlewares/Third_Party/FatFs/src/ff.c **** {
3507:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
3508:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
3509:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD clst, sect;
3510:Middlewares/Third_Party/FatFs/src/ff.c **** 	FSIZE_t remain;
3511:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT rcnt, cc, csect;
3512:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE *rbuff = (BYTE*)buff;
3513:Middlewares/Third_Party/FatFs/src/ff.c **** 
3514:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  /tmp/ccqUXb8n.s 			page 88


3515:Middlewares/Third_Party/FatFs/src/ff.c **** 	*br = 0;	/* Clear read byte counter */
3516:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
3517:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
3518:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
3519:Middlewares/Third_Party/FatFs/src/ff.c **** 	remain = fp->obj.objsize - fp->fptr;
3520:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
3521:Middlewares/Third_Party/FatFs/src/ff.c **** 
3522:Middlewares/Third_Party/FatFs/src/ff.c **** 	for ( ;  btr;								/* Repeat until all data read */
3523:Middlewares/Third_Party/FatFs/src/ff.c **** 		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
3524:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
3525:Middlewares/Third_Party/FatFs/src/ff.c **** 			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
3526:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (csect == 0) {					/* On the cluster boundary? */
3527:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fp->fptr == 0) {			/* On the top of the file? */
3528:Middlewares/Third_Party/FatFs/src/ff.c **** 					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
3529:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {						/* Middle or end of the file */
3530:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_FASTSEEK
3531:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (fp->cltbl) {
3532:Middlewares/Third_Party/FatFs/src/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
3533:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else
3534:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3535:Middlewares/Third_Party/FatFs/src/ff.c **** 					{
3536:Middlewares/Third_Party/FatFs/src/ff.c **** 						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
3537:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
3538:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3539:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst < 2) ABORT(fs, FR_INT_ERR);
3540:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
3541:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->clust = clst;				/* Update current cluster */
3542:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3543:Middlewares/Third_Party/FatFs/src/ff.c **** 			sect = clust2sect(fs, fp->clust);	/* Get current sector */
3544:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!sect) ABORT(fs, FR_INT_ERR);
3545:Middlewares/Third_Party/FatFs/src/ff.c **** 			sect += csect;
3546:Middlewares/Third_Party/FatFs/src/ff.c **** 			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
3547:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (cc) {							/* Read maximum contiguous sectors directly */
3548:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
3549:Middlewares/Third_Party/FatFs/src/ff.c **** 					cc = fs->csize - csect;
3550:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3551:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
3552:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it 
3553:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_TINY
3554:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fs->wflag && fs->winsect - sect < cc) {
3555:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
3556:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3557:Middlewares/Third_Party/FatFs/src/ff.c **** #else
3558:Middlewares/Third_Party/FatFs/src/ff.c **** 				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
3559:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
3560:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3561:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3562:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3563:Middlewares/Third_Party/FatFs/src/ff.c **** 				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
3564:Middlewares/Third_Party/FatFs/src/ff.c **** 				continue;
3565:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3566:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_TINY
3567:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fp->sect != sect) {			/* Load data sector if not in cache */
3568:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
3569:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
3570:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
3571:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->flag &= (BYTE)~FA_DIRTY;
ARM GAS  /tmp/ccqUXb8n.s 			page 89


3572:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3573:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3574:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cach
3575:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3576:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3577:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->sect = sect;
3578:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3579:Middlewares/Third_Party/FatFs/src/ff.c **** 		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
3580:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
3581:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_TINY
3582:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
3583:Middlewares/Third_Party/FatFs/src/ff.c **** 		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
3584:Middlewares/Third_Party/FatFs/src/ff.c **** #else
3585:Middlewares/Third_Party/FatFs/src/ff.c **** 		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
3586:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3587:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3588:Middlewares/Third_Party/FatFs/src/ff.c **** 
3589:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, FR_OK);
3590:Middlewares/Third_Party/FatFs/src/ff.c **** }
3591:Middlewares/Third_Party/FatFs/src/ff.c **** 
3592:Middlewares/Third_Party/FatFs/src/ff.c **** 
3593:Middlewares/Third_Party/FatFs/src/ff.c **** 
3594:Middlewares/Third_Party/FatFs/src/ff.c **** 
3595:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
3596:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3597:Middlewares/Third_Party/FatFs/src/ff.c **** /* Write File                                                            */
3598:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3599:Middlewares/Third_Party/FatFs/src/ff.c **** 
3600:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_write (
3601:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp,			/* Pointer to the file object */
3602:Middlewares/Third_Party/FatFs/src/ff.c **** 	const void* buff,	/* Pointer to the data to be written */
3603:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT btw,			/* Number of bytes to write */
3604:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT* bw			/* Pointer to number of bytes written */
3605:Middlewares/Third_Party/FatFs/src/ff.c **** )
3606:Middlewares/Third_Party/FatFs/src/ff.c **** {
3607:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
3608:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
3609:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD clst, sect;
3610:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT wcnt, cc, csect;
3611:Middlewares/Third_Party/FatFs/src/ff.c **** 	const BYTE *wbuff = (const BYTE*)buff;
3612:Middlewares/Third_Party/FatFs/src/ff.c **** 
3613:Middlewares/Third_Party/FatFs/src/ff.c **** 
3614:Middlewares/Third_Party/FatFs/src/ff.c **** 	*bw = 0;	/* Clear write byte counter */
3615:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
3616:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
3617:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
3618:Middlewares/Third_Party/FatFs/src/ff.c **** 
3619:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
3620:Middlewares/Third_Party/FatFs/src/ff.c **** 	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
3621:Middlewares/Third_Party/FatFs/src/ff.c **** 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
3622:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3623:Middlewares/Third_Party/FatFs/src/ff.c **** 
3624:Middlewares/Third_Party/FatFs/src/ff.c **** 	for ( ;  btw;							/* Repeat until all data written */
3625:Middlewares/Third_Party/FatFs/src/ff.c **** 		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->
3626:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
3627:Middlewares/Third_Party/FatFs/src/ff.c **** 			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
3628:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (csect == 0) {				/* On the cluster boundary? */
ARM GAS  /tmp/ccqUXb8n.s 			page 90


3629:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fp->fptr == 0) {		/* On the top of the file? */
3630:Middlewares/Third_Party/FatFs/src/ff.c **** 					clst = fp->obj.sclust;	/* Follow from the origin */
3631:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 0) {		/* If no cluster is allocated, */
3632:Middlewares/Third_Party/FatFs/src/ff.c **** 						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
3633:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
3634:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {					/* On the middle or end of the file */
3635:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_FASTSEEK
3636:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (fp->cltbl) {
3637:Middlewares/Third_Party/FatFs/src/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
3638:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else
3639:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3640:Middlewares/Third_Party/FatFs/src/ff.c **** 					{
3641:Middlewares/Third_Party/FatFs/src/ff.c **** 						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
3642:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
3643:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3644:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
3645:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst == 1) ABORT(fs, FR_INT_ERR);
3646:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
3647:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->clust = clst;			/* Update current cluster */
3648:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
3649:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3650:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_TINY
3651:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back s
3652:Middlewares/Third_Party/FatFs/src/ff.c **** #else
3653:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
3654:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
3655:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
3656:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3657:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3658:Middlewares/Third_Party/FatFs/src/ff.c **** 			sect = clust2sect(fs, fp->clust);	/* Get current sector */
3659:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!sect) ABORT(fs, FR_INT_ERR);
3660:Middlewares/Third_Party/FatFs/src/ff.c **** 			sect += csect;
3661:Middlewares/Third_Party/FatFs/src/ff.c **** 			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
3662:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (cc) {						/* Write maximum contiguous sectors directly */
3663:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
3664:Middlewares/Third_Party/FatFs/src/ff.c **** 					cc = fs->csize - csect;
3665:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3666:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
3667:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_MINIMIZE <= 2
3668:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_TINY
3669:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct writ
3670:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
3671:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->wflag = 0;
3672:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3673:Middlewares/Third_Party/FatFs/src/ff.c **** #else
3674:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write *
3675:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
3676:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->flag &= (BYTE)~FA_DIRTY;
3677:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3678:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3679:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3680:Middlewares/Third_Party/FatFs/src/ff.c **** 				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
3681:Middlewares/Third_Party/FatFs/src/ff.c **** 				continue;
3682:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3683:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_TINY
3684:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
3685:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
ARM GAS  /tmp/ccqUXb8n.s 			page 91


3686:Middlewares/Third_Party/FatFs/src/ff.c **** 				fs->winsect = sect;
3687:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3688:Middlewares/Third_Party/FatFs/src/ff.c **** #else
3689:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fp->sect != sect && 		/* Fill sector cache with file data */
3690:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->fptr < fp->obj.objsize &&
3691:Middlewares/Third_Party/FatFs/src/ff.c **** 				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
3692:Middlewares/Third_Party/FatFs/src/ff.c **** 					ABORT(fs, FR_DISK_ERR);
3693:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3694:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3695:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->sect = sect;
3696:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3697:Middlewares/Third_Party/FatFs/src/ff.c **** 		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
3698:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
3699:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_TINY
3700:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
3701:Middlewares/Third_Party/FatFs/src/ff.c **** 		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
3702:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->wflag = 1;
3703:Middlewares/Third_Party/FatFs/src/ff.c **** #else
3704:Middlewares/Third_Party/FatFs/src/ff.c **** 		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
3705:Middlewares/Third_Party/FatFs/src/ff.c **** 		fp->flag |= FA_DIRTY;
3706:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3707:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3708:Middlewares/Third_Party/FatFs/src/ff.c **** 
3709:Middlewares/Third_Party/FatFs/src/ff.c **** 	fp->flag |= FA_MODIFIED;				/* Set file change flag */
3710:Middlewares/Third_Party/FatFs/src/ff.c **** 
3711:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, FR_OK);
3712:Middlewares/Third_Party/FatFs/src/ff.c **** }
3713:Middlewares/Third_Party/FatFs/src/ff.c **** 
3714:Middlewares/Third_Party/FatFs/src/ff.c **** 
3715:Middlewares/Third_Party/FatFs/src/ff.c **** 
3716:Middlewares/Third_Party/FatFs/src/ff.c **** 
3717:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3718:Middlewares/Third_Party/FatFs/src/ff.c **** /* Synchronize the File                                                  */
3719:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3720:Middlewares/Third_Party/FatFs/src/ff.c **** 
3721:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_sync (
3722:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp		/* Pointer to the file object */
3723:Middlewares/Third_Party/FatFs/src/ff.c **** )
3724:Middlewares/Third_Party/FatFs/src/ff.c **** {
3725:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
3726:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
3727:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD tm;
3728:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE *dir;
3729:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
3730:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR dj;
3731:Middlewares/Third_Party/FatFs/src/ff.c **** 	DEF_NAMBUF
3732:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3733:Middlewares/Third_Party/FatFs/src/ff.c **** 
3734:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
3735:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
3736:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
3737:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_TINY
3738:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
3739:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
3740:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
3741:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3742:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
ARM GAS  /tmp/ccqUXb8n.s 			page 92


3743:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Update the directory entry */
3744:Middlewares/Third_Party/FatFs/src/ff.c **** 			tm = GET_FATTIME();				/* Modified time */
3745:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
3746:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
3747:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
3748:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK) {
3749:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if nee
3750:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3751:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK) {
3752:Middlewares/Third_Party/FatFs/src/ff.c **** 					INIT_NAMBUF(fs);
3753:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
3754:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (res == FR_OK) {
3755:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
3756:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
3757:Middlewares/Third_Party/FatFs/src/ff.c **** 						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
3758:Middlewares/Third_Party/FatFs/src/ff.c **** 						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
3759:Middlewares/Third_Party/FatFs/src/ff.c **** 						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
3760:Middlewares/Third_Party/FatFs/src/ff.c **** 						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
3761:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->dirbuf[XDIR_ModTime10] = 0;
3762:Middlewares/Third_Party/FatFs/src/ff.c **** 						st_dword(fs->dirbuf + XDIR_AccTime, 0);
3763:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = store_xdir(&dj);	/* Restore it to the directory */
3764:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (res == FR_OK) {
3765:Middlewares/Third_Party/FatFs/src/ff.c **** 							res = sync_fs(fs);
3766:Middlewares/Third_Party/FatFs/src/ff.c **** 							fp->flag &= (BYTE)~FA_MODIFIED;
3767:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
3768:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
3769:Middlewares/Third_Party/FatFs/src/ff.c **** 					FREE_NAMBUF();
3770:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3771:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else
3772:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3773:Middlewares/Third_Party/FatFs/src/ff.c **** 			{
3774:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = move_window(fs, fp->dir_sect);
3775:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK) {
3776:Middlewares/Third_Party/FatFs/src/ff.c **** 					dir = fp->dir_ptr;
3777:Middlewares/Third_Party/FatFs/src/ff.c **** 					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
3778:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
3779:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
3780:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
3781:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_word(dir + DIR_LstAccDate, 0);
3782:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->wflag = 1;
3783:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = sync_fs(fs);					/* Restore it to the directory */
3784:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->flag &= (BYTE)~FA_MODIFIED;
3785:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3786:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3787:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3788:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3789:Middlewares/Third_Party/FatFs/src/ff.c **** 
3790:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
3791:Middlewares/Third_Party/FatFs/src/ff.c **** }
3792:Middlewares/Third_Party/FatFs/src/ff.c **** 
3793:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* !_FS_READONLY */
3794:Middlewares/Third_Party/FatFs/src/ff.c **** 
3795:Middlewares/Third_Party/FatFs/src/ff.c **** 
3796:Middlewares/Third_Party/FatFs/src/ff.c **** 
3797:Middlewares/Third_Party/FatFs/src/ff.c **** 
3798:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3799:Middlewares/Third_Party/FatFs/src/ff.c **** /* Close File                                                            */
ARM GAS  /tmp/ccqUXb8n.s 			page 93


3800:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3801:Middlewares/Third_Party/FatFs/src/ff.c **** 
3802:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_close (
3803:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp		/* Pointer to the file object to be closed */
3804:Middlewares/Third_Party/FatFs/src/ff.c **** )
3805:Middlewares/Third_Party/FatFs/src/ff.c **** {
3806:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
3807:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
3808:Middlewares/Third_Party/FatFs/src/ff.c **** 
3809:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
3810:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = f_sync(fp);					/* Flush cached data */
3811:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK)
3812:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3813:Middlewares/Third_Party/FatFs/src/ff.c **** 	{
3814:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = validate(&fp->obj, &fs);	/* Lock volume */
3815:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
3816:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
3817:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
3818:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK)
3819:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3820:Middlewares/Third_Party/FatFs/src/ff.c **** 			{
3821:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->obj.fs = 0;			/* Invalidate file object */
3822:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3823:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_REENTRANT
3824:Middlewares/Third_Party/FatFs/src/ff.c **** 			unlock_fs(fs, FR_OK);		/* Unlock volume */
3825:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3826:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3827:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3828:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
3829:Middlewares/Third_Party/FatFs/src/ff.c **** }
3830:Middlewares/Third_Party/FatFs/src/ff.c **** 
3831:Middlewares/Third_Party/FatFs/src/ff.c **** 
3832:Middlewares/Third_Party/FatFs/src/ff.c **** 
3833:Middlewares/Third_Party/FatFs/src/ff.c **** 
3834:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_RPATH >= 1
3835:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3836:Middlewares/Third_Party/FatFs/src/ff.c **** /* Change Current Directory or Current Drive, Get Current Directory      */
3837:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3838:Middlewares/Third_Party/FatFs/src/ff.c **** 
3839:Middlewares/Third_Party/FatFs/src/ff.c **** #if _VOLUMES >= 2
3840:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_chdrive (
3841:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path		/* Drive number */
3842:Middlewares/Third_Party/FatFs/src/ff.c **** )
3843:Middlewares/Third_Party/FatFs/src/ff.c **** {
3844:Middlewares/Third_Party/FatFs/src/ff.c **** 	int vol;
3845:Middlewares/Third_Party/FatFs/src/ff.c **** 
3846:Middlewares/Third_Party/FatFs/src/ff.c **** 
3847:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get logical drive number */
3848:Middlewares/Third_Party/FatFs/src/ff.c **** 	vol = get_ldnumber(&path);
3849:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
3850:Middlewares/Third_Party/FatFs/src/ff.c **** 
3851:Middlewares/Third_Party/FatFs/src/ff.c **** 	CurrVol = (BYTE)vol;	/* Set it as current volume */
3852:Middlewares/Third_Party/FatFs/src/ff.c **** 
3853:Middlewares/Third_Party/FatFs/src/ff.c **** 	return FR_OK;
3854:Middlewares/Third_Party/FatFs/src/ff.c **** }
3855:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3856:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  /tmp/ccqUXb8n.s 			page 94


3857:Middlewares/Third_Party/FatFs/src/ff.c **** 
3858:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_chdir (
3859:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path	/* Pointer to the directory path */
3860:Middlewares/Third_Party/FatFs/src/ff.c **** )
3861:Middlewares/Third_Party/FatFs/src/ff.c **** {
3862:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
3863:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR dj;
3864:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
3865:Middlewares/Third_Party/FatFs/src/ff.c **** 	DEF_NAMBUF
3866:Middlewares/Third_Party/FatFs/src/ff.c **** 
3867:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get logical drive */
3868:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&path, &fs, 0);
3869:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
3870:Middlewares/Third_Party/FatFs/src/ff.c **** 		dj.obj.fs = fs;
3871:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
3872:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(&dj, path);		/* Follow the path */
3873:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {					/* Follow completed */
3874:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {
3875:Middlewares/Third_Party/FatFs/src/ff.c **** 				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
3876:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
3877:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fs->fs_type == FS_EXFAT) {
3878:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->cdc_scl = dj.obj.c_scl;
3879:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->cdc_size = dj.obj.c_size;
3880:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->cdc_ofs = dj.obj.c_ofs;
3881:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3882:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3883:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
3884:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
3885:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
3886:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (fs->fs_type == FS_EXFAT) {
3887:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->cdir = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Sub-directory cluster */
3888:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->cdc_scl = dj.obj.sclust;						/* Save containing directory information */
3889:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
3890:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->cdc_ofs = dj.blk_ofs;
3891:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else
3892:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3893:Middlewares/Third_Party/FatFs/src/ff.c **** 					{
3894:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
3895:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
3896:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {
3897:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = FR_NO_PATH;		/* Reached but a file */
3898:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3899:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3900:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3901:Middlewares/Third_Party/FatFs/src/ff.c **** 		FREE_NAMBUF();
3902:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
3903:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3904:Middlewares/Third_Party/FatFs/src/ff.c **** 
3905:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
3906:Middlewares/Third_Party/FatFs/src/ff.c **** }
3907:Middlewares/Third_Party/FatFs/src/ff.c **** 
3908:Middlewares/Third_Party/FatFs/src/ff.c **** 
3909:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_RPATH >= 2
3910:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_getcwd (
3911:Middlewares/Third_Party/FatFs/src/ff.c **** 	TCHAR* buff,	/* Pointer to the directory path */
3912:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT len		/* Size of path */
3913:Middlewares/Third_Party/FatFs/src/ff.c **** )
ARM GAS  /tmp/ccqUXb8n.s 			page 95


3914:Middlewares/Third_Party/FatFs/src/ff.c **** {
3915:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
3916:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR dj;
3917:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
3918:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, n;
3919:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD ccl;
3920:Middlewares/Third_Party/FatFs/src/ff.c **** 	TCHAR *tp;
3921:Middlewares/Third_Party/FatFs/src/ff.c **** 	FILINFO fno;
3922:Middlewares/Third_Party/FatFs/src/ff.c **** 	DEF_NAMBUF
3923:Middlewares/Third_Party/FatFs/src/ff.c **** 
3924:Middlewares/Third_Party/FatFs/src/ff.c **** 
3925:Middlewares/Third_Party/FatFs/src/ff.c **** 	*buff = 0;
3926:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get logical drive */
3927:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume((const TCHAR**)&buff, &fs, 0);	/* Get current volume */
3928:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
3929:Middlewares/Third_Party/FatFs/src/ff.c **** 		dj.obj.fs = fs;
3930:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
3931:Middlewares/Third_Party/FatFs/src/ff.c **** 		i = len;			/* Bottom of buffer (directory stack base) */
3932:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* (Cannot do getcwd on exFAT and returns root path)
3933:Middlewares/Third_Party/FatFs/src/ff.c **** 			dj.obj.sclust = fs->cdir;				/* Start to follow upper directory from current directory */
3934:Middlewares/Third_Party/FatFs/src/ff.c **** 			while ((ccl = dj.obj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
3935:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = dir_sdi(&dj, 1 * SZDIRE);	/* Get parent directory */
3936:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res != FR_OK) break;
3937:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = move_window(fs, dj.sect);
3938:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res != FR_OK) break;
3939:Middlewares/Third_Party/FatFs/src/ff.c **** 				dj.obj.sclust = ld_clust(fs, dj.dir);	/* Goto parent directory */
3940:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = dir_sdi(&dj, 0);
3941:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res != FR_OK) break;
3942:Middlewares/Third_Party/FatFs/src/ff.c **** 				do {							/* Find the entry links to the child directory */
3943:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = dir_read(&dj, 0);
3944:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (res != FR_OK) break;
3945:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (ccl == ld_clust(fs, dj.dir)) break;	/* Found the entry */
3946:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = dir_next(&dj, 0);
3947:Middlewares/Third_Party/FatFs/src/ff.c **** 				} while (res == FR_OK);
3948:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
3949:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res != FR_OK) break;
3950:Middlewares/Third_Party/FatFs/src/ff.c **** 				get_fileinfo(&dj, &fno);		/* Get the directory name and push it to the buffer */
3951:Middlewares/Third_Party/FatFs/src/ff.c **** 				for (n = 0; fno.fname[n]; n++) ;
3952:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (i < n + 3) {
3953:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = FR_NOT_ENOUGH_CORE; break;
3954:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3955:Middlewares/Third_Party/FatFs/src/ff.c **** 				while (n) buff[--i] = fno.fname[--n];
3956:Middlewares/Third_Party/FatFs/src/ff.c **** 				buff[--i] = '/';
3957:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3958:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3959:Middlewares/Third_Party/FatFs/src/ff.c **** 		tp = buff;
3960:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
3961:Middlewares/Third_Party/FatFs/src/ff.c **** #if _VOLUMES >= 2
3962:Middlewares/Third_Party/FatFs/src/ff.c **** 			*tp++ = '0' + CurrVol;			/* Put drive number */
3963:Middlewares/Third_Party/FatFs/src/ff.c **** 			*tp++ = ':';
3964:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3965:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (i == len) {					/* Root-directory */
3966:Middlewares/Third_Party/FatFs/src/ff.c **** 				*tp++ = '/';
3967:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {						/* Sub-directroy */
3968:Middlewares/Third_Party/FatFs/src/ff.c **** 				do		/* Add stacked path str */
3969:Middlewares/Third_Party/FatFs/src/ff.c **** 					*tp++ = buff[i++];
3970:Middlewares/Third_Party/FatFs/src/ff.c **** 				while (i < len);
ARM GAS  /tmp/ccqUXb8n.s 			page 96


3971:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3972:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3973:Middlewares/Third_Party/FatFs/src/ff.c **** 		*tp = 0;
3974:Middlewares/Third_Party/FatFs/src/ff.c **** 		FREE_NAMBUF();
3975:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3976:Middlewares/Third_Party/FatFs/src/ff.c **** 
3977:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
3978:Middlewares/Third_Party/FatFs/src/ff.c **** }
3979:Middlewares/Third_Party/FatFs/src/ff.c **** 
3980:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _FS_RPATH >= 2 */
3981:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _FS_RPATH >= 1 */
3982:Middlewares/Third_Party/FatFs/src/ff.c **** 
3983:Middlewares/Third_Party/FatFs/src/ff.c **** 
3984:Middlewares/Third_Party/FatFs/src/ff.c **** 
3985:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_MINIMIZE <= 2
3986:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3987:Middlewares/Third_Party/FatFs/src/ff.c **** /* Seek File R/W Pointer                                                 */
3988:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3989:Middlewares/Third_Party/FatFs/src/ff.c **** 
3990:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_lseek (
3991:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp,		/* Pointer to the file object */
3992:Middlewares/Third_Party/FatFs/src/ff.c **** 	FSIZE_t ofs		/* File pointer from top of file */
3993:Middlewares/Third_Party/FatFs/src/ff.c **** )
3994:Middlewares/Third_Party/FatFs/src/ff.c **** {
3995:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
3996:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
3997:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD clst, bcs, nsect;
3998:Middlewares/Third_Party/FatFs/src/ff.c **** 	FSIZE_t ifptr;
3999:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_FASTSEEK
4000:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
4001:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4002:Middlewares/Third_Party/FatFs/src/ff.c **** 
4003:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
4004:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) res = (FRESULT)fp->err;
4005:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT && !_FS_READONLY
4006:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
4007:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed
4008:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4009:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4010:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK) LEAVE_FF(fs, res);
4011:Middlewares/Third_Party/FatFs/src/ff.c **** 
4012:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_FASTSEEK
4013:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fp->cltbl) {	/* Fast seek */
4014:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
4015:Middlewares/Third_Party/FatFs/src/ff.c **** 			tbl = fp->cltbl;
4016:Middlewares/Third_Party/FatFs/src/ff.c **** 			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
4017:Middlewares/Third_Party/FatFs/src/ff.c **** 			cl = fp->obj.sclust;		/* Origin of the chain */
4018:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (cl) {
4019:Middlewares/Third_Party/FatFs/src/ff.c **** 				do {
4020:Middlewares/Third_Party/FatFs/src/ff.c **** 					/* Get a fragment */
4021:Middlewares/Third_Party/FatFs/src/ff.c **** 					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
4022:Middlewares/Third_Party/FatFs/src/ff.c **** 					do {
4023:Middlewares/Third_Party/FatFs/src/ff.c **** 						pcl = cl; ncl++;
4024:Middlewares/Third_Party/FatFs/src/ff.c **** 						cl = get_fat(&fp->obj, cl);
4025:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (cl <= 1) ABORT(fs, FR_INT_ERR);
4026:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
4027:Middlewares/Third_Party/FatFs/src/ff.c **** 					} while (cl == pcl + 1);
ARM GAS  /tmp/ccqUXb8n.s 			page 97


4028:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (ulen <= tlen) {		/* Store the length and top of the fragment */
4029:Middlewares/Third_Party/FatFs/src/ff.c **** 						*tbl++ = ncl; *tbl++ = tcl;
4030:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
4031:Middlewares/Third_Party/FatFs/src/ff.c **** 				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
4032:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4033:Middlewares/Third_Party/FatFs/src/ff.c **** 			*fp->cltbl = ulen;	/* Number of items used */
4034:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ulen <= tlen) {
4035:Middlewares/Third_Party/FatFs/src/ff.c **** 				*tbl = 0;		/* Terminate table */
4036:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
4037:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
4038:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4039:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {						/* Fast seek */
4040:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
4041:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->fptr = ofs;				/* Set file pointer */
4042:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ofs) {
4043:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->clust = clmt_clust(fp, ofs - 1);
4044:Middlewares/Third_Party/FatFs/src/ff.c **** 				dsc = clust2sect(fs, fp->clust);
4045:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (!dsc) ABORT(fs, FR_INT_ERR);
4046:Middlewares/Third_Party/FatFs/src/ff.c **** 				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
4047:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
4048:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_TINY
4049:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
4050:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
4051:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
4052:Middlewares/Third_Party/FatFs/src/ff.c **** 						fp->flag &= (BYTE)~FA_DIRTY;
4053:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
4054:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4055:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sec
4056:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4057:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->sect = dsc;
4058:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4059:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4060:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4061:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else
4062:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4063:Middlewares/Third_Party/FatFs/src/ff.c **** 
4064:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Normal Seek */
4065:Middlewares/Third_Party/FatFs/src/ff.c **** 	{
4066:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
4067:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATx
4068:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4069:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, cl
4070:Middlewares/Third_Party/FatFs/src/ff.c **** 			ofs = fp->obj.objsize;
4071:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4072:Middlewares/Third_Party/FatFs/src/ff.c **** 		ifptr = fp->fptr;
4073:Middlewares/Third_Party/FatFs/src/ff.c **** 		fp->fptr = nsect = 0;
4074:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ofs) {
4075:Middlewares/Third_Party/FatFs/src/ff.c **** 			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
4076:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ifptr > 0 &&
4077:Middlewares/Third_Party/FatFs/src/ff.c **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
4078:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
4079:Middlewares/Third_Party/FatFs/src/ff.c **** 				ofs -= fp->fptr;
4080:Middlewares/Third_Party/FatFs/src/ff.c **** 				clst = fp->clust;
4081:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {									/* When seek to back cluster, */
4082:Middlewares/Third_Party/FatFs/src/ff.c **** 				clst = fp->obj.sclust;					/* start from the first cluster */
4083:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
4084:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst == 0) {						/* If no cluster chain, create a new chain */
ARM GAS  /tmp/ccqUXb8n.s 			page 98


4085:Middlewares/Third_Party/FatFs/src/ff.c **** 					clst = create_chain(&fp->obj, 0);
4086:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 1) ABORT(fs, FR_INT_ERR);
4087:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
4088:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->obj.sclust = clst;
4089:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4090:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4091:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->clust = clst;
4092:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4093:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (clst != 0) {
4094:Middlewares/Third_Party/FatFs/src/ff.c **** 				while (ofs > bcs) {						/* Cluster following loop */
4095:Middlewares/Third_Party/FatFs/src/ff.c **** 					ofs -= bcs; fp->fptr += bcs;
4096:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
4097:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
4098:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize t
4099:Middlewares/Third_Party/FatFs/src/ff.c **** 							fp->obj.objsize = fp->fptr;
4100:Middlewares/Third_Party/FatFs/src/ff.c **** 							fp->flag |= FA_MODIFIED;
4101:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
4102:Middlewares/Third_Party/FatFs/src/ff.c **** 						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
4103:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (clst == 0) {				/* Clip file size in case of disk full */
4104:Middlewares/Third_Party/FatFs/src/ff.c **** 							ofs = 0; break;
4105:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
4106:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else
4107:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4108:Middlewares/Third_Party/FatFs/src/ff.c **** 					{
4109:Middlewares/Third_Party/FatFs/src/ff.c **** 						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
4110:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
4111:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
4112:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
4113:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->clust = clst;
4114:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4115:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->fptr += ofs;
4116:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (ofs % SS(fs)) {
4117:Middlewares/Third_Party/FatFs/src/ff.c **** 					nsect = clust2sect(fs, clst);	/* Current sector */
4118:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (!nsect) ABORT(fs, FR_INT_ERR);
4119:Middlewares/Third_Party/FatFs/src/ff.c **** 					nsect += (DWORD)(ofs / SS(fs));
4120:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4121:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4122:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4123:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is e
4124:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->obj.objsize = fp->fptr;
4125:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->flag |= FA_MODIFIED;
4126:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4127:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
4128:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_TINY
4129:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
4130:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
4131:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
4132:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
4133:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4134:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4135:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cach
4136:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4137:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->sect = nsect;
4138:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4139:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4140:Middlewares/Third_Party/FatFs/src/ff.c **** 
4141:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
ARM GAS  /tmp/ccqUXb8n.s 			page 99


4142:Middlewares/Third_Party/FatFs/src/ff.c **** }
4143:Middlewares/Third_Party/FatFs/src/ff.c **** 
4144:Middlewares/Third_Party/FatFs/src/ff.c **** 
4145:Middlewares/Third_Party/FatFs/src/ff.c **** 
4146:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_MINIMIZE <= 1
4147:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4148:Middlewares/Third_Party/FatFs/src/ff.c **** /* Create a Directory Object                                             */
4149:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4150:Middlewares/Third_Party/FatFs/src/ff.c **** 
4151:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_opendir (
4152:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp,			/* Pointer to directory object to create */
4153:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path	/* Pointer to the directory path */
4154:Middlewares/Third_Party/FatFs/src/ff.c **** )
4155:Middlewares/Third_Party/FatFs/src/ff.c **** {
4156:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
4157:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
4158:Middlewares/Third_Party/FatFs/src/ff.c **** 	_FDID *obj;
4159:Middlewares/Third_Party/FatFs/src/ff.c **** 	DEF_NAMBUF
4160:Middlewares/Third_Party/FatFs/src/ff.c **** 
4161:Middlewares/Third_Party/FatFs/src/ff.c **** 
4162:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!dp) return FR_INVALID_OBJECT;
4163:Middlewares/Third_Party/FatFs/src/ff.c **** 
4164:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get logical drive */
4165:Middlewares/Third_Party/FatFs/src/ff.c **** 	obj = &dp->obj;
4166:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&path, &fs, 0);
4167:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
4168:Middlewares/Third_Party/FatFs/src/ff.c **** 		obj->fs = fs;
4169:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
4170:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(dp, path);			/* Follow the path to the directory */
4171:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {						/* Follow completed */
4172:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
4173:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
4174:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
4175:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (fs->fs_type == FS_EXFAT) {
4176:Middlewares/Third_Party/FatFs/src/ff.c **** 						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
4177:Middlewares/Third_Party/FatFs/src/ff.c **** 						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
4178:Middlewares/Third_Party/FatFs/src/ff.c **** 						obj->c_ofs = dp->blk_ofs;
4179:Middlewares/Third_Party/FatFs/src/ff.c **** 						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
4180:Middlewares/Third_Party/FatFs/src/ff.c **** 						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
4181:Middlewares/Third_Party/FatFs/src/ff.c **** 						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
4182:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else
4183:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4184:Middlewares/Third_Party/FatFs/src/ff.c **** 					{
4185:Middlewares/Third_Party/FatFs/src/ff.c **** 						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
4186:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
4187:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {						/* This object is a file */
4188:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = FR_NO_PATH;
4189:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4190:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4191:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) {
4192:Middlewares/Third_Party/FatFs/src/ff.c **** 				obj->id = fs->id;
4193:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = dir_sdi(dp, 0);			/* Rewind directory */
4194:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
4195:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK) {
4196:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (obj->sclust) {
4197:Middlewares/Third_Party/FatFs/src/ff.c **** 						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
4198:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
ARM GAS  /tmp/ccqUXb8n.s 			page 100


4199:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else {
4200:Middlewares/Third_Party/FatFs/src/ff.c **** 						obj->lockid = 0;	/* Root directory need not to be locked */
4201:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
4202:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4203:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4204:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4205:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4206:Middlewares/Third_Party/FatFs/src/ff.c **** 		FREE_NAMBUF();
4207:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
4208:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4209:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
4210:Middlewares/Third_Party/FatFs/src/ff.c **** 
4211:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
4212:Middlewares/Third_Party/FatFs/src/ff.c **** }
4213:Middlewares/Third_Party/FatFs/src/ff.c **** 
4214:Middlewares/Third_Party/FatFs/src/ff.c **** 
4215:Middlewares/Third_Party/FatFs/src/ff.c **** 
4216:Middlewares/Third_Party/FatFs/src/ff.c **** 
4217:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4218:Middlewares/Third_Party/FatFs/src/ff.c **** /* Close Directory                                                       */
4219:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4220:Middlewares/Third_Party/FatFs/src/ff.c **** 
4221:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_closedir (
4222:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR *dp		/* Pointer to the directory object to be closed */
4223:Middlewares/Third_Party/FatFs/src/ff.c **** )
4224:Middlewares/Third_Party/FatFs/src/ff.c **** {
4225:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
4226:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
4227:Middlewares/Third_Party/FatFs/src/ff.c **** 
4228:Middlewares/Third_Party/FatFs/src/ff.c **** 
4229:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
4230:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
4231:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
4232:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
4233:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = dec_lock(dp->obj.lockid);
4234:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4235:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK)
4236:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4237:Middlewares/Third_Party/FatFs/src/ff.c **** 		{
4238:Middlewares/Third_Party/FatFs/src/ff.c **** 			dp->obj.fs = 0;			/* Invalidate directory object */
4239:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4240:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_REENTRANT
4241:Middlewares/Third_Party/FatFs/src/ff.c **** 		unlock_fs(fs, FR_OK);		/* Unlock volume */
4242:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4243:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4244:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
4245:Middlewares/Third_Party/FatFs/src/ff.c **** }
4246:Middlewares/Third_Party/FatFs/src/ff.c **** 
4247:Middlewares/Third_Party/FatFs/src/ff.c **** 
4248:Middlewares/Third_Party/FatFs/src/ff.c **** 
4249:Middlewares/Third_Party/FatFs/src/ff.c **** 
4250:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4251:Middlewares/Third_Party/FatFs/src/ff.c **** /* Read Directory Entries in Sequence                                    */
4252:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4253:Middlewares/Third_Party/FatFs/src/ff.c **** 
4254:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_readdir (
4255:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp,			/* Pointer to the open directory object */
ARM GAS  /tmp/ccqUXb8n.s 			page 101


4256:Middlewares/Third_Party/FatFs/src/ff.c **** 	FILINFO* fno		/* Pointer to file information to return */
4257:Middlewares/Third_Party/FatFs/src/ff.c **** )
4258:Middlewares/Third_Party/FatFs/src/ff.c **** {
4259:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
4260:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
4261:Middlewares/Third_Party/FatFs/src/ff.c **** 	DEF_NAMBUF
4262:Middlewares/Third_Party/FatFs/src/ff.c **** 
4263:Middlewares/Third_Party/FatFs/src/ff.c **** 
4264:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
4265:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
4266:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!fno) {
4267:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = dir_sdi(dp, 0);			/* Rewind the directory object */
4268:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
4269:Middlewares/Third_Party/FatFs/src/ff.c **** 			INIT_NAMBUF(fs);
4270:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = dir_read(dp, 0);			/* Read an item */
4271:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
4272:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) {				/* A valid entry is found */
4273:Middlewares/Third_Party/FatFs/src/ff.c **** 				get_fileinfo(dp, fno);		/* Get the object information */
4274:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = dir_next(dp, 0);		/* Increment index for next */
4275:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
4276:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4277:Middlewares/Third_Party/FatFs/src/ff.c **** 			FREE_NAMBUF();
4278:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4279:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4280:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
4281:Middlewares/Third_Party/FatFs/src/ff.c **** }
4282:Middlewares/Third_Party/FatFs/src/ff.c **** 
4283:Middlewares/Third_Party/FatFs/src/ff.c **** 
4284:Middlewares/Third_Party/FatFs/src/ff.c **** 
4285:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_FIND
4286:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4287:Middlewares/Third_Party/FatFs/src/ff.c **** /* Find Next File                                                        */
4288:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4289:Middlewares/Third_Party/FatFs/src/ff.c **** 
4290:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_findnext (
4291:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp,		/* Pointer to the open directory object */
4292:Middlewares/Third_Party/FatFs/src/ff.c **** 	FILINFO* fno	/* Pointer to the file information structure */
4293:Middlewares/Third_Party/FatFs/src/ff.c **** )
4294:Middlewares/Third_Party/FatFs/src/ff.c **** {
4295:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
4296:Middlewares/Third_Party/FatFs/src/ff.c **** 
4297:Middlewares/Third_Party/FatFs/src/ff.c **** 
4298:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (;;) {
4299:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = f_readdir(dp, fno);		/* Get a directory item */
4300:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory 
4301:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
4302:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0 && _USE_FIND == 2
4303:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist *
4304:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4305:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4306:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
4307:Middlewares/Third_Party/FatFs/src/ff.c **** }
4308:Middlewares/Third_Party/FatFs/src/ff.c **** 
4309:Middlewares/Third_Party/FatFs/src/ff.c **** 
4310:Middlewares/Third_Party/FatFs/src/ff.c **** 
4311:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4312:Middlewares/Third_Party/FatFs/src/ff.c **** /* Find First File                                                       */
ARM GAS  /tmp/ccqUXb8n.s 			page 102


4313:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4314:Middlewares/Third_Party/FatFs/src/ff.c **** 
4315:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_findfirst (
4316:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp,				/* Pointer to the blank directory object */
4317:Middlewares/Third_Party/FatFs/src/ff.c **** 	FILINFO* fno,			/* Pointer to the file information structure */
4318:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path,		/* Pointer to the directory to open */
4319:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* pattern	/* Pointer to the matching pattern */
4320:Middlewares/Third_Party/FatFs/src/ff.c **** )
4321:Middlewares/Third_Party/FatFs/src/ff.c **** {
4322:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
4323:Middlewares/Third_Party/FatFs/src/ff.c **** 
4324:Middlewares/Third_Party/FatFs/src/ff.c **** 
4325:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->pat = pattern;		/* Save pointer to pattern string */
4326:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = f_opendir(dp, path);		/* Open the target directory */
4327:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
4328:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = f_findnext(dp, fno);	/* Find the first item */
4329:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4330:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
4331:Middlewares/Third_Party/FatFs/src/ff.c **** }
4332:Middlewares/Third_Party/FatFs/src/ff.c **** 
4333:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* _USE_FIND */
4334:Middlewares/Third_Party/FatFs/src/ff.c **** 
4335:Middlewares/Third_Party/FatFs/src/ff.c **** 
4336:Middlewares/Third_Party/FatFs/src/ff.c **** 
4337:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_MINIMIZE == 0
4338:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4339:Middlewares/Third_Party/FatFs/src/ff.c **** /* Get File Status                                                       */
4340:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4341:Middlewares/Third_Party/FatFs/src/ff.c **** 
4342:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_stat (
4343:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path,	/* Pointer to the file path */
4344:Middlewares/Third_Party/FatFs/src/ff.c **** 	FILINFO* fno		/* Pointer to file information to return */
4345:Middlewares/Third_Party/FatFs/src/ff.c **** )
4346:Middlewares/Third_Party/FatFs/src/ff.c **** {
4347:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
4348:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR dj;
4349:Middlewares/Third_Party/FatFs/src/ff.c **** 	DEF_NAMBUF
4350:Middlewares/Third_Party/FatFs/src/ff.c **** 
4351:Middlewares/Third_Party/FatFs/src/ff.c **** 
4352:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get logical drive */
4353:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&path, &dj.obj.fs, 0);
4354:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
4355:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(dj.obj.fs);
4356:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
4357:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {				/* Follow completed */
4358:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
4359:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_INVALID_NAME;
4360:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {							/* Found an object */
4361:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fno) get_fileinfo(&dj, fno);
4362:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4363:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4364:Middlewares/Third_Party/FatFs/src/ff.c **** 		FREE_NAMBUF();
4365:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4366:Middlewares/Third_Party/FatFs/src/ff.c **** 
4367:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(dj.obj.fs, res);
4368:Middlewares/Third_Party/FatFs/src/ff.c **** }
4369:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  /tmp/ccqUXb8n.s 			page 103


4370:Middlewares/Third_Party/FatFs/src/ff.c **** 
4371:Middlewares/Third_Party/FatFs/src/ff.c **** 
4372:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
4373:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4374:Middlewares/Third_Party/FatFs/src/ff.c **** /* Get Number of Free Clusters                                           */
4375:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4376:Middlewares/Third_Party/FatFs/src/ff.c **** 
4377:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_getfree (
4378:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path,	/* Path name of the logical drive number */
4379:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
4380:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
4381:Middlewares/Third_Party/FatFs/src/ff.c **** )
4382:Middlewares/Third_Party/FatFs/src/ff.c **** {
4383:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
4384:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
4385:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD nfree, clst, sect, stat;
4386:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i;
4387:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE *p;
4388:Middlewares/Third_Party/FatFs/src/ff.c **** 	_FDID obj;
4389:Middlewares/Third_Party/FatFs/src/ff.c **** 
4390:Middlewares/Third_Party/FatFs/src/ff.c **** 
4391:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get logical drive */
4392:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&path, &fs, 0);
4393:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
4394:Middlewares/Third_Party/FatFs/src/ff.c **** 		*fatfs = fs;				/* Return ptr to the fs object */
4395:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* If free_clst is valid, return it without full cluster scan */
4396:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->free_clst <= fs->n_fatent - 2) {
4397:Middlewares/Third_Party/FatFs/src/ff.c **** 			*nclst = fs->free_clst;
4398:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
4399:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Get number of free clusters */
4400:Middlewares/Third_Party/FatFs/src/ff.c **** 			nfree = 0;
4401:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
4402:Middlewares/Third_Party/FatFs/src/ff.c **** 				clst = 2; obj.fs = fs;
4403:Middlewares/Third_Party/FatFs/src/ff.c **** 				do {
4404:Middlewares/Third_Party/FatFs/src/ff.c **** 					stat = get_fat(&obj, clst);
4405:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
4406:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (stat == 1) { res = FR_INT_ERR; break; }
4407:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (stat == 0) nfree++;
4408:Middlewares/Third_Party/FatFs/src/ff.c **** 				} while (++clst < fs->n_fatent);
4409:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
4410:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
4411:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan bitmap table */
4412:Middlewares/Third_Party/FatFs/src/ff.c **** 					BYTE bm;
4413:Middlewares/Third_Party/FatFs/src/ff.c **** 					UINT b;
4414:Middlewares/Third_Party/FatFs/src/ff.c **** 
4415:Middlewares/Third_Party/FatFs/src/ff.c **** 					clst = fs->n_fatent - 2;
4416:Middlewares/Third_Party/FatFs/src/ff.c **** 					sect = fs->database;
4417:Middlewares/Third_Party/FatFs/src/ff.c **** 					i = 0;
4418:Middlewares/Third_Party/FatFs/src/ff.c **** 					do {
4419:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
4420:Middlewares/Third_Party/FatFs/src/ff.c **** 						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
4421:Middlewares/Third_Party/FatFs/src/ff.c **** 							if (!(bm & 1)) nfree++;
4422:Middlewares/Third_Party/FatFs/src/ff.c **** 							bm >>= 1;
4423:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
4424:Middlewares/Third_Party/FatFs/src/ff.c **** 						i = (i + 1) % SS(fs);
4425:Middlewares/Third_Party/FatFs/src/ff.c **** 					} while (clst);
4426:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else
ARM GAS  /tmp/ccqUXb8n.s 			page 104


4427:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4428:Middlewares/Third_Party/FatFs/src/ff.c **** 				{	/* FAT16/32: Sector alighed FAT entries */
4429:Middlewares/Third_Party/FatFs/src/ff.c **** 					clst = fs->n_fatent; sect = fs->fatbase;
4430:Middlewares/Third_Party/FatFs/src/ff.c **** 					i = 0; p = 0;
4431:Middlewares/Third_Party/FatFs/src/ff.c **** 					do {
4432:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (i == 0) {
4433:Middlewares/Third_Party/FatFs/src/ff.c **** 							res = move_window(fs, sect++);
4434:Middlewares/Third_Party/FatFs/src/ff.c **** 							if (res != FR_OK) break;
4435:Middlewares/Third_Party/FatFs/src/ff.c **** 							p = fs->win;
4436:Middlewares/Third_Party/FatFs/src/ff.c **** 							i = SS(fs);
4437:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
4438:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (fs->fs_type == FS_FAT16) {
4439:Middlewares/Third_Party/FatFs/src/ff.c **** 							if (ld_word(p) == 0) nfree++;
4440:Middlewares/Third_Party/FatFs/src/ff.c **** 							p += 2; i -= 2;
4441:Middlewares/Third_Party/FatFs/src/ff.c **** 						} else {
4442:Middlewares/Third_Party/FatFs/src/ff.c **** 							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
4443:Middlewares/Third_Party/FatFs/src/ff.c **** 							p += 4; i -= 4;
4444:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
4445:Middlewares/Third_Party/FatFs/src/ff.c **** 					} while (--clst);
4446:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4447:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4448:Middlewares/Third_Party/FatFs/src/ff.c **** 			*nclst = nfree;			/* Return the free clusters */
4449:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->free_clst = nfree;	/* Now free_clst is valid */
4450:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
4451:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4452:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4453:Middlewares/Third_Party/FatFs/src/ff.c **** 
4454:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
4455:Middlewares/Third_Party/FatFs/src/ff.c **** }
4456:Middlewares/Third_Party/FatFs/src/ff.c **** 
4457:Middlewares/Third_Party/FatFs/src/ff.c **** 
4458:Middlewares/Third_Party/FatFs/src/ff.c **** 
4459:Middlewares/Third_Party/FatFs/src/ff.c **** 
4460:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4461:Middlewares/Third_Party/FatFs/src/ff.c **** /* Truncate File                                                         */
4462:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4463:Middlewares/Third_Party/FatFs/src/ff.c **** 
4464:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_truncate (
4465:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp		/* Pointer to the file object */
4466:Middlewares/Third_Party/FatFs/src/ff.c **** )
4467:Middlewares/Third_Party/FatFs/src/ff.c **** {
4468:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
4469:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
4470:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD ncl;
4471:Middlewares/Third_Party/FatFs/src/ff.c **** 
4472:Middlewares/Third_Party/FatFs/src/ff.c **** 
4473:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
4474:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
4475:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
4476:Middlewares/Third_Party/FatFs/src/ff.c **** 
4477:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fp->fptr < fp->obj.objsize) {	/* Process when fptr is not on the eof */
4478:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
4479:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
4480:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->obj.sclust = 0;
4481:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {				/* When truncate a part of the file, remove remaining clusters */
4482:Middlewares/Third_Party/FatFs/src/ff.c **** 			ncl = get_fat(&fp->obj, fp->clust);
4483:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = FR_OK;
ARM GAS  /tmp/ccqUXb8n.s 			page 105


4484:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
4485:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ncl == 1) res = FR_INT_ERR;
4486:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK && ncl < fs->n_fatent) {
4487:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = remove_chain(&fp->obj, ncl, fp->clust);
4488:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4489:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4490:Middlewares/Third_Party/FatFs/src/ff.c **** 		fp->obj.objsize = fp->fptr;	/* Set file size to current R/W point */
4491:Middlewares/Third_Party/FatFs/src/ff.c **** 		fp->flag |= FA_MODIFIED;
4492:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_TINY
4493:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK && (fp->flag & FA_DIRTY)) {
4494:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
4495:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_DISK_ERR;
4496:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
4497:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
4498:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4499:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4500:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4501:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) ABORT(fs, res);
4502:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4503:Middlewares/Third_Party/FatFs/src/ff.c **** 
4504:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
4505:Middlewares/Third_Party/FatFs/src/ff.c **** }
4506:Middlewares/Third_Party/FatFs/src/ff.c **** 
4507:Middlewares/Third_Party/FatFs/src/ff.c **** 
4508:Middlewares/Third_Party/FatFs/src/ff.c **** 
4509:Middlewares/Third_Party/FatFs/src/ff.c **** 
4510:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4511:Middlewares/Third_Party/FatFs/src/ff.c **** /* Delete a File/Directory                                               */
4512:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4513:Middlewares/Third_Party/FatFs/src/ff.c **** 
4514:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_unlink (
4515:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path		/* Pointer to the file or directory path */
4516:Middlewares/Third_Party/FatFs/src/ff.c **** )
4517:Middlewares/Third_Party/FatFs/src/ff.c **** {
4518:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
4519:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR dj, sdj;
4520:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD dclst = 0;
4521:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
4522:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
4523:Middlewares/Third_Party/FatFs/src/ff.c **** 	_FDID obj;
4524:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4525:Middlewares/Third_Party/FatFs/src/ff.c **** 	DEF_NAMBUF
4526:Middlewares/Third_Party/FatFs/src/ff.c **** 
4527:Middlewares/Third_Party/FatFs/src/ff.c **** 
4528:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get logical drive */
4529:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&path, &fs, FA_WRITE);
4530:Middlewares/Third_Party/FatFs/src/ff.c **** 	dj.obj.fs = fs;
4531:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
4532:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
4533:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
4534:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
4535:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
4536:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4537:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
4538:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
4539:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4540:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {					/* The object is accessible */
ARM GAS  /tmp/ccqUXb8n.s 			page 106


4541:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {
4542:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
4543:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
4544:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (dj.obj.attr & AM_RDO) {
4545:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = FR_DENIED;		/* Cannot remove R/O object */
4546:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4547:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4548:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) {
4549:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
4550:Middlewares/Third_Party/FatFs/src/ff.c **** 				obj.fs = fs;
4551:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fs->fs_type == FS_EXFAT) {
4552:Middlewares/Third_Party/FatFs/src/ff.c **** 					obj.sclust = dclst = ld_dword(fs->dirbuf + XDIR_FstClus);
4553:Middlewares/Third_Party/FatFs/src/ff.c **** 					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
4554:Middlewares/Third_Party/FatFs/src/ff.c **** 					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
4555:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else
4556:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4557:Middlewares/Third_Party/FatFs/src/ff.c **** 				{
4558:Middlewares/Third_Party/FatFs/src/ff.c **** 					dclst = ld_clust(fs, dj.dir);
4559:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4560:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
4561:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_RPATH != 0
4562:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
4563:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = FR_DENIED;
4564:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else
4565:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4566:Middlewares/Third_Party/FatFs/src/ff.c **** 					{
4567:Middlewares/Third_Party/FatFs/src/ff.c **** 						sdj.obj.fs = fs;						/* Open the sub-directory */
4568:Middlewares/Third_Party/FatFs/src/ff.c **** 						sdj.obj.sclust = dclst;
4569:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
4570:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (fs->fs_type == FS_EXFAT) {
4571:Middlewares/Third_Party/FatFs/src/ff.c **** 							sdj.obj.objsize = obj.objsize;
4572:Middlewares/Third_Party/FatFs/src/ff.c **** 							sdj.obj.stat = obj.stat;
4573:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
4574:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4575:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = dir_sdi(&sdj, 0);
4576:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (res == FR_OK) {
4577:Middlewares/Third_Party/FatFs/src/ff.c **** 							res = dir_read(&sdj, 0);			/* Read an item */
4578:Middlewares/Third_Party/FatFs/src/ff.c **** 							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
4579:Middlewares/Third_Party/FatFs/src/ff.c **** 							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
4580:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
4581:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
4582:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4583:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4584:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) {
4585:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = dir_remove(&dj);			/* Remove the directory entry */
4586:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
4587:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
4588:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = remove_chain(&obj, dclst, 0);
4589:Middlewares/Third_Party/FatFs/src/ff.c **** #else
4590:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = remove_chain(&dj.obj, dclst, 0);
4591:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4592:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4593:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK) res = sync_fs(fs);
4594:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4595:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4596:Middlewares/Third_Party/FatFs/src/ff.c **** 		FREE_NAMBUF();
4597:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
ARM GAS  /tmp/ccqUXb8n.s 			page 107


4598:Middlewares/Third_Party/FatFs/src/ff.c **** 
4599:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
4600:Middlewares/Third_Party/FatFs/src/ff.c **** }
4601:Middlewares/Third_Party/FatFs/src/ff.c **** 
4602:Middlewares/Third_Party/FatFs/src/ff.c **** 
4603:Middlewares/Third_Party/FatFs/src/ff.c **** 
4604:Middlewares/Third_Party/FatFs/src/ff.c **** 
4605:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4606:Middlewares/Third_Party/FatFs/src/ff.c **** /* Create a Directory                                                    */
4607:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4608:Middlewares/Third_Party/FatFs/src/ff.c **** 
4609:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_mkdir (
4610:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path		/* Pointer to the directory path */
4611:Middlewares/Third_Party/FatFs/src/ff.c **** )
4612:Middlewares/Third_Party/FatFs/src/ff.c **** {
4613:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
4614:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR dj;
4615:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
4616:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE *dir;
4617:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT n;
4618:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD dsc, dcl, pcl, tm;
4619:Middlewares/Third_Party/FatFs/src/ff.c **** 	DEF_NAMBUF
4620:Middlewares/Third_Party/FatFs/src/ff.c **** 
4621:Middlewares/Third_Party/FatFs/src/ff.c **** 
4622:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get logical drive */
4623:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&path, &fs, FA_WRITE);
4624:Middlewares/Third_Party/FatFs/src/ff.c **** 	dj.obj.fs = fs;
4625:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
4626:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
4627:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(&dj, path);			/* Follow the file path */
4628:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
4629:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
4630:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = FR_INVALID_NAME;
4631:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4632:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_NO_FILE) {				/* Can create a new directory */
4633:Middlewares/Third_Party/FatFs/src/ff.c **** 			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
4634:Middlewares/Third_Party/FatFs/src/ff.c **** 			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
4635:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = FR_OK;
4636:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
4637:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dcl == 1) res = FR_INT_ERR;
4638:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
4639:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
4640:Middlewares/Third_Party/FatFs/src/ff.c **** 			tm = GET_FATTIME();
4641:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) {					/* Initialize the new directory table */
4642:Middlewares/Third_Party/FatFs/src/ff.c **** 				dsc = clust2sect(fs, dcl);
4643:Middlewares/Third_Party/FatFs/src/ff.c **** 				dir = fs->win;
4644:Middlewares/Third_Party/FatFs/src/ff.c **** 				mem_set(dir, 0, SS(fs));
4645:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
4646:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
4647:Middlewares/Third_Party/FatFs/src/ff.c **** 					dir[DIR_Name] = '.';
4648:Middlewares/Third_Party/FatFs/src/ff.c **** 					dir[DIR_Attr] = AM_DIR;
4649:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(dir + DIR_ModTime, tm);
4650:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_clust(fs, dir, dcl);
4651:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
4652:Middlewares/Third_Party/FatFs/src/ff.c **** 					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
4653:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
4654:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_clust(fs, dir + SZDIRE, pcl);
ARM GAS  /tmp/ccqUXb8n.s 			page 108


4655:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4656:Middlewares/Third_Party/FatFs/src/ff.c **** 				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
4657:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->winsect = dsc++;
4658:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->wflag = 1;
4659:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = sync_window(fs);
4660:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (res != FR_OK) break;
4661:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_set(dir, 0, SS(fs));
4662:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4663:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4664:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) {
4665:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = dir_register(&dj);	/* Register the object to the directoy */
4666:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4667:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) {
4668:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
4669:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fs->fs_type == FS_EXFAT) {	/* Initialize directory entry block */
4670:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(fs->dirbuf + XDIR_ModTime, tm);	/* Created time */
4671:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(fs->dirbuf + XDIR_FstClus, dcl);	/* Table start cluster */
4672:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(fs->dirbuf + XDIR_FileSize, (DWORD)dj.obj.objsize);	/* File size needs to be valid */
4673:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(fs->dirbuf + XDIR_ValidFileSize, (DWORD)dj.obj.objsize);
4674:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag (contiguous) */
4675:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
4676:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = store_xdir(&dj);
4677:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else
4678:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4679:Middlewares/Third_Party/FatFs/src/ff.c **** 				{
4680:Middlewares/Third_Party/FatFs/src/ff.c **** 					dir = dj.dir;
4681:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(dir + DIR_ModTime, tm);	/* Created time */
4682:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_clust(fs, dir, dcl);				/* Table start cluster */
4683:Middlewares/Third_Party/FatFs/src/ff.c **** 					dir[DIR_Attr] = AM_DIR;				/* Attribute */
4684:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->wflag = 1;
4685:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4686:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK) {
4687:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = sync_fs(fs);
4688:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4689:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
4690:Middlewares/Third_Party/FatFs/src/ff.c **** 				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
4691:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4692:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4693:Middlewares/Third_Party/FatFs/src/ff.c **** 		FREE_NAMBUF();
4694:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4695:Middlewares/Third_Party/FatFs/src/ff.c **** 
4696:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
4697:Middlewares/Third_Party/FatFs/src/ff.c **** }
4698:Middlewares/Third_Party/FatFs/src/ff.c **** 
4699:Middlewares/Third_Party/FatFs/src/ff.c **** 
4700:Middlewares/Third_Party/FatFs/src/ff.c **** 
4701:Middlewares/Third_Party/FatFs/src/ff.c **** 
4702:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4703:Middlewares/Third_Party/FatFs/src/ff.c **** /* Rename a File/Directory                                               */
4704:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4705:Middlewares/Third_Party/FatFs/src/ff.c **** 
4706:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_rename (
4707:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
4708:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path_new	/* Pointer to the new name */
4709:Middlewares/Third_Party/FatFs/src/ff.c **** )
4710:Middlewares/Third_Party/FatFs/src/ff.c **** {
4711:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
ARM GAS  /tmp/ccqUXb8n.s 			page 109


4712:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR djo, djn;
4713:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
4714:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
4715:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD dw;
4716:Middlewares/Third_Party/FatFs/src/ff.c **** 	DEF_NAMBUF
4717:Middlewares/Third_Party/FatFs/src/ff.c **** 
4718:Middlewares/Third_Party/FatFs/src/ff.c **** 
4719:Middlewares/Third_Party/FatFs/src/ff.c **** 	get_ldnumber(&path_new);						/* Snip drive number of new name off */
4720:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
4721:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
4722:Middlewares/Third_Party/FatFs/src/ff.c **** 		djo.obj.fs = fs;
4723:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
4724:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(&djo, path_old);		/* Check old object */
4725:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check vali
4726:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
4727:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
4728:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = chk_lock(&djo, 2);
4729:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4730:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4731:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {						/* Object to be renamed is found */
4732:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
4733:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {	/* At exFAT */
4734:Middlewares/Third_Party/FatFs/src/ff.c **** 				BYTE nf, nn;
4735:Middlewares/Third_Party/FatFs/src/ff.c **** 				WORD nh;
4736:Middlewares/Third_Party/FatFs/src/ff.c **** 
4737:Middlewares/Third_Party/FatFs/src/ff.c **** 				mem_cpy(buf, fs->dirbuf, SZDIRE * 2);	/* Save 85+C0 entry of old object */
4738:Middlewares/Third_Party/FatFs/src/ff.c **** 				mem_cpy(&djn, &djo, sizeof djo);
4739:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
4740:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK) {						/* Is new name already in use by any other object? */
4741:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
4742:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4743:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
4744:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = dir_register(&djn);			/* Register the new entry */
4745:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (res == FR_OK) {
4746:Middlewares/Third_Party/FatFs/src/ff.c **** 						nf = fs->dirbuf[XDIR_NumSec]; nn = fs->dirbuf[XDIR_NumName];
4747:Middlewares/Third_Party/FatFs/src/ff.c **** 						nh = ld_word(fs->dirbuf + XDIR_NameHash);
4748:Middlewares/Third_Party/FatFs/src/ff.c **** 						mem_cpy(fs->dirbuf, buf, SZDIRE * 2);
4749:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->dirbuf[XDIR_NumSec] = nf; fs->dirbuf[XDIR_NumName] = nn;
4750:Middlewares/Third_Party/FatFs/src/ff.c **** 						st_word(fs->dirbuf + XDIR_NameHash, nh);
4751:Middlewares/Third_Party/FatFs/src/ff.c **** /* Start of critical section where an interruption can cause a cross-link */
4752:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = store_xdir(&djn);
4753:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
4754:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4755:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else
4756:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4757:Middlewares/Third_Party/FatFs/src/ff.c **** 			{	/* At FAT12/FAT16/FAT32 */
4758:Middlewares/Third_Party/FatFs/src/ff.c **** 				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
4759:Middlewares/Third_Party/FatFs/src/ff.c **** 				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
4760:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
4761:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK) {						/* Is new name already in use by any other object? */
4762:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
4763:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4764:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
4765:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = dir_register(&djn);			/* Register the new entry */
4766:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (res == FR_OK) {
4767:Middlewares/Third_Party/FatFs/src/ff.c **** 						dir = djn.dir;					/* Copy information about object except name */
4768:Middlewares/Third_Party/FatFs/src/ff.c **** 						mem_cpy(dir + 13, buf + 2, 19);
ARM GAS  /tmp/ccqUXb8n.s 			page 110


4769:Middlewares/Third_Party/FatFs/src/ff.c **** 						dir[DIR_Attr] = buf[0] | AM_ARC;
4770:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->wflag = 1;
4771:Middlewares/Third_Party/FatFs/src/ff.c **** 						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the
4772:Middlewares/Third_Party/FatFs/src/ff.c **** 							dw = clust2sect(fs, ld_clust(fs, dir));
4773:Middlewares/Third_Party/FatFs/src/ff.c **** 							if (!dw) {
4774:Middlewares/Third_Party/FatFs/src/ff.c **** 								res = FR_INT_ERR;
4775:Middlewares/Third_Party/FatFs/src/ff.c **** 							} else {
4776:Middlewares/Third_Party/FatFs/src/ff.c **** /* Start of critical section where an interruption can cause a cross-link */
4777:Middlewares/Third_Party/FatFs/src/ff.c **** 								res = move_window(fs, dw);
4778:Middlewares/Third_Party/FatFs/src/ff.c **** 								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
4779:Middlewares/Third_Party/FatFs/src/ff.c **** 								if (res == FR_OK && dir[1] == '.') {
4780:Middlewares/Third_Party/FatFs/src/ff.c **** 									st_clust(fs, dir, djn.obj.sclust);
4781:Middlewares/Third_Party/FatFs/src/ff.c **** 									fs->wflag = 1;
4782:Middlewares/Third_Party/FatFs/src/ff.c **** 								}
4783:Middlewares/Third_Party/FatFs/src/ff.c **** 							}
4784:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
4785:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
4786:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4787:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4788:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) {
4789:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = dir_remove(&djo);		/* Remove old entry */
4790:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK) {
4791:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = sync_fs(fs);
4792:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4793:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4794:Middlewares/Third_Party/FatFs/src/ff.c **** /* End of the critical section */
4795:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4796:Middlewares/Third_Party/FatFs/src/ff.c **** 		FREE_NAMBUF();
4797:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4798:Middlewares/Third_Party/FatFs/src/ff.c **** 
4799:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
4800:Middlewares/Third_Party/FatFs/src/ff.c **** }
4801:Middlewares/Third_Party/FatFs/src/ff.c **** 
4802:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* !_FS_READONLY */
4803:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _FS_MINIMIZE == 0 */
4804:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _FS_MINIMIZE <= 1 */
4805:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _FS_MINIMIZE <= 2 */
4806:Middlewares/Third_Party/FatFs/src/ff.c **** 
4807:Middlewares/Third_Party/FatFs/src/ff.c **** 
4808:Middlewares/Third_Party/FatFs/src/ff.c **** 
4809:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_CHMOD && !_FS_READONLY
4810:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4811:Middlewares/Third_Party/FatFs/src/ff.c **** /* Change Attribute                                                      */
4812:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4813:Middlewares/Third_Party/FatFs/src/ff.c **** 
4814:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_chmod (
4815:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path,	/* Pointer to the file path */
4816:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE attr,			/* Attribute bits */
4817:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE mask			/* Attribute mask to change */
4818:Middlewares/Third_Party/FatFs/src/ff.c **** )
4819:Middlewares/Third_Party/FatFs/src/ff.c **** {
4820:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
4821:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR dj;
4822:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
4823:Middlewares/Third_Party/FatFs/src/ff.c **** 	DEF_NAMBUF
4824:Middlewares/Third_Party/FatFs/src/ff.c **** 
4825:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  /tmp/ccqUXb8n.s 			page 111


4826:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
4827:Middlewares/Third_Party/FatFs/src/ff.c **** 	dj.obj.fs = fs;
4828:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
4829:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
4830:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
4831:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check objec
4832:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
4833:Middlewares/Third_Party/FatFs/src/ff.c **** 			mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
4834:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
4835:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
4836:Middlewares/Third_Party/FatFs/src/ff.c **** 				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribu
4837:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = store_xdir(&dj);
4838:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else
4839:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4840:Middlewares/Third_Party/FatFs/src/ff.c **** 			{
4841:Middlewares/Third_Party/FatFs/src/ff.c **** 				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change 
4842:Middlewares/Third_Party/FatFs/src/ff.c **** 				fs->wflag = 1;
4843:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4844:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) {
4845:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = sync_fs(fs);
4846:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4847:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4848:Middlewares/Third_Party/FatFs/src/ff.c **** 		FREE_NAMBUF();
4849:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4850:Middlewares/Third_Party/FatFs/src/ff.c **** 
4851:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
4852:Middlewares/Third_Party/FatFs/src/ff.c **** }
4853:Middlewares/Third_Party/FatFs/src/ff.c **** 
4854:Middlewares/Third_Party/FatFs/src/ff.c **** 
4855:Middlewares/Third_Party/FatFs/src/ff.c **** 
4856:Middlewares/Third_Party/FatFs/src/ff.c **** 
4857:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4858:Middlewares/Third_Party/FatFs/src/ff.c **** /* Change Timestamp                                                      */
4859:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4860:Middlewares/Third_Party/FatFs/src/ff.c **** 
4861:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_utime (
4862:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path,	/* Pointer to the file/directory name */
4863:Middlewares/Third_Party/FatFs/src/ff.c **** 	const FILINFO* fno	/* Pointer to the time stamp to be set */
4864:Middlewares/Third_Party/FatFs/src/ff.c **** )
4865:Middlewares/Third_Party/FatFs/src/ff.c **** {
4866:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
4867:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR dj;
4868:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
4869:Middlewares/Third_Party/FatFs/src/ff.c **** 	DEF_NAMBUF
4870:Middlewares/Third_Party/FatFs/src/ff.c **** 
4871:Middlewares/Third_Party/FatFs/src/ff.c **** 
4872:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
4873:Middlewares/Third_Party/FatFs/src/ff.c **** 	dj.obj.fs = fs;
4874:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
4875:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
4876:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
4877:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check objec
4878:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
4879:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
4880:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
4881:Middlewares/Third_Party/FatFs/src/ff.c **** 				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
4882:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = store_xdir(&dj);
ARM GAS  /tmp/ccqUXb8n.s 			page 112


4883:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else
4884:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4885:Middlewares/Third_Party/FatFs/src/ff.c **** 			{
4886:Middlewares/Third_Party/FatFs/src/ff.c **** 				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
4887:Middlewares/Third_Party/FatFs/src/ff.c **** 				fs->wflag = 1;
4888:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4889:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) {
4890:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = sync_fs(fs);
4891:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4892:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4893:Middlewares/Third_Party/FatFs/src/ff.c **** 		FREE_NAMBUF();
4894:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4895:Middlewares/Third_Party/FatFs/src/ff.c **** 
4896:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
4897:Middlewares/Third_Party/FatFs/src/ff.c **** }
4898:Middlewares/Third_Party/FatFs/src/ff.c **** 
4899:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* _USE_CHMOD && !_FS_READONLY */
4900:Middlewares/Third_Party/FatFs/src/ff.c **** 
4901:Middlewares/Third_Party/FatFs/src/ff.c **** 
4902:Middlewares/Third_Party/FatFs/src/ff.c **** 
4903:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LABEL
4904:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4905:Middlewares/Third_Party/FatFs/src/ff.c **** /* Get Volume Label                                                      */
4906:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4907:Middlewares/Third_Party/FatFs/src/ff.c **** 
4908:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_getlabel (
4909:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path,	/* Path name of the logical drive number */
4910:Middlewares/Third_Party/FatFs/src/ff.c **** 	TCHAR* label,		/* Pointer to a buffer to return the volume label */
4911:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD* vsn			/* Pointer to a variable to return the volume serial number */
4912:Middlewares/Third_Party/FatFs/src/ff.c **** )
4913:Middlewares/Third_Party/FatFs/src/ff.c **** {
4914:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
4915:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR dj;
4916:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
4917:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT si, di;
4918:Middlewares/Third_Party/FatFs/src/ff.c **** #if _LFN_UNICODE || _FS_EXFAT
4919:Middlewares/Third_Party/FatFs/src/ff.c **** 	WCHAR w;
4920:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4921:Middlewares/Third_Party/FatFs/src/ff.c **** 
4922:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get logical drive */
4923:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&path, &fs, 0);
4924:Middlewares/Third_Party/FatFs/src/ff.c **** 
4925:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get volume label */
4926:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK && label) {
4927:Middlewares/Third_Party/FatFs/src/ff.c **** 		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
4928:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = dir_sdi(&dj, 0);
4929:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
4930:Middlewares/Third_Party/FatFs/src/ff.c **** 		 	res = dir_read(&dj, 1);			/* Find a volume label entry */
4931:Middlewares/Third_Party/FatFs/src/ff.c **** 		 	if (res == FR_OK) {
4932:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
4933:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fs->fs_type == FS_EXFAT) {
4934:Middlewares/Third_Party/FatFs/src/ff.c **** 					for (si = di = 0; si < dj.dir[XDIR_NumLabel]; si++) {	/* Extract volume label from 83 entry */
4935:Middlewares/Third_Party/FatFs/src/ff.c **** 						w = ld_word(dj.dir + XDIR_Label + si * 2);
4936:Middlewares/Third_Party/FatFs/src/ff.c **** #if _LFN_UNICODE
4937:Middlewares/Third_Party/FatFs/src/ff.c **** 						label[di++] = w;
4938:Middlewares/Third_Party/FatFs/src/ff.c **** #else
4939:Middlewares/Third_Party/FatFs/src/ff.c **** 						w = ff_convert(w, 0);	/* Unicode -> OEM */
ARM GAS  /tmp/ccqUXb8n.s 			page 113


4940:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (w == 0) w = '?';	/* Replace wrong character */
4941:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (_DF1S && w >= 0x100) label[di++] = (char)(w >> 8);
4942:Middlewares/Third_Party/FatFs/src/ff.c **** 						label[di++] = (char)w;
4943:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4944:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
4945:Middlewares/Third_Party/FatFs/src/ff.c **** 					label[di] = 0;
4946:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else
4947:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4948:Middlewares/Third_Party/FatFs/src/ff.c **** 				{
4949:Middlewares/Third_Party/FatFs/src/ff.c **** 					si = di = 0;		/* Extract volume label from AM_VOL entry with code comversion */
4950:Middlewares/Third_Party/FatFs/src/ff.c **** 					do {
4951:Middlewares/Third_Party/FatFs/src/ff.c **** #if _LFN_UNICODE
4952:Middlewares/Third_Party/FatFs/src/ff.c **** 						w = (si < 11) ? dj.dir[si++] : ' ';
4953:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (IsDBCS1(w) && si < 11 && IsDBCS2(dj.dir[si])) {
4954:Middlewares/Third_Party/FatFs/src/ff.c **** 							w = w << 8 | dj.dir[si++];
4955:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
4956:Middlewares/Third_Party/FatFs/src/ff.c **** 						label[di++] = ff_convert(w, 1);	/* OEM -> Unicode */
4957:Middlewares/Third_Party/FatFs/src/ff.c **** #else
4958:Middlewares/Third_Party/FatFs/src/ff.c **** 						label[di++] = dj.dir[si++];
4959:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4960:Middlewares/Third_Party/FatFs/src/ff.c **** 					} while (di < 11);
4961:Middlewares/Third_Party/FatFs/src/ff.c **** 					do {				/* Truncate trailing spaces */
4962:Middlewares/Third_Party/FatFs/src/ff.c **** 						label[di] = 0;
4963:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (di == 0) break;
4964:Middlewares/Third_Party/FatFs/src/ff.c **** 					} while (label[--di] == ' ');
4965:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4966:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4967:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4968:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
4969:Middlewares/Third_Party/FatFs/src/ff.c **** 			label[0] = 0;
4970:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = FR_OK;
4971:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4972:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4973:Middlewares/Third_Party/FatFs/src/ff.c **** 
4974:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get volume serial number */
4975:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK && vsn) {
4976:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = move_window(fs, fs->volbase);
4977:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
4978:Middlewares/Third_Party/FatFs/src/ff.c **** 			switch (fs->fs_type) {
4979:Middlewares/Third_Party/FatFs/src/ff.c **** 			case FS_EXFAT:
4980:Middlewares/Third_Party/FatFs/src/ff.c **** 				di = BPB_VolIDEx; break;
4981:Middlewares/Third_Party/FatFs/src/ff.c **** 
4982:Middlewares/Third_Party/FatFs/src/ff.c **** 			case FS_FAT32:
4983:Middlewares/Third_Party/FatFs/src/ff.c **** 				di = BS_VolID32; break;
4984:Middlewares/Third_Party/FatFs/src/ff.c **** 
4985:Middlewares/Third_Party/FatFs/src/ff.c **** 			default:
4986:Middlewares/Third_Party/FatFs/src/ff.c **** 				di = BS_VolID;
4987:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4988:Middlewares/Third_Party/FatFs/src/ff.c **** 			*vsn = ld_dword(fs->win + di);
4989:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4990:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4991:Middlewares/Third_Party/FatFs/src/ff.c **** 
4992:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
4993:Middlewares/Third_Party/FatFs/src/ff.c **** }
4994:Middlewares/Third_Party/FatFs/src/ff.c **** 
4995:Middlewares/Third_Party/FatFs/src/ff.c **** 
4996:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  /tmp/ccqUXb8n.s 			page 114


4997:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
4998:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4999:Middlewares/Third_Party/FatFs/src/ff.c **** /* Set Volume Label                                                      */
5000:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
5001:Middlewares/Third_Party/FatFs/src/ff.c **** 
5002:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_setlabel (
5003:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* label	/* Pointer to the volume label to set */
5004:Middlewares/Third_Party/FatFs/src/ff.c **** )
5005:Middlewares/Third_Party/FatFs/src/ff.c **** {
5006:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
5007:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR dj;
5008:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
5009:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE dirvn[22];
5010:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, j, slen;
5011:Middlewares/Third_Party/FatFs/src/ff.c **** 	WCHAR w;
5012:Middlewares/Third_Party/FatFs/src/ff.c **** 	static const char badchr[] = "\"*+,.:;<=>\?[]|\x7F";
5013:Middlewares/Third_Party/FatFs/src/ff.c **** 
5014:Middlewares/Third_Party/FatFs/src/ff.c **** 
5015:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get logical drive */
5016:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&label, &fs, FA_WRITE);
5017:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK) LEAVE_FF(fs, res);
5018:Middlewares/Third_Party/FatFs/src/ff.c **** 	dj.obj.fs = fs;
5019:Middlewares/Third_Party/FatFs/src/ff.c **** 
5020:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get length of given volume label */
5021:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (slen = 0; (UINT)label[slen] >= ' '; slen++) ;	/* Get name length */
5022:Middlewares/Third_Party/FatFs/src/ff.c **** 
5023:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
5024:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
5025:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (i = j = 0; i < slen; ) {	/* Create volume label in directory form */
5026:Middlewares/Third_Party/FatFs/src/ff.c **** 			w = label[i++];
5027:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_LFN_UNICODE
5028:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (IsDBCS1(w)) {
5029:Middlewares/Third_Party/FatFs/src/ff.c **** 				w = (i < slen && IsDBCS2(label[i])) ? w << 8 | (BYTE)label[i++] : 0;
5030:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5031:Middlewares/Third_Party/FatFs/src/ff.c **** 			w = ff_convert(w, 1);
5032:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5033:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (w == 0 || chk_chr(badchr, w) || j == 22) {	/* Check validity check validity of the volume la
5034:Middlewares/Third_Party/FatFs/src/ff.c **** 				LEAVE_FF(fs, FR_INVALID_NAME);
5035:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5036:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(dirvn + j, w); j += 2;
5037:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5038:Middlewares/Third_Party/FatFs/src/ff.c **** 		slen = j;
5039:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else
5040:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5041:Middlewares/Third_Party/FatFs/src/ff.c **** 	{	/* On the FAT12/16/32 volume */
5042:Middlewares/Third_Party/FatFs/src/ff.c **** 		for ( ; slen && label[slen - 1] == ' '; slen--) ;	/* Remove trailing spaces */
5043:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (slen) {		/* Is there a volume label to be set? */
5044:Middlewares/Third_Party/FatFs/src/ff.c **** 			dirvn[0] = 0; i = j = 0;	/* Create volume label in directory form */
5045:Middlewares/Third_Party/FatFs/src/ff.c **** 			do {
5046:Middlewares/Third_Party/FatFs/src/ff.c **** #if _LFN_UNICODE
5047:Middlewares/Third_Party/FatFs/src/ff.c **** 				w = ff_convert(ff_wtoupper(label[i++]), 0);
5048:Middlewares/Third_Party/FatFs/src/ff.c **** #else
5049:Middlewares/Third_Party/FatFs/src/ff.c **** 				w = (BYTE)label[i++];
5050:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (IsDBCS1(w)) {
5051:Middlewares/Third_Party/FatFs/src/ff.c **** 					w = (j < 10 && i < slen && IsDBCS2(label[i])) ? w << 8 | (BYTE)label[i++] : 0;
5052:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5053:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0
ARM GAS  /tmp/ccqUXb8n.s 			page 115


5054:Middlewares/Third_Party/FatFs/src/ff.c **** 				w = ff_convert(ff_wtoupper(ff_convert(w, 1)), 0);
5055:Middlewares/Third_Party/FatFs/src/ff.c **** #else
5056:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (IsLower(w)) w -= 0x20;			/* To upper ASCII characters */
5057:Middlewares/Third_Party/FatFs/src/ff.c **** #ifdef _EXCVT
5058:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (w >= 0x80) w = ExCvt[w - 0x80];	/* To upper extended characters (SBCS cfg) */
5059:Middlewares/Third_Party/FatFs/src/ff.c **** #else
5060:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (!_DF1S && w >= 0x80) w = 0;		/* Reject extended characters (ASCII cfg) */
5061:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5062:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5063:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5064:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (w == 0 || chk_chr(badchr, w) || j >= (UINT)((w >= 0x100) ? 10 : 11)) {	/* Reject invalid ch
5065:Middlewares/Third_Party/FatFs/src/ff.c **** 					LEAVE_FF(fs, FR_INVALID_NAME);
5066:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5067:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (w >= 0x100) dirvn[j++] = (BYTE)(w >> 8);
5068:Middlewares/Third_Party/FatFs/src/ff.c **** 				dirvn[j++] = (BYTE)w;
5069:Middlewares/Third_Party/FatFs/src/ff.c **** 			} while (i < slen);
5070:Middlewares/Third_Party/FatFs/src/ff.c **** 			while (j < 11) dirvn[j++] = ' ';	/* Fill remaining name field */
5071:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dirvn[0] == DDEM) LEAVE_FF(fs, FR_INVALID_NAME);	/* Reject illegal name (heading DDEM) */
5072:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5073:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5074:Middlewares/Third_Party/FatFs/src/ff.c **** 
5075:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Set volume label */
5076:Middlewares/Third_Party/FatFs/src/ff.c **** 	dj.obj.sclust = 0;		/* Open root directory */
5077:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = dir_sdi(&dj, 0);
5078:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
5079:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = dir_read(&dj, 1);	/* Get volume label entry */
5080:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
5081:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {
5082:Middlewares/Third_Party/FatFs/src/ff.c **** 				dj.dir[XDIR_NumLabel] = (BYTE)(slen / 2);	/* Change the volume label */
5083:Middlewares/Third_Party/FatFs/src/ff.c **** 				mem_cpy(dj.dir + XDIR_Label, dirvn, slen);
5084:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
5085:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (slen) {
5086:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_cpy(dj.dir, dirvn, 11);	/* Change the volume label */
5087:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {
5088:Middlewares/Third_Party/FatFs/src/ff.c **** 					dj.dir[DIR_Name] = DDEM;	/* Remove the volume label */
5089:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5090:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5091:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
5092:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = sync_fs(fs);
5093:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {			/* No volume label entry is found or error */
5094:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_NO_FILE) {
5095:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_OK;
5096:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (slen) {	/* Create a volume label entry */
5097:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = dir_alloc(&dj, 1);	/* Allocate an entry */
5098:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (res == FR_OK) {
5099:Middlewares/Third_Party/FatFs/src/ff.c **** 						mem_set(dj.dir, 0, SZDIRE);	/* Clear the entry */
5100:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {
5101:Middlewares/Third_Party/FatFs/src/ff.c **** 							dj.dir[XDIR_Type] = 0x83;		/* Create 83 entry */
5102:Middlewares/Third_Party/FatFs/src/ff.c **** 							dj.dir[XDIR_NumLabel] = (BYTE)(slen / 2);
5103:Middlewares/Third_Party/FatFs/src/ff.c **** 							mem_cpy(dj.dir + XDIR_Label, dirvn, slen);
5104:Middlewares/Third_Party/FatFs/src/ff.c **** 						} else {
5105:Middlewares/Third_Party/FatFs/src/ff.c **** 							dj.dir[DIR_Attr] = AM_VOL;		/* Create volume label entry */
5106:Middlewares/Third_Party/FatFs/src/ff.c **** 							mem_cpy(dj.dir, dirvn, 11);
5107:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
5108:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->wflag = 1;
5109:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = sync_fs(fs);
5110:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
ARM GAS  /tmp/ccqUXb8n.s 			page 116


5111:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5112:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5113:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5114:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5115:Middlewares/Third_Party/FatFs/src/ff.c **** 
5116:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
5117:Middlewares/Third_Party/FatFs/src/ff.c **** }
5118:Middlewares/Third_Party/FatFs/src/ff.c **** 
5119:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* !_FS_READONLY */
5120:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _USE_LABEL */
5121:Middlewares/Third_Party/FatFs/src/ff.c **** 
5122:Middlewares/Third_Party/FatFs/src/ff.c **** 
5123:Middlewares/Third_Party/FatFs/src/ff.c **** 
5124:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_EXPAND && !_FS_READONLY
5125:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
5126:Middlewares/Third_Party/FatFs/src/ff.c **** /* Allocate a Contiguous Blocks to the File                              */
5127:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
5128:Middlewares/Third_Party/FatFs/src/ff.c **** 
5129:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_expand (
5130:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp,		/* Pointer to the file object */
5131:Middlewares/Third_Party/FatFs/src/ff.c **** 	FSIZE_t fsz,	/* File size to be expanded to */
5132:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE opt		/* Operation mode 0:Find and prepare or 1:Find and allocate */
5133:Middlewares/Third_Party/FatFs/src/ff.c **** )
5134:Middlewares/Third_Party/FatFs/src/ff.c **** {
5135:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
5136:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
5137:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD n, clst, stcl, scl, ncl, tcl, lclst;
5138:Middlewares/Third_Party/FatFs/src/ff.c **** 
5139:Middlewares/Third_Party/FatFs/src/ff.c **** 
5140:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
5141:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
5142:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fsz == 0 || fp->obj.objsize != 0 || !(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);
5143:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
5144:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->fs_type != FS_EXFAT && fsz >= 0x100000000) LEAVE_FF(fs, FR_DENIED);	/* Check if in size li
5145:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5146:Middlewares/Third_Party/FatFs/src/ff.c **** 	n = (DWORD)fs->csize * SS(fs);	/* Cluster size */
5147:Middlewares/Third_Party/FatFs/src/ff.c **** 	tcl = (DWORD)(fsz / n) + ((fsz & (n - 1)) ? 1 : 0);	/* Number of clusters required */
5148:Middlewares/Third_Party/FatFs/src/ff.c **** 	stcl = fs->last_clst; lclst = 0;
5149:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (stcl < 2 || stcl >= fs->n_fatent) stcl = 2;
5150:Middlewares/Third_Party/FatFs/src/ff.c **** 
5151:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
5152:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {
5153:Middlewares/Third_Party/FatFs/src/ff.c **** 		scl = find_bitmap(fs, stcl, tcl);			/* Find a contiguous cluster block */
5154:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (scl == 0) res = FR_DENIED;				/* No contiguous cluster block was found */
5155:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (scl == 0xFFFFFFFF) res = FR_DISK_ERR;
5156:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {	/* A contiguous free area is found */
5157:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (opt) {		/* Allocate it now */
5158:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = change_bitmap(fs, scl, tcl, 1);	/* Mark the cluster block 'in use' */
5159:Middlewares/Third_Party/FatFs/src/ff.c **** 				lclst = scl + tcl - 1;
5160:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {		/* Set it as suggested point for next allocation */
5161:Middlewares/Third_Party/FatFs/src/ff.c **** 				lclst = scl - 1;
5162:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5163:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5164:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else
5165:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5166:Middlewares/Third_Party/FatFs/src/ff.c **** 	{
5167:Middlewares/Third_Party/FatFs/src/ff.c **** 		scl = clst = stcl; ncl = 0;
ARM GAS  /tmp/ccqUXb8n.s 			page 117


5168:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (;;) {	/* Find a contiguous cluster block */
5169:Middlewares/Third_Party/FatFs/src/ff.c **** 			n = get_fat(&fp->obj, clst);
5170:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (++clst >= fs->n_fatent) clst = 2;
5171:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (n == 1) { res = FR_INT_ERR; break; }
5172:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (n == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
5173:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (n == 0) {	/* Is it a free cluster? */
5174:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (++ncl == tcl) break;	/* Break if a contiguous cluster block is found */
5175:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
5176:Middlewares/Third_Party/FatFs/src/ff.c **** 				scl = clst; ncl = 0;		/* Not a free cluster */
5177:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5178:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (clst == stcl) { res = FR_DENIED; break; }	/* No contiguous cluster? */
5179:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5180:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {	/* A contiguous free area is found */
5181:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (opt) {		/* Allocate it now */
5182:Middlewares/Third_Party/FatFs/src/ff.c **** 				for (clst = scl, n = tcl; n; clst++, n--) {	/* Create a cluster chain on the FAT */
5183:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = put_fat(fs, clst, (n == 1) ? 0xFFFFFFFF : clst + 1);
5184:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (res != FR_OK) break;
5185:Middlewares/Third_Party/FatFs/src/ff.c **** 					lclst = clst;
5186:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5187:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {		/* Set it as suggested point for next allocation */
5188:Middlewares/Third_Party/FatFs/src/ff.c **** 				lclst = scl - 1;
5189:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5190:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5191:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5192:Middlewares/Third_Party/FatFs/src/ff.c **** 
5193:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
5194:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->last_clst = lclst;		/* Set suggested start cluster to start next */
5195:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (opt) {	/* Is it allocated now? */
5196:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->obj.sclust = scl;		/* Update object allocation information */
5197:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->obj.objsize = fsz;
5198:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (_FS_EXFAT) fp->obj.stat = 2;	/* Set status 'contiguous chain' */
5199:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->flag |= FA_MODIFIED;
5200:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->free_clst <= fs->n_fatent - 2) {	/* Update FSINFO */
5201:Middlewares/Third_Party/FatFs/src/ff.c **** 				fs->free_clst -= tcl;
5202:Middlewares/Third_Party/FatFs/src/ff.c **** 				fs->fsi_flag |= 1;
5203:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5204:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5205:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5206:Middlewares/Third_Party/FatFs/src/ff.c **** 
5207:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
5208:Middlewares/Third_Party/FatFs/src/ff.c **** }
5209:Middlewares/Third_Party/FatFs/src/ff.c **** 
5210:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _USE_EXPAND && !_FS_READONLY */
5211:Middlewares/Third_Party/FatFs/src/ff.c **** 
5212:Middlewares/Third_Party/FatFs/src/ff.c **** 
5213:Middlewares/Third_Party/FatFs/src/ff.c **** 
5214:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_FORWARD
5215:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
5216:Middlewares/Third_Party/FatFs/src/ff.c **** /* Forward data to the stream directly                                   */
5217:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
5218:Middlewares/Third_Party/FatFs/src/ff.c **** 
5219:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_forward (
5220:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp, 						/* Pointer to the file object */
5221:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT (*func)(const BYTE*,UINT),	/* Pointer to the streaming function */
5222:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT btf,						/* Number of bytes to forward */
5223:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT* bf						/* Pointer to number of bytes forwarded */
5224:Middlewares/Third_Party/FatFs/src/ff.c **** )
ARM GAS  /tmp/ccqUXb8n.s 			page 118


5225:Middlewares/Third_Party/FatFs/src/ff.c **** {
5226:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
5227:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
5228:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD clst, sect;
5229:Middlewares/Third_Party/FatFs/src/ff.c **** 	FSIZE_t remain;
5230:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT rcnt, csect;
5231:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE *dbuf;
5232:Middlewares/Third_Party/FatFs/src/ff.c **** 
5233:Middlewares/Third_Party/FatFs/src/ff.c **** 
5234:Middlewares/Third_Party/FatFs/src/ff.c **** 	*bf = 0;	/* Clear transfer byte counter */
5235:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
5236:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
5237:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
5238:Middlewares/Third_Party/FatFs/src/ff.c **** 
5239:Middlewares/Third_Party/FatFs/src/ff.c **** 	remain = fp->obj.objsize - fp->fptr;
5240:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (btf > remain) btf = (UINT)remain;			/* Truncate btf by remaining bytes */
5241:Middlewares/Third_Party/FatFs/src/ff.c **** 
5242:Middlewares/Third_Party/FatFs/src/ff.c **** 	for ( ;  btf && (*func)(0, 0);					/* Repeat until all data transferred or stream goes busy */
5243:Middlewares/Third_Party/FatFs/src/ff.c **** 		fp->fptr += rcnt, *bf += rcnt, btf -= rcnt) {
5244:Middlewares/Third_Party/FatFs/src/ff.c **** 		csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
5245:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {				/* On the sector boundary? */
5246:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (csect == 0) {						/* On the cluster boundary? */
5247:Middlewares/Third_Party/FatFs/src/ff.c **** 				clst = (fp->fptr == 0) ?			/* On the top of the file? */
5248:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->obj.sclust : get_fat(&fp->obj, fp->clust);
5249:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst <= 1) ABORT(fs, FR_INT_ERR);
5250:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
5251:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->clust = clst;					/* Update current cluster */
5252:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5253:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5254:Middlewares/Third_Party/FatFs/src/ff.c **** 		sect = clust2sect(fs, fp->clust);			/* Get current data sector */
5255:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!sect) ABORT(fs, FR_INT_ERR);
5256:Middlewares/Third_Party/FatFs/src/ff.c **** 		sect += csect;
5257:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_TINY
5258:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (move_window(fs, sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window to the file dat
5259:Middlewares/Third_Party/FatFs/src/ff.c **** 		dbuf = fs->win;
5260:Middlewares/Third_Party/FatFs/src/ff.c **** #else
5261:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fp->sect != sect) {		/* Fill sector cache with file data */
5262:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
5263:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
5264:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
5265:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
5266:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5267:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5268:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
5269:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5270:Middlewares/Third_Party/FatFs/src/ff.c **** 		dbuf = fp->buf;
5271:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5272:Middlewares/Third_Party/FatFs/src/ff.c **** 		fp->sect = sect;
5273:Middlewares/Third_Party/FatFs/src/ff.c **** 		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
5274:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (rcnt > btf) rcnt = btf;					/* Clip it by btr if needed */
5275:Middlewares/Third_Party/FatFs/src/ff.c **** 		rcnt = (*func)(dbuf + ((UINT)fp->fptr % SS(fs)), rcnt);	/* Forward the file data */
5276:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!rcnt) ABORT(fs, FR_INT_ERR);
5277:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5278:Middlewares/Third_Party/FatFs/src/ff.c **** 
5279:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, FR_OK);
5280:Middlewares/Third_Party/FatFs/src/ff.c **** }
5281:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _USE_FORWARD */
ARM GAS  /tmp/ccqUXb8n.s 			page 119


5282:Middlewares/Third_Party/FatFs/src/ff.c **** 
5283:Middlewares/Third_Party/FatFs/src/ff.c **** 
5284:Middlewares/Third_Party/FatFs/src/ff.c **** 
5285:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_MKFS && !_FS_READONLY
5286:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
5287:Middlewares/Third_Party/FatFs/src/ff.c **** /* Create an FAT/exFAT volume                                            */
5288:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
5289:Middlewares/Third_Party/FatFs/src/ff.c **** 
5290:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_mkfs (
5291:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path,	/* Logical drive number */
5292:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE opt,			/* Format option */
5293:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD au,			/* Size of allocation unit (cluster) [byte] */
5294:Middlewares/Third_Party/FatFs/src/ff.c **** 	void* work,			/* Pointer to working buffer */
5295:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT len			/* Size of working buffer */
5296:Middlewares/Third_Party/FatFs/src/ff.c **** )
5297:Middlewares/Third_Party/FatFs/src/ff.c **** {
5298:Middlewares/Third_Party/FatFs/src/ff.c **** 	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
5299:Middlewares/Third_Party/FatFs/src/ff.c **** 	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
5300:Middlewares/Third_Party/FatFs/src/ff.c **** 	static const WORD cst[] = {1, 4, 16, 64, 256, 512, 0};	/* Cluster size boundary for FAT12/16 volum
5301:Middlewares/Third_Party/FatFs/src/ff.c **** 	static const WORD cst32[] = {1, 2, 4, 8, 16, 32, 0};	/* Cluster size boundary for FAT32 volume (12
5302:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE fmt, sys, *buf, *pte, pdrv, part;
5303:Middlewares/Third_Party/FatFs/src/ff.c **** 	WORD ss;
5304:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD szb_buf, sz_buf, sz_blk, n_clst, pau, sect, nsect, n;
5305:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD b_vol, b_fat, b_data;				/* Base LBA for volume, fat, data */
5306:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD sz_vol, sz_rsv, sz_fat, sz_dir;	/* Size for volume, fat, dir, data */
5307:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i;
5308:Middlewares/Third_Party/FatFs/src/ff.c **** 	int vol;
5309:Middlewares/Third_Party/FatFs/src/ff.c **** 	DSTATUS stat;
5310:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_TRIM || _FS_EXFAT
5311:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD tbl[3];
5312:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5313:Middlewares/Third_Party/FatFs/src/ff.c **** 
5314:Middlewares/Third_Party/FatFs/src/ff.c **** 
5315:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Check mounted drive and clear work area */
5316:Middlewares/Third_Party/FatFs/src/ff.c **** 	vol = get_ldnumber(&path);					/* Get target logical drive */
5317:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
5318:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
5319:Middlewares/Third_Party/FatFs/src/ff.c **** 	pdrv = LD2PD(vol);	/* Physical drive */
5320:Middlewares/Third_Party/FatFs/src/ff.c **** 	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
5321:Middlewares/Third_Party/FatFs/src/ff.c **** 
5322:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Check physical drive status */
5323:Middlewares/Third_Party/FatFs/src/ff.c **** 	stat = disk_initialize(pdrv);
5324:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (stat & STA_NOINIT) return FR_NOT_READY;
5325:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
5326:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & 
5327:Middlewares/Third_Party/FatFs/src/ff.c **** #if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
5328:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
5329:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
5330:Middlewares/Third_Party/FatFs/src/ff.c **** #else
5331:Middlewares/Third_Party/FatFs/src/ff.c **** 	ss = _MAX_SS;
5332:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5333:Middlewares/Third_Party/FatFs/src/ff.c **** 	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Che
5334:Middlewares/Third_Party/FatFs/src/ff.c **** 	au /= ss;	/* Cluster size in unit of sector */
5335:Middlewares/Third_Party/FatFs/src/ff.c **** 
5336:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get working buffer */
5337:Middlewares/Third_Party/FatFs/src/ff.c **** 	buf = (BYTE*)work;		/* Working buffer */
5338:Middlewares/Third_Party/FatFs/src/ff.c **** 	sz_buf = len / ss;		/* Size of working buffer (sector) */
ARM GAS  /tmp/ccqUXb8n.s 			page 120


5339:Middlewares/Third_Party/FatFs/src/ff.c **** 	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
5340:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!szb_buf) return FR_MKFS_ABORTED;
5341:Middlewares/Third_Party/FatFs/src/ff.c **** 
5342:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Determine where the volume to be located (b_vol, sz_vol) */
5343:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (_MULTI_PARTITION && part != 0) {
5344:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Get partition information from partition table in the MBR */
5345:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Load MBR */
5346:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ld_word(buf + BS_55AA) != 0xAA55) return FR_MKFS_ABORTED;	/* Check if MBR is valid */
5347:Middlewares/Third_Party/FatFs/src/ff.c **** 		pte = buf + (MBR_Table + (part - 1) * SZ_PTE);
5348:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
5349:Middlewares/Third_Party/FatFs/src/ff.c **** 		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
5350:Middlewares/Third_Party/FatFs/src/ff.c **** 		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
5351:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else {
5352:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Create a single-partition in this function */
5353:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
5354:Middlewares/Third_Party/FatFs/src/ff.c **** 		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
5355:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
5356:Middlewares/Third_Party/FatFs/src/ff.c **** 		sz_vol -= b_vol;						/* Volume size */
5357:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5358:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
5359:Middlewares/Third_Party/FatFs/src/ff.c **** 
5360:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Pre-determine the FAT type */
5361:Middlewares/Third_Party/FatFs/src/ff.c **** 	do {
5362:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
5363:Middlewares/Third_Party/FatFs/src/ff.c **** 			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms 
5364:Middlewares/Third_Party/FatFs/src/ff.c **** 				fmt = FS_EXFAT; break;
5365:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5366:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5367:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
5368:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (opt & FM_FAT32) {	/* FAT32 possible? */
5369:Middlewares/Third_Party/FatFs/src/ff.c **** 			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
5370:Middlewares/Third_Party/FatFs/src/ff.c **** 				fmt = FS_FAT32; break;
5371:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5372:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5373:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
5374:Middlewares/Third_Party/FatFs/src/ff.c **** 		fmt = FS_FAT16;
5375:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (0);
5376:Middlewares/Third_Party/FatFs/src/ff.c **** 
5377:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
5378:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fmt == FS_EXFAT) {	/* Create an exFAT volume */
5379:Middlewares/Third_Party/FatFs/src/ff.c **** 		DWORD szb_bit, szb_case, sum, nb, cl;
5380:Middlewares/Third_Party/FatFs/src/ff.c **** 		WCHAR ch, si;
5381:Middlewares/Third_Party/FatFs/src/ff.c **** 		UINT j, st;
5382:Middlewares/Third_Party/FatFs/src/ff.c **** 		BYTE b;
5383:Middlewares/Third_Party/FatFs/src/ff.c **** 
5384:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (sz_vol < 0x1000) return FR_MKFS_ABORTED;	/* Too small volume? */
5385:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_TRIM
5386:Middlewares/Third_Party/FatFs/src/ff.c **** 		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area may be erased *
5387:Middlewares/Third_Party/FatFs/src/ff.c **** 		disk_ioctl(pdrv, CTRL_TRIM, tbl);
5388:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5389:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Determine FAT location, data location and number of clusters */
5390:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!au) {	/* au auto-selection */
5391:Middlewares/Third_Party/FatFs/src/ff.c **** 			au = 8;
5392:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (sz_vol >= 0x80000) au = 64;		/* >= 512Ks */
5393:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (sz_vol >= 0x4000000) au = 256;	/* >= 64Ms */
5394:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5395:Middlewares/Third_Party/FatFs/src/ff.c **** 		b_fat = b_vol + 32;										/* FAT start at offset 32 */
ARM GAS  /tmp/ccqUXb8n.s 			page 121


5396:Middlewares/Third_Party/FatFs/src/ff.c **** 		sz_fat = ((sz_vol / au + 2) * 4 + ss - 1) / ss;			/* Number of FAT sectors */
5397:Middlewares/Third_Party/FatFs/src/ff.c **** 		b_data = (b_fat + sz_fat + sz_blk - 1) & ~(sz_blk - 1);	/* Align data area to the erase block bou
5398:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (b_data >= sz_vol / 2) return FR_MKFS_ABORTED;		/* Too small volume? */
5399:Middlewares/Third_Party/FatFs/src/ff.c **** 		n_clst = (sz_vol - (b_data - b_vol)) / au;				/* Number of clusters */
5400:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (n_clst <16) return FR_MKFS_ABORTED;					/* Too few clusters? */
5401:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (n_clst > MAX_EXFAT) return FR_MKFS_ABORTED;			/* Too many clusters? */
5402:Middlewares/Third_Party/FatFs/src/ff.c **** 
5403:Middlewares/Third_Party/FatFs/src/ff.c **** 		szb_bit = (n_clst + 7) / 8;						/* Size of allocation bitmap */
5404:Middlewares/Third_Party/FatFs/src/ff.c **** 		tbl[0] = (szb_bit + au * ss - 1) / (au * ss);	/* Number of allocation bitmap clusters */
5405:Middlewares/Third_Party/FatFs/src/ff.c **** 
5406:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Create a compressed up-case table */
5407:Middlewares/Third_Party/FatFs/src/ff.c **** 		sect = b_data + au * tbl[0];	/* Table start sector */
5408:Middlewares/Third_Party/FatFs/src/ff.c **** 		sum = 0;						/* Table checksum to be stored in the 82 entry */
5409:Middlewares/Third_Party/FatFs/src/ff.c **** 		st = si = i = j = szb_case = 0;
5410:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
5411:Middlewares/Third_Party/FatFs/src/ff.c **** 			switch (st) {
5412:Middlewares/Third_Party/FatFs/src/ff.c **** 			case 0:
5413:Middlewares/Third_Party/FatFs/src/ff.c **** 				ch = ff_wtoupper(si);	/* Get an up-case char */
5414:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (ch != si) {
5415:Middlewares/Third_Party/FatFs/src/ff.c **** 					si++; break;		/* Store the up-case char if exist */
5416:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5417:Middlewares/Third_Party/FatFs/src/ff.c **** 				for (j = 1; (WCHAR)(si + j) && (WCHAR)(si + j) == ff_wtoupper((WCHAR)(si + j)); j++) ;	/* Get r
5418:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (j >= 128) {
5419:Middlewares/Third_Party/FatFs/src/ff.c **** 					ch = 0xFFFF; st = 2; break;	/* Compress the no-case block if run is >= 128 */
5420:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5421:Middlewares/Third_Party/FatFs/src/ff.c **** 				st = 1;			/* Do not compress short run */
5422:Middlewares/Third_Party/FatFs/src/ff.c **** 				/* go to next case */
5423:Middlewares/Third_Party/FatFs/src/ff.c **** 			case 1:
5424:Middlewares/Third_Party/FatFs/src/ff.c **** 				ch = si++;		/* Fill the short run */
5425:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (--j == 0) st = 0;
5426:Middlewares/Third_Party/FatFs/src/ff.c **** 				break;
5427:Middlewares/Third_Party/FatFs/src/ff.c **** 
5428:Middlewares/Third_Party/FatFs/src/ff.c **** 			default:
5429:Middlewares/Third_Party/FatFs/src/ff.c **** 				ch = (WCHAR)j; si += j;	/* Number of chars to skip */
5430:Middlewares/Third_Party/FatFs/src/ff.c **** 				st = 0;
5431:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5432:Middlewares/Third_Party/FatFs/src/ff.c **** 			sum = xsum32(buf[i + 0] = (BYTE)ch, sum);		/* Put it into the write buffer */
5433:Middlewares/Third_Party/FatFs/src/ff.c **** 			sum = xsum32(buf[i + 1] = (BYTE)(ch >> 8), sum);
5434:Middlewares/Third_Party/FatFs/src/ff.c **** 			i += 2; szb_case += 2;
5435:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!si || i == szb_buf) {		/* Write buffered data when buffer full or end of process */
5436:Middlewares/Third_Party/FatFs/src/ff.c **** 				n = (i + ss - 1) / ss;
5437:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
5438:Middlewares/Third_Party/FatFs/src/ff.c **** 				sect += n; i = 0;
5439:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5440:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (si);
5441:Middlewares/Third_Party/FatFs/src/ff.c **** 		tbl[1] = (szb_case + au * ss - 1) / (au * ss);	/* Number of up-case table clusters */
5442:Middlewares/Third_Party/FatFs/src/ff.c **** 		tbl[2] = 1;										/* Number of root dir clusters */
5443:Middlewares/Third_Party/FatFs/src/ff.c **** 
5444:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Initialize the allocation bitmap */
5445:Middlewares/Third_Party/FatFs/src/ff.c **** 		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of sectors */
5446:Middlewares/Third_Party/FatFs/src/ff.c **** 		nb = tbl[0] + tbl[1] + tbl[2];					/* Number of clusters in-use by system */
5447:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
5448:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_set(buf, 0, szb_buf);
5449:Middlewares/Third_Party/FatFs/src/ff.c **** 			for (i = 0; nb >= 8 && i < szb_buf; buf[i++] = 0xFF, nb -= 8) ;
5450:Middlewares/Third_Party/FatFs/src/ff.c **** 			for (b = 1; nb && i < szb_buf; buf[i] |= b, b <<= 1, nb--) ;
5451:Middlewares/Third_Party/FatFs/src/ff.c **** 			n = (nsect > sz_buf) ? sz_buf : nsect;		/* Write the buffered data */
5452:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
ARM GAS  /tmp/ccqUXb8n.s 			page 122


5453:Middlewares/Third_Party/FatFs/src/ff.c **** 			sect += n; nsect -= n;
5454:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (nsect);
5455:Middlewares/Third_Party/FatFs/src/ff.c **** 
5456:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Initialize the FAT */
5457:Middlewares/Third_Party/FatFs/src/ff.c **** 		sect = b_fat; nsect = sz_fat;	/* Start of FAT and number of FAT sectors */
5458:Middlewares/Third_Party/FatFs/src/ff.c **** 		j = nb = cl = 0;
5459:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
5460:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_set(buf, 0, szb_buf); i = 0;	/* Clear work area and reset write index */
5461:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (cl == 0) {	/* Set entry 0 and 1 */
5462:Middlewares/Third_Party/FatFs/src/ff.c **** 				st_dword(buf + i, 0xFFFFFFF8); i += 4; cl++;
5463:Middlewares/Third_Party/FatFs/src/ff.c **** 				st_dword(buf + i, 0xFFFFFFFF); i += 4; cl++;
5464:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5465:Middlewares/Third_Party/FatFs/src/ff.c **** 			do {			/* Create chains of bitmap, up-case and root dir */
5466:Middlewares/Third_Party/FatFs/src/ff.c **** 				while (nb && i < szb_buf) {			/* Create a chain */
5467:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(buf + i, (nb > 1) ? cl + 1 : 0xFFFFFFFF);
5468:Middlewares/Third_Party/FatFs/src/ff.c **** 					i += 4; cl++; nb--;
5469:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5470:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (!nb && j < 3) nb = tbl[j++];	/* Next chain */
5471:Middlewares/Third_Party/FatFs/src/ff.c **** 			} while (nb && i < szb_buf);
5472:Middlewares/Third_Party/FatFs/src/ff.c **** 			n = (nsect > sz_buf) ? sz_buf : nsect;	/* Write the buffered data */
5473:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
5474:Middlewares/Third_Party/FatFs/src/ff.c **** 			sect += n; nsect -= n;
5475:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (nsect);
5476:Middlewares/Third_Party/FatFs/src/ff.c **** 
5477:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Initialize the root directory */
5478:Middlewares/Third_Party/FatFs/src/ff.c **** 		mem_set(buf, 0, szb_buf);
5479:Middlewares/Third_Party/FatFs/src/ff.c **** 		buf[SZDIRE * 0 + 0] = 0x83;		/* 83 entry (volume label) */
5480:Middlewares/Third_Party/FatFs/src/ff.c **** 		buf[SZDIRE * 1 + 0] = 0x81;		/* 81 entry (allocation bitmap) */
5481:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_dword(buf + SZDIRE * 1 + 20, 2);
5482:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_dword(buf + SZDIRE * 1 + 24, szb_bit);
5483:Middlewares/Third_Party/FatFs/src/ff.c **** 		buf[SZDIRE * 2 + 0] = 0x82;		/* 82 entry (up-case table) */
5484:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_dword(buf + SZDIRE * 2 + 4, sum);
5485:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_dword(buf + SZDIRE * 2 + 20, 2 + tbl[0]);
5486:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_dword(buf + SZDIRE * 2 + 24, szb_case);
5487:Middlewares/Third_Party/FatFs/src/ff.c **** 		sect = b_data + au * (tbl[0] + tbl[1]);	nsect = au;	/* Start of the root directory and number of 
5488:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {	/* Fill root directory sectors */
5489:Middlewares/Third_Party/FatFs/src/ff.c **** 			n = (nsect > sz_buf) ? sz_buf : nsect;
5490:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
5491:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_set(buf, 0, ss);
5492:Middlewares/Third_Party/FatFs/src/ff.c **** 			sect += n; nsect -= n;
5493:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (nsect);
5494:Middlewares/Third_Party/FatFs/src/ff.c **** 
5495:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Create two set of the exFAT VBR blocks */
5496:Middlewares/Third_Party/FatFs/src/ff.c **** 		sect = b_vol;
5497:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (n = 0; n < 2; n++) {
5498:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Main record (+0) */
5499:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_set(buf, 0, ss);
5500:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_cpy(buf + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11);	/* Boot jump code (x86), OEM name */
5501:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BPB_VolOfsEx, b_vol);					/* Volume offset in the physical drive [sector] */
5502:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BPB_TotSecEx, sz_vol);					/* Volume size [sector] */
5503:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BPB_FatOfsEx, b_fat - b_vol);			/* FAT offset [sector] */
5504:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BPB_FatSzEx, sz_fat);					/* FAT size [sector] */
5505:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BPB_DataOfsEx, b_data - b_vol);			/* Data offset [sector] */
5506:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BPB_NumClusEx, n_clst);					/* Number of clusters */
5507:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BPB_RootClusEx, 2 + tbl[0] + tbl[1]);	/* Root dir cluster # */
5508:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BPB_VolIDEx, GET_FATTIME());				/* VSN */
5509:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BPB_FSVerEx, 0x100);						/* File system version (1.00) */
ARM GAS  /tmp/ccqUXb8n.s 			page 123


5510:Middlewares/Third_Party/FatFs/src/ff.c **** 			for (buf[BPB_BytsPerSecEx] = 0, i = ss; i >>= 1; buf[BPB_BytsPerSecEx]++) ;	/* Log2 of sector si
5511:Middlewares/Third_Party/FatFs/src/ff.c **** 			for (buf[BPB_SecPerClusEx] = 0, i = au; i >>= 1; buf[BPB_SecPerClusEx]++) ;	/* Log2 of cluster s
5512:Middlewares/Third_Party/FatFs/src/ff.c **** 			buf[BPB_NumFATsEx] = 1;					/* Number of FATs */
5513:Middlewares/Third_Party/FatFs/src/ff.c **** 			buf[BPB_DrvNumEx] = 0x80;				/* Drive number (for int13) */
5514:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BS_BootCodeEx, 0xFEEB);	/* Boot code (x86) */
5515:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BS_55AA, 0xAA55);			/* Signature (placed here regardless of sector size) */
5516:Middlewares/Third_Party/FatFs/src/ff.c **** 			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
5517:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (i != BPB_VolFlagEx && i != BPB_VolFlagEx + 1 && i != BPB_PercInUseEx) sum = xsum32(buf[i], 
5518:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5519:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
5520:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Extended bootstrap record (+1..+8) */
5521:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_set(buf, 0, ss);
5522:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + ss - 2, 0xAA55);	/* Signature (placed at end of sector) */
5523:Middlewares/Third_Party/FatFs/src/ff.c **** 			for (j = 1; j < 9; j++) {
5524:Middlewares/Third_Party/FatFs/src/ff.c **** 				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
5525:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
5526:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5527:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* OEM/Reserved record (+9..+10) */
5528:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_set(buf, 0, ss);
5529:Middlewares/Third_Party/FatFs/src/ff.c **** 			for ( ; j < 11; j++) {
5530:Middlewares/Third_Party/FatFs/src/ff.c **** 				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
5531:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
5532:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5533:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Sum record (+11) */
5534:Middlewares/Third_Party/FatFs/src/ff.c **** 			for (i = 0; i < ss; i += 4) st_dword(buf + i, sum);		/* Fill with checksum value */
5535:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
5536:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5537:Middlewares/Third_Party/FatFs/src/ff.c **** 
5538:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else
5539:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* _FS_EXFAT */
5540:Middlewares/Third_Party/FatFs/src/ff.c **** 	{	/* Create an FAT12/16/32 volume */
5541:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
5542:Middlewares/Third_Party/FatFs/src/ff.c **** 			pau = au;
5543:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Pre-determine number of clusters and FAT sub-type */
5544:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fmt == FS_FAT32) {	/* FAT32 volume */
5545:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (!pau) {	/* au auto-selection */
5546:Middlewares/Third_Party/FatFs/src/ff.c **** 					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
5547:Middlewares/Third_Party/FatFs/src/ff.c **** 					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
5548:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5549:Middlewares/Third_Party/FatFs/src/ff.c **** 				n_clst = sz_vol / pau;	/* Number of clusters */
5550:Middlewares/Third_Party/FatFs/src/ff.c **** 				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
5551:Middlewares/Third_Party/FatFs/src/ff.c **** 				sz_rsv = 32;	/* Number of reserved sectors */
5552:Middlewares/Third_Party/FatFs/src/ff.c **** 				sz_dir = 0;		/* No static directory */
5553:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
5554:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {				/* FAT12/16 volume */
5555:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (!pau) {	/* au auto-selection */
5556:Middlewares/Third_Party/FatFs/src/ff.c **** 					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
5557:Middlewares/Third_Party/FatFs/src/ff.c **** 					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
5558:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5559:Middlewares/Third_Party/FatFs/src/ff.c **** 				n_clst = sz_vol / pau;
5560:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (n_clst > MAX_FAT12) {
5561:Middlewares/Third_Party/FatFs/src/ff.c **** 					n = n_clst * 2 + 4;		/* FAT size [byte] */
5562:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {
5563:Middlewares/Third_Party/FatFs/src/ff.c **** 					fmt = FS_FAT12;
5564:Middlewares/Third_Party/FatFs/src/ff.c **** 					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
5565:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5566:Middlewares/Third_Party/FatFs/src/ff.c **** 				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
ARM GAS  /tmp/ccqUXb8n.s 			page 124


5567:Middlewares/Third_Party/FatFs/src/ff.c **** 				sz_rsv = 1;						/* Number of reserved sectors */
5568:Middlewares/Third_Party/FatFs/src/ff.c **** 				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
5569:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5570:Middlewares/Third_Party/FatFs/src/ff.c **** 			b_fat = b_vol + sz_rsv;						/* FAT base */
5571:Middlewares/Third_Party/FatFs/src/ff.c **** 			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
5572:Middlewares/Third_Party/FatFs/src/ff.c **** 
5573:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Align data base to erase block boundary (for flash memory media) */
5574:Middlewares/Third_Party/FatFs/src/ff.c **** 			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current d
5575:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
5576:Middlewares/Third_Party/FatFs/src/ff.c **** 				sz_rsv += n; b_fat += n;
5577:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {					/* FAT12/16: Expand FAT size */
5578:Middlewares/Third_Party/FatFs/src/ff.c **** 				sz_fat += n / n_fats;
5579:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5580:Middlewares/Third_Party/FatFs/src/ff.c **** 
5581:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Determine number of clusters and final check of validity of the FAT sub-type */
5582:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
5583:Middlewares/Third_Party/FatFs/src/ff.c **** 			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
5584:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fmt == FS_FAT32) {
5585:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
5586:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
5587:Middlewares/Third_Party/FatFs/src/ff.c **** 					return FR_MKFS_ABORTED;
5588:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5589:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5590:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fmt == FS_FAT16) {
5591:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
5592:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (!au && (pau * 2) <= 64) {
5593:Middlewares/Third_Party/FatFs/src/ff.c **** 						au = pau * 2; continue;		/* Adjust cluster size and retry */
5594:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
5595:Middlewares/Third_Party/FatFs/src/ff.c **** 					if ((opt & FM_FAT32)) {
5596:Middlewares/Third_Party/FatFs/src/ff.c **** 						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
5597:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
5598:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
5599:Middlewares/Third_Party/FatFs/src/ff.c **** 					return FR_MKFS_ABORTED;
5600:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5601:Middlewares/Third_Party/FatFs/src/ff.c **** 				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
5602:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
5603:Middlewares/Third_Party/FatFs/src/ff.c **** 					return FR_MKFS_ABORTED;
5604:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5605:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5606:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT1
5607:Middlewares/Third_Party/FatFs/src/ff.c **** 
5608:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Ok, it is the valid cluster configuration */
5609:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
5610:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (1);
5611:Middlewares/Third_Party/FatFs/src/ff.c **** 
5612:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_TRIM
5613:Middlewares/Third_Party/FatFs/src/ff.c **** 		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased *
5614:Middlewares/Third_Party/FatFs/src/ff.c **** 		disk_ioctl(pdrv, CTRL_TRIM, tbl);
5615:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5616:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Create FAT VBR */
5617:Middlewares/Third_Party/FatFs/src/ff.c **** 		mem_set(buf, 0, ss);
5618:Middlewares/Third_Party/FatFs/src/ff.c **** 		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
5619:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
5620:Middlewares/Third_Party/FatFs/src/ff.c **** 		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
5621:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
5622:Middlewares/Third_Party/FatFs/src/ff.c **** 		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
5623:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root direc
ARM GAS  /tmp/ccqUXb8n.s 			page 125


5624:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (sz_vol < 0x10000) {
5625:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
5626:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
5627:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
5628:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5629:Middlewares/Third_Party/FatFs/src/ff.c **** 		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
5630:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
5631:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
5632:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
5633:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fmt == FS_FAT32) {
5634:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
5635:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
5636:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
5637:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
5638:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
5639:Middlewares/Third_Party/FatFs/src/ff.c **** 			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
5640:Middlewares/Third_Party/FatFs/src/ff.c **** 			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
5641:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
5642:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
5643:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
5644:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
5645:Middlewares/Third_Party/FatFs/src/ff.c **** 			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
5646:Middlewares/Third_Party/FatFs/src/ff.c **** 			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
5647:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
5648:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5649:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size)
5650:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector 
5651:Middlewares/Third_Party/FatFs/src/ff.c **** 
5652:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Create FSINFO record if needed */
5653:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fmt == FS_FAT32) {
5654:Middlewares/Third_Party/FatFs/src/ff.c **** 			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
5655:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_set(buf, 0, ss);
5656:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + FSI_LeadSig, 0x41615252);
5657:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + FSI_StrucSig, 0x61417272);
5658:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
5659:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
5660:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BS_55AA, 0xAA55);
5661:Middlewares/Third_Party/FatFs/src/ff.c **** 			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
5662:Middlewares/Third_Party/FatFs/src/ff.c **** 			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
5663:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5664:Middlewares/Third_Party/FatFs/src/ff.c **** 
5665:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Initialize FAT area */
5666:Middlewares/Third_Party/FatFs/src/ff.c **** 		mem_set(buf, 0, (UINT)szb_buf);
5667:Middlewares/Third_Party/FatFs/src/ff.c **** 		sect = b_fat;		/* FAT start sector */
5668:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
5669:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fmt == FS_FAT32) {
5670:Middlewares/Third_Party/FatFs/src/ff.c **** 				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
5671:Middlewares/Third_Party/FatFs/src/ff.c **** 				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
5672:Middlewares/Third_Party/FatFs/src/ff.c **** 				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
5673:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
5674:Middlewares/Third_Party/FatFs/src/ff.c **** 				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
5675:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5676:Middlewares/Third_Party/FatFs/src/ff.c **** 			nsect = sz_fat;		/* Number of FAT sectors */
5677:Middlewares/Third_Party/FatFs/src/ff.c **** 			do {	/* Fill FAT sectors */
5678:Middlewares/Third_Party/FatFs/src/ff.c **** 				n = (nsect > sz_buf) ? sz_buf : nsect;
5679:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
5680:Middlewares/Third_Party/FatFs/src/ff.c **** 				mem_set(buf, 0, ss);
ARM GAS  /tmp/ccqUXb8n.s 			page 126


5681:Middlewares/Third_Party/FatFs/src/ff.c **** 				sect += n; nsect -= n;
5682:Middlewares/Third_Party/FatFs/src/ff.c **** 			} while (nsect);
5683:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5684:Middlewares/Third_Party/FatFs/src/ff.c **** 
5685:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Initialize root directory (fill with zero) */
5686:Middlewares/Third_Party/FatFs/src/ff.c **** 		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
5687:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
5688:Middlewares/Third_Party/FatFs/src/ff.c **** 			n = (nsect > sz_buf) ? sz_buf : nsect;
5689:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
5690:Middlewares/Third_Party/FatFs/src/ff.c **** 			sect += n; nsect -= n;
5691:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (nsect);
5692:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5693:Middlewares/Third_Party/FatFs/src/ff.c **** 
5694:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Determine system ID in the partition table */
5695:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (_FS_EXFAT && fmt == FS_EXFAT) {
5696:Middlewares/Third_Party/FatFs/src/ff.c **** 		sys = 0x07;			/* HPFS/NTFS/exFAT */
5697:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else {
5698:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fmt == FS_FAT32) {
5699:Middlewares/Third_Party/FatFs/src/ff.c **** 			sys = 0x0C;		/* FAT32X */
5700:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
5701:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (sz_vol >= 0x10000) {
5702:Middlewares/Third_Party/FatFs/src/ff.c **** 				sys = 0x06;	/* FAT12/16 (>=64KS) */
5703:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
5704:Middlewares/Third_Party/FatFs/src/ff.c **** 				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
5705:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5706:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5707:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5708:Middlewares/Third_Party/FatFs/src/ff.c **** 
5709:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Update partition information */
5710:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (_MULTI_PARTITION && part != 0) {	/* Created in the existing partition */
5711:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Update system ID in the partition table */
5712:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
5713:Middlewares/Third_Party/FatFs/src/ff.c **** 		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
5714:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
5715:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else {								/* Created as a new single partition */
5716:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
5717:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_set(buf, 0, ss);
5718:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
5719:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
5720:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_Boot] = 0;					/* Boot indicator */
5721:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_StHead] = 1;				/* Start head */
5722:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_StSec] = 1;					/* Start sector */
5723:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_StCyl] = 0;					/* Start cylinder */
5724:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_System] = sys;				/* System type */
5725:Middlewares/Third_Party/FatFs/src/ff.c **** 			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
5726:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_EdHead] = 254;				/* End head */
5727:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
5728:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
5729:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
5730:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
5731:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
5732:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5733:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5734:Middlewares/Third_Party/FatFs/src/ff.c **** 
5735:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
5736:Middlewares/Third_Party/FatFs/src/ff.c **** 
5737:Middlewares/Third_Party/FatFs/src/ff.c **** 	return FR_OK;
ARM GAS  /tmp/ccqUXb8n.s 			page 127


5738:Middlewares/Third_Party/FatFs/src/ff.c **** }
5739:Middlewares/Third_Party/FatFs/src/ff.c **** 
5740:Middlewares/Third_Party/FatFs/src/ff.c **** 
5741:Middlewares/Third_Party/FatFs/src/ff.c **** 
5742:Middlewares/Third_Party/FatFs/src/ff.c **** #if _MULTI_PARTITION
5743:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
5744:Middlewares/Third_Party/FatFs/src/ff.c **** /* Create partition table on the physical drive                          */
5745:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
5746:Middlewares/Third_Party/FatFs/src/ff.c **** 
5747:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_fdisk (
5748:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE pdrv,			/* Physical drive number */
5749:Middlewares/Third_Party/FatFs/src/ff.c **** 	const DWORD* szt,	/* Pointer to the size table for each partitions */
5750:Middlewares/Third_Party/FatFs/src/ff.c **** 	void* work			/* Pointer to the working buffer */
5751:Middlewares/Third_Party/FatFs/src/ff.c **** )
5752:Middlewares/Third_Party/FatFs/src/ff.c **** {
5753:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, n, sz_cyl, tot_cyl, b_cyl, e_cyl, p_cyl;
5754:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE s_hd, e_hd, *p, *buf = (BYTE*)work;
5755:Middlewares/Third_Party/FatFs/src/ff.c **** 	DSTATUS stat;
5756:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD sz_disk, sz_part, s_part;
5757:Middlewares/Third_Party/FatFs/src/ff.c **** 
5758:Middlewares/Third_Party/FatFs/src/ff.c **** 
5759:Middlewares/Third_Party/FatFs/src/ff.c **** 	stat = disk_initialize(pdrv);
5760:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (stat & STA_NOINIT) return FR_NOT_READY;
5761:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
5762:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_disk)) return FR_DISK_ERR;
5763:Middlewares/Third_Party/FatFs/src/ff.c **** 
5764:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Determine the CHS without any consideration of the drive geometry */
5765:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (n = 16; n < 256 && sz_disk / n / 63 > 1024; n *= 2) ;
5766:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (n == 256) n--;
5767:Middlewares/Third_Party/FatFs/src/ff.c **** 	e_hd = n - 1;
5768:Middlewares/Third_Party/FatFs/src/ff.c **** 	sz_cyl = 63 * n;
5769:Middlewares/Third_Party/FatFs/src/ff.c **** 	tot_cyl = sz_disk / sz_cyl;
5770:Middlewares/Third_Party/FatFs/src/ff.c **** 
5771:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Create partition table */
5772:Middlewares/Third_Party/FatFs/src/ff.c **** 	mem_set(buf, 0, _MAX_SS);
5773:Middlewares/Third_Party/FatFs/src/ff.c **** 	p = buf + MBR_Table; b_cyl = 0;
5774:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (i = 0; i < 4; i++, p += SZ_PTE) {
5775:Middlewares/Third_Party/FatFs/src/ff.c **** 		p_cyl = (szt[i] <= 100U) ? (DWORD)tot_cyl * szt[i] / 100 : szt[i] / sz_cyl;	/* Number of cylinder
5776:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!p_cyl) continue;
5777:Middlewares/Third_Party/FatFs/src/ff.c **** 		s_part = (DWORD)sz_cyl * b_cyl;
5778:Middlewares/Third_Party/FatFs/src/ff.c **** 		sz_part = (DWORD)sz_cyl * p_cyl;
5779:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i == 0) {	/* Exclude first track of cylinder 0 */
5780:Middlewares/Third_Party/FatFs/src/ff.c **** 			s_hd = 1;
5781:Middlewares/Third_Party/FatFs/src/ff.c **** 			s_part += 63; sz_part -= 63;
5782:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
5783:Middlewares/Third_Party/FatFs/src/ff.c **** 			s_hd = 0;
5784:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5785:Middlewares/Third_Party/FatFs/src/ff.c **** 		e_cyl = b_cyl + p_cyl - 1;	/* End cylinder */
5786:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (e_cyl >= tot_cyl) return FR_INVALID_PARAMETER;
5787:Middlewares/Third_Party/FatFs/src/ff.c **** 
5788:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Set partition table */
5789:Middlewares/Third_Party/FatFs/src/ff.c **** 		p[1] = s_hd;						/* Start head */
5790:Middlewares/Third_Party/FatFs/src/ff.c **** 		p[2] = (BYTE)((b_cyl >> 2) + 1);	/* Start sector */
5791:Middlewares/Third_Party/FatFs/src/ff.c **** 		p[3] = (BYTE)b_cyl;					/* Start cylinder */
5792:Middlewares/Third_Party/FatFs/src/ff.c **** 		p[4] = 0x07;						/* System type (temporary setting) */
5793:Middlewares/Third_Party/FatFs/src/ff.c **** 		p[5] = e_hd;						/* End head */
5794:Middlewares/Third_Party/FatFs/src/ff.c **** 		p[6] = (BYTE)((e_cyl >> 2) + 63);	/* End sector */
ARM GAS  /tmp/ccqUXb8n.s 			page 128


5795:Middlewares/Third_Party/FatFs/src/ff.c **** 		p[7] = (BYTE)e_cyl;					/* End cylinder */
5796:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_dword(p + 8, s_part);			/* Start sector in LBA */
5797:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_dword(p + 12, sz_part);			/* Number of sectors */
5798:Middlewares/Third_Party/FatFs/src/ff.c **** 
5799:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Next partition */
5800:Middlewares/Third_Party/FatFs/src/ff.c **** 		b_cyl += p_cyl;
5801:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5802:Middlewares/Third_Party/FatFs/src/ff.c **** 	st_word(p, 0xAA55);
5803:Middlewares/Third_Party/FatFs/src/ff.c **** 
5804:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Write it to the MBR */
5805:Middlewares/Third_Party/FatFs/src/ff.c **** 	return (disk_write(pdrv, buf, 0, 1) != RES_OK || disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) ? FR_DI
5806:Middlewares/Third_Party/FatFs/src/ff.c **** }
5807:Middlewares/Third_Party/FatFs/src/ff.c **** 
5808:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _MULTI_PARTITION */
5809:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _USE_MKFS && !_FS_READONLY */
5810:Middlewares/Third_Party/FatFs/src/ff.c **** 
5811:Middlewares/Third_Party/FatFs/src/ff.c **** 
5812:Middlewares/Third_Party/FatFs/src/ff.c **** 
5813:Middlewares/Third_Party/FatFs/src/ff.c **** 
5814:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_STRFUNC
5815:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
5816:Middlewares/Third_Party/FatFs/src/ff.c **** /* Get a string from the file                                            */
5817:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
5818:Middlewares/Third_Party/FatFs/src/ff.c **** 
5819:Middlewares/Third_Party/FatFs/src/ff.c **** TCHAR* f_gets (
5820:Middlewares/Third_Party/FatFs/src/ff.c **** 	TCHAR* buff,	/* Pointer to the string buffer to read */
5821:Middlewares/Third_Party/FatFs/src/ff.c **** 	int len,		/* Size of string buffer (characters) */
5822:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp			/* Pointer to the file object */
5823:Middlewares/Third_Party/FatFs/src/ff.c **** )
5824:Middlewares/Third_Party/FatFs/src/ff.c **** {
5825:Middlewares/Third_Party/FatFs/src/ff.c **** 	int n = 0;
5826:Middlewares/Third_Party/FatFs/src/ff.c **** 	TCHAR c, *p = buff;
5827:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE s[2];
5828:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT rc;
5829:Middlewares/Third_Party/FatFs/src/ff.c **** 
5830:Middlewares/Third_Party/FatFs/src/ff.c **** 
5831:Middlewares/Third_Party/FatFs/src/ff.c **** 	while (n < len - 1) {	/* Read characters until buffer gets filled */
5832:Middlewares/Third_Party/FatFs/src/ff.c **** #if _LFN_UNICODE
5833:Middlewares/Third_Party/FatFs/src/ff.c **** #if _STRF_ENCODE == 3		/* Read a character in UTF-8 */
5834:Middlewares/Third_Party/FatFs/src/ff.c **** 		f_read(fp, s, 1, &rc);
5835:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (rc != 1) break;
5836:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = s[0];
5837:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c >= 0x80) {
5838:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (c < 0xC0) continue;	/* Skip stray trailer */
5839:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (c < 0xE0) {			/* Two-byte sequence (0x80-0x7FF) */
5840:Middlewares/Third_Party/FatFs/src/ff.c **** 				f_read(fp, s, 1, &rc);
5841:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (rc != 1) break;
5842:Middlewares/Third_Party/FatFs/src/ff.c **** 				c = (c & 0x1F) << 6 | (s[0] & 0x3F);
5843:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (c < 0x80) c = '?';	/* Reject invalid code range */
5844:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
5845:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (c < 0xF0) {		/* Three-byte sequence (0x800-0xFFFF) */
5846:Middlewares/Third_Party/FatFs/src/ff.c **** 					f_read(fp, s, 2, &rc);
5847:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (rc != 2) break;
5848:Middlewares/Third_Party/FatFs/src/ff.c **** 					c = c << 12 | (s[0] & 0x3F) << 6 | (s[1] & 0x3F);
5849:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (c < 0x800) c = '?';	/* Reject invalid code range */
5850:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {			/* Reject four-byte sequence */
5851:Middlewares/Third_Party/FatFs/src/ff.c **** 					c = '?';
ARM GAS  /tmp/ccqUXb8n.s 			page 129


5852:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5853:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5854:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5855:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _STRF_ENCODE == 2		/* Read a character in UTF-16BE */
5856:Middlewares/Third_Party/FatFs/src/ff.c **** 		f_read(fp, s, 2, &rc);
5857:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (rc != 2) break;
5858:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = s[1] + (s[0] << 8);
5859:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _STRF_ENCODE == 1		/* Read a character in UTF-16LE */
5860:Middlewares/Third_Party/FatFs/src/ff.c **** 		f_read(fp, s, 2, &rc);
5861:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (rc != 2) break;
5862:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = s[0] + (s[1] << 8);
5863:Middlewares/Third_Party/FatFs/src/ff.c **** #else						/* Read a character in ANSI/OEM */
5864:Middlewares/Third_Party/FatFs/src/ff.c **** 		f_read(fp, s, 1, &rc);
5865:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (rc != 1) break;
5866:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = s[0];
5867:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (IsDBCS1(c)) {
5868:Middlewares/Third_Party/FatFs/src/ff.c **** 			f_read(fp, s, 1, &rc);
5869:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (rc != 1) break;
5870:Middlewares/Third_Party/FatFs/src/ff.c **** 			c = (c << 8) + s[0];
5871:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5872:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = ff_convert(c, 1);	/* OEM -> Unicode */
5873:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!c) c = '?';
5874:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5875:Middlewares/Third_Party/FatFs/src/ff.c **** #else						/* Read a character without conversion */
5876:Middlewares/Third_Party/FatFs/src/ff.c **** 		f_read(fp, s, 1, &rc);
5877:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (rc != 1) break;
5878:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = s[0];
5879:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5880:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
5881:Middlewares/Third_Party/FatFs/src/ff.c **** 		*p++ = c;
5882:Middlewares/Third_Party/FatFs/src/ff.c **** 		n++;
5883:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == '\n') break;		/* Break on EOL */
5884:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5885:Middlewares/Third_Party/FatFs/src/ff.c **** 	*p = 0;
5886:Middlewares/Third_Party/FatFs/src/ff.c **** 	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
5887:Middlewares/Third_Party/FatFs/src/ff.c **** }
5888:Middlewares/Third_Party/FatFs/src/ff.c **** 
5889:Middlewares/Third_Party/FatFs/src/ff.c **** 
5890:Middlewares/Third_Party/FatFs/src/ff.c **** 
5891:Middlewares/Third_Party/FatFs/src/ff.c **** 
5892:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
5893:Middlewares/Third_Party/FatFs/src/ff.c **** #include <stdarg.h>
5894:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
5895:Middlewares/Third_Party/FatFs/src/ff.c **** /* Put a character to the file                                           */
5896:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
5897:Middlewares/Third_Party/FatFs/src/ff.c **** 
5898:Middlewares/Third_Party/FatFs/src/ff.c **** typedef struct {
5899:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL *fp;		/* Ptr to the writing file */
5900:Middlewares/Third_Party/FatFs/src/ff.c **** 	int idx, nchr;	/* Write index of buf[] (-1:error), number of chars written */
5901:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE buf[64];	/* Write buffer */
5902:Middlewares/Third_Party/FatFs/src/ff.c **** } putbuff;
5903:Middlewares/Third_Party/FatFs/src/ff.c **** 
5904:Middlewares/Third_Party/FatFs/src/ff.c **** 
5905:Middlewares/Third_Party/FatFs/src/ff.c **** static
5906:Middlewares/Third_Party/FatFs/src/ff.c **** void putc_bfd (		/* Buffered write with code conversion */
5907:Middlewares/Third_Party/FatFs/src/ff.c **** 	putbuff* pb,
5908:Middlewares/Third_Party/FatFs/src/ff.c **** 	TCHAR c
ARM GAS  /tmp/ccqUXb8n.s 			page 130


5909:Middlewares/Third_Party/FatFs/src/ff.c **** )
5910:Middlewares/Third_Party/FatFs/src/ff.c **** {
5911:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT bw;
5912:Middlewares/Third_Party/FatFs/src/ff.c **** 	int i;
5913:Middlewares/Third_Party/FatFs/src/ff.c **** 
5914:Middlewares/Third_Party/FatFs/src/ff.c **** 
5915:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
5916:Middlewares/Third_Party/FatFs/src/ff.c **** 		putc_bfd(pb, '\r');
5917:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5918:Middlewares/Third_Party/FatFs/src/ff.c **** 
5919:Middlewares/Third_Party/FatFs/src/ff.c **** 	i = pb->idx;		/* Write index of pb->buf[] */
5920:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (i < 0) return;
5921:Middlewares/Third_Party/FatFs/src/ff.c **** 
5922:Middlewares/Third_Party/FatFs/src/ff.c **** #if _LFN_UNICODE
5923:Middlewares/Third_Party/FatFs/src/ff.c **** #if _STRF_ENCODE == 3			/* Write a character in UTF-8 */
5924:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (c < 0x80) {				/* 7-bit */
5925:Middlewares/Third_Party/FatFs/src/ff.c **** 		pb->buf[i++] = (BYTE)c;
5926:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else {
5927:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c < 0x800) {		/* 11-bit */
5928:Middlewares/Third_Party/FatFs/src/ff.c **** 			pb->buf[i++] = (BYTE)(0xC0 | c >> 6);
5929:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {				/* 16-bit */
5930:Middlewares/Third_Party/FatFs/src/ff.c **** 			pb->buf[i++] = (BYTE)(0xE0 | c >> 12);
5931:Middlewares/Third_Party/FatFs/src/ff.c **** 			pb->buf[i++] = (BYTE)(0x80 | (c >> 6 & 0x3F));
5932:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5933:Middlewares/Third_Party/FatFs/src/ff.c **** 		pb->buf[i++] = (BYTE)(0x80 | (c & 0x3F));
5934:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5935:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _STRF_ENCODE == 2			/* Write a character in UTF-16BE */
5936:Middlewares/Third_Party/FatFs/src/ff.c **** 	pb->buf[i++] = (BYTE)(c >> 8);
5937:Middlewares/Third_Party/FatFs/src/ff.c **** 	pb->buf[i++] = (BYTE)c;
5938:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _STRF_ENCODE == 1			/* Write a character in UTF-16LE */
5939:Middlewares/Third_Party/FatFs/src/ff.c **** 	pb->buf[i++] = (BYTE)c;
5940:Middlewares/Third_Party/FatFs/src/ff.c **** 	pb->buf[i++] = (BYTE)(c >> 8);
5941:Middlewares/Third_Party/FatFs/src/ff.c **** #else							/* Write a character in ANSI/OEM */
5942:Middlewares/Third_Party/FatFs/src/ff.c **** 	c = ff_convert(c, 0);	/* Unicode -> OEM */
5943:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!c) c = '?';
5944:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (c >= 0x100)
5945:Middlewares/Third_Party/FatFs/src/ff.c **** 		pb->buf[i++] = (BYTE)(c >> 8);
5946:Middlewares/Third_Party/FatFs/src/ff.c **** 	pb->buf[i++] = (BYTE)c;
5947:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5948:Middlewares/Third_Party/FatFs/src/ff.c **** #else							/* Write a character without conversion */
5949:Middlewares/Third_Party/FatFs/src/ff.c **** 	pb->buf[i++] = (BYTE)c;
5950:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5951:Middlewares/Third_Party/FatFs/src/ff.c **** 
5952:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
5953:Middlewares/Third_Party/FatFs/src/ff.c **** 		f_write(pb->fp, pb->buf, (UINT)i, &bw);
5954:Middlewares/Third_Party/FatFs/src/ff.c **** 		i = (bw == (UINT)i) ? 0 : -1;
5955:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5956:Middlewares/Third_Party/FatFs/src/ff.c **** 	pb->idx = i;
5957:Middlewares/Third_Party/FatFs/src/ff.c **** 	pb->nchr++;
5958:Middlewares/Third_Party/FatFs/src/ff.c **** }
5959:Middlewares/Third_Party/FatFs/src/ff.c **** 
5960:Middlewares/Third_Party/FatFs/src/ff.c **** 
5961:Middlewares/Third_Party/FatFs/src/ff.c **** static
5962:Middlewares/Third_Party/FatFs/src/ff.c **** int putc_flush (		/* Flush left characters in the buffer */
5963:Middlewares/Third_Party/FatFs/src/ff.c **** 	putbuff* pb
5964:Middlewares/Third_Party/FatFs/src/ff.c **** )
5965:Middlewares/Third_Party/FatFs/src/ff.c **** {
ARM GAS  /tmp/ccqUXb8n.s 			page 131


5966:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT nw;
5967:Middlewares/Third_Party/FatFs/src/ff.c **** 
5968:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (   pb->idx >= 0	/* Flush buffered characters to the file */
5969:Middlewares/Third_Party/FatFs/src/ff.c **** 		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
5970:Middlewares/Third_Party/FatFs/src/ff.c **** 		&& (UINT)pb->idx == nw) return pb->nchr;
5971:Middlewares/Third_Party/FatFs/src/ff.c **** 	return EOF;
5972:Middlewares/Third_Party/FatFs/src/ff.c **** }
5973:Middlewares/Third_Party/FatFs/src/ff.c **** 
5974:Middlewares/Third_Party/FatFs/src/ff.c **** 
5975:Middlewares/Third_Party/FatFs/src/ff.c **** static
5976:Middlewares/Third_Party/FatFs/src/ff.c **** void putc_init (		/* Initialize write buffer */
5977:Middlewares/Third_Party/FatFs/src/ff.c **** 	putbuff* pb,
5978:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp
5979:Middlewares/Third_Party/FatFs/src/ff.c **** )
5980:Middlewares/Third_Party/FatFs/src/ff.c **** {
 1417              		.loc 1 5980 0
 1418              		.cfi_startproc
 1419              		@ args = 0, pretend = 0, frame = 0
 1420              		@ frame_needed = 0, uses_anonymous_args = 0
 1421              		@ link register save eliminated.
 1422              	.LVL188:
5981:Middlewares/Third_Party/FatFs/src/ff.c **** 	pb->fp = fp;
 1423              		.loc 1 5981 0
 1424 0000 0160     		str	r1, [r0]
5982:Middlewares/Third_Party/FatFs/src/ff.c **** 	pb->nchr = pb->idx = 0;
 1425              		.loc 1 5982 0
 1426 0002 0023     		movs	r3, #0
 1427 0004 4360     		str	r3, [r0, #4]
 1428 0006 8360     		str	r3, [r0, #8]
5983:Middlewares/Third_Party/FatFs/src/ff.c **** }
 1429              		.loc 1 5983 0
 1430 0008 7047     		bx	lr
 1431              		.cfi_endproc
 1432              	.LFE201:
 1434              		.section	.text.lock_fs,"ax",%progbits
 1435              		.align	1
 1436              		.syntax unified
 1437              		.thumb
 1438              		.thumb_func
 1439              		.fpu fpv5-sp-d16
 1441              	lock_fs:
 1442              	.LFB149:
 745:Middlewares/Third_Party/FatFs/src/ff.c **** 	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 1443              		.loc 1 745 0
 1444              		.cfi_startproc
 1445              		@ args = 0, pretend = 0, frame = 0
 1446              		@ frame_needed = 0, uses_anonymous_args = 0
 1447              	.LVL189:
 1448 0000 08B5     		push	{r3, lr}
 1449              	.LCFI20:
 1450              		.cfi_def_cfa_offset 8
 1451              		.cfi_offset 3, -8
 1452              		.cfi_offset 14, -4
 746:Middlewares/Third_Party/FatFs/src/ff.c **** }
 1453              		.loc 1 746 0
 1454 0002 30B1     		cbz	r0, .L152
 746:Middlewares/Third_Party/FatFs/src/ff.c **** }
ARM GAS  /tmp/ccqUXb8n.s 			page 132


 1455              		.loc 1 746 0 is_stmt 0 discriminator 1
 1456 0004 C068     		ldr	r0, [r0, #12]
 1457              	.LVL190:
 1458 0006 FFF7FEFF 		bl	ff_req_grant
 1459              	.LVL191:
 1460 000a 0346     		mov	r3, r0
 1461 000c 10B1     		cbz	r0, .L150
 746:Middlewares/Third_Party/FatFs/src/ff.c **** }
 1462              		.loc 1 746 0
 1463 000e 0123     		movs	r3, #1
 1464 0010 00E0     		b	.L150
 1465              	.LVL192:
 1466              	.L152:
 1467 0012 0023     		movs	r3, #0
 1468              	.LVL193:
 1469              	.L150:
 747:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1470              		.loc 1 747 0 is_stmt 1
 1471 0014 1846     		mov	r0, r3
 1472 0016 08BD     		pop	{r3, pc}
 1473              		.cfi_endproc
 1474              	.LFE149:
 1476              		.section	.text.validate,"ax",%progbits
 1477              		.align	1
 1478              		.syntax unified
 1479              		.thumb
 1480              		.thumb_func
 1481              		.fpu fpv5-sp-d16
 1483              	validate:
 1484              	.LFB180:
3220:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 1485              		.loc 1 3220 0
 1486              		.cfi_startproc
 1487              		@ args = 0, pretend = 0, frame = 0
 1488              		@ frame_needed = 0, uses_anonymous_args = 0
 1489              	.LVL194:
 1490 0000 38B5     		push	{r3, r4, r5, lr}
 1491              	.LCFI21:
 1492              		.cfi_def_cfa_offset 16
 1493              		.cfi_offset 3, -16
 1494              		.cfi_offset 4, -12
 1495              		.cfi_offset 5, -8
 1496              		.cfi_offset 14, -4
 1497 0002 0D46     		mov	r5, r1
3223:Middlewares/Third_Party/FatFs/src/ff.c **** 		*fs = 0;
 1498              		.loc 1 3223 0
 1499 0004 40B1     		cbz	r0, .L155
 1500 0006 0446     		mov	r4, r0
3223:Middlewares/Third_Party/FatFs/src/ff.c **** 		*fs = 0;
 1501              		.loc 1 3223 0 is_stmt 0 discriminator 1
 1502 0008 0368     		ldr	r3, [r0]
 1503 000a 2BB1     		cbz	r3, .L155
3223:Middlewares/Third_Party/FatFs/src/ff.c **** 		*fs = 0;
 1504              		.loc 1 3223 0 discriminator 2
 1505 000c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1506 000e 1AB1     		cbz	r2, .L155
3223:Middlewares/Third_Party/FatFs/src/ff.c **** 		*fs = 0;
ARM GAS  /tmp/ccqUXb8n.s 			page 133


 1507              		.loc 1 3223 0 discriminator 3
 1508 0010 D988     		ldrh	r1, [r3, #6]
 1509              	.LVL195:
 1510 0012 8288     		ldrh	r2, [r0, #4]
 1511 0014 9142     		cmp	r1, r2
 1512 0016 03D0     		beq	.L160
 1513              	.LVL196:
 1514              	.L155:
3224:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = FR_INVALID_OBJECT;	/* The object is invalid */
 1515              		.loc 1 3224 0 is_stmt 1
 1516 0018 0023     		movs	r3, #0
 1517 001a 2B60     		str	r3, [r5]
 1518              	.LVL197:
3225:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else {
 1519              		.loc 1 3225 0
 1520 001c 0920     		movs	r0, #9
 1521              	.LVL198:
 1522              	.L157:
3232:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1523              		.loc 1 3232 0
 1524 001e 38BD     		pop	{r3, r4, r5, pc}
 1525              	.LVL199:
 1526              	.L160:
3223:Middlewares/Third_Party/FatFs/src/ff.c **** 		*fs = 0;
 1527              		.loc 1 3223 0 discriminator 4
 1528 0020 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 1529              	.LVL200:
 1530 0022 FFF7FEFF 		bl	disk_status
 1531              	.LVL201:
 1532 0026 10F0010F 		tst	r0, #1
 1533 002a F5D1     		bne	.L155
3227:Middlewares/Third_Party/FatFs/src/ff.c **** 		ENTER_FF(obj->fs);		/* Lock file system */
 1534              		.loc 1 3227 0
 1535 002c 2368     		ldr	r3, [r4]
 1536 002e 2B60     		str	r3, [r5]
3228:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = FR_OK;			/* Valid object */
 1537              		.loc 1 3228 0
 1538 0030 2068     		ldr	r0, [r4]
 1539 0032 FFF7FEFF 		bl	lock_fs
 1540              	.LVL202:
 1541 0036 08B1     		cbz	r0, .L161
3229:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 1542              		.loc 1 3229 0
 1543 0038 0020     		movs	r0, #0
 1544 003a F0E7     		b	.L157
 1545              	.L161:
3228:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = FR_OK;			/* Valid object */
 1546              		.loc 1 3228 0
 1547 003c 0F20     		movs	r0, #15
 1548 003e EEE7     		b	.L157
 1549              		.cfi_endproc
 1550              	.LFE180:
 1552              		.section	.text.sync_window,"ax",%progbits
 1553              		.align	1
 1554              		.syntax unified
 1555              		.thumb
 1556              		.thumb_func
ARM GAS  /tmp/ccqUXb8n.s 			page 134


 1557              		.fpu fpv5-sp-d16
 1559              	sync_window:
 1560              	.LFB156:
 886:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD wsect;
 1561              		.loc 1 886 0
 1562              		.cfi_startproc
 1563              		@ args = 0, pretend = 0, frame = 0
 1564              		@ frame_needed = 0, uses_anonymous_args = 0
 1565              	.LVL203:
 1566 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1567              	.LCFI22:
 1568              		.cfi_def_cfa_offset 24
 1569              		.cfi_offset 3, -24
 1570              		.cfi_offset 4, -20
 1571              		.cfi_offset 5, -16
 1572              		.cfi_offset 6, -12
 1573              		.cfi_offset 7, -8
 1574              		.cfi_offset 14, -4
 1575              	.LVL204:
 892:Middlewares/Third_Party/FatFs/src/ff.c **** 		wsect = fs->winsect;	/* Current sector number */
 1576              		.loc 1 892 0
 1577 0002 C378     		ldrb	r3, [r0, #3]	@ zero_extendqisi2
 1578 0004 0BB9     		cbnz	r3, .L170
 889:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1579              		.loc 1 889 0
 1580 0006 0020     		movs	r0, #0
 1581              	.LVL205:
 1582              	.L163:
 907:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 1583              		.loc 1 907 0
 1584 0008 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1585              	.LVL206:
 1586              	.L170:
 1587 000a 0446     		mov	r4, r0
 893:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 1588              		.loc 1 893 0
 1589 000c 056B     		ldr	r5, [r0, #48]
 1590              	.LVL207:
 894:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = FR_DISK_ERR;
 1591              		.loc 1 894 0
 1592 000e 00F13407 		add	r7, r0, #52
 1593 0012 0123     		movs	r3, #1
 1594 0014 2A46     		mov	r2, r5
 1595 0016 3946     		mov	r1, r7
 1596 0018 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 1597              	.LVL208:
 1598 001a FFF7FEFF 		bl	disk_write
 1599              	.LVL209:
 1600 001e A8B9     		cbnz	r0, .L167
 897:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 1601              		.loc 1 897 0
 1602 0020 0023     		movs	r3, #0
 1603 0022 E370     		strb	r3, [r4, #3]
 898:Middlewares/Third_Party/FatFs/src/ff.c **** 				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 1604              		.loc 1 898 0
 1605 0024 636A     		ldr	r3, [r4, #36]
 1606 0026 EB1A     		subs	r3, r5, r3
ARM GAS  /tmp/ccqUXb8n.s 			page 135


 1607 0028 E269     		ldr	r2, [r4, #28]
 1608 002a 9342     		cmp	r3, r2
 1609 002c 10D2     		bcs	.L168
 899:Middlewares/Third_Party/FatFs/src/ff.c **** 					wsect += fs->fsize;
 1610              		.loc 1 899 0
 1611 002e A678     		ldrb	r6, [r4, #2]	@ zero_extendqisi2
 1612              	.LVL210:
 1613              	.L164:
 899:Middlewares/Third_Party/FatFs/src/ff.c **** 					wsect += fs->fsize;
 1614              		.loc 1 899 0 is_stmt 0 discriminator 1
 1615 0030 012E     		cmp	r6, #1
 1616 0032 09D9     		bls	.L171
 900:Middlewares/Third_Party/FatFs/src/ff.c **** 					disk_write(fs->drv, fs->win, wsect, 1);
 1617              		.loc 1 900 0 is_stmt 1 discriminator 3
 1618 0034 E369     		ldr	r3, [r4, #28]
 1619 0036 1D44     		add	r5, r5, r3
 1620              	.LVL211:
 901:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 1621              		.loc 1 901 0 discriminator 3
 1622 0038 0123     		movs	r3, #1
 1623 003a 2A46     		mov	r2, r5
 1624 003c 3946     		mov	r1, r7
 1625 003e 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1626 0040 FFF7FEFF 		bl	disk_write
 1627              	.LVL212:
 899:Middlewares/Third_Party/FatFs/src/ff.c **** 					wsect += fs->fsize;
 1628              		.loc 1 899 0 discriminator 3
 1629 0044 013E     		subs	r6, r6, #1
 1630              	.LVL213:
 1631 0046 F3E7     		b	.L164
 1632              	.L171:
 889:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1633              		.loc 1 889 0
 1634 0048 0020     		movs	r0, #0
 1635 004a DDE7     		b	.L163
 1636              	.LVL214:
 1637              	.L167:
 895:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
 1638              		.loc 1 895 0
 1639 004c 0120     		movs	r0, #1
 1640 004e DBE7     		b	.L163
 1641              	.L168:
 889:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1642              		.loc 1 889 0
 1643 0050 0020     		movs	r0, #0
 1644 0052 D9E7     		b	.L163
 1645              		.cfi_endproc
 1646              	.LFE156:
 1648              		.section	.text.move_window,"ax",%progbits
 1649              		.align	1
 1650              		.syntax unified
 1651              		.thumb
 1652              		.thumb_func
 1653              		.fpu fpv5-sp-d16
 1655              	move_window:
 1656              	.LFB157:
 916:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res = FR_OK;
ARM GAS  /tmp/ccqUXb8n.s 			page 136


 1657              		.loc 1 916 0
 1658              		.cfi_startproc
 1659              		@ args = 0, pretend = 0, frame = 0
 1660              		@ frame_needed = 0, uses_anonymous_args = 0
 1661              	.LVL215:
 1662 0000 70B5     		push	{r4, r5, r6, lr}
 1663              	.LCFI23:
 1664              		.cfi_def_cfa_offset 16
 1665              		.cfi_offset 4, -16
 1666              		.cfi_offset 5, -12
 1667              		.cfi_offset 6, -8
 1668              		.cfi_offset 14, -4
 1669              	.LVL216:
 920:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
 1670              		.loc 1 920 0
 1671 0002 036B     		ldr	r3, [r0, #48]
 1672 0004 8B42     		cmp	r3, r1
 1673 0006 12D0     		beq	.L175
 1674 0008 0446     		mov	r4, r0
 1675 000a 0D46     		mov	r5, r1
 922:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 1676              		.loc 1 922 0
 1677 000c FFF7FEFF 		bl	sync_window
 1678              	.LVL217:
 924:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 1679              		.loc 1 924 0
 1680 0010 0646     		mov	r6, r0
 1681 0012 68B9     		cbnz	r0, .L173
 925:Middlewares/Third_Party/FatFs/src/ff.c **** 				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 1682              		.loc 1 925 0
 1683 0014 0123     		movs	r3, #1
 1684 0016 2A46     		mov	r2, r5
 1685 0018 04F13401 		add	r1, r4, #52
 1686 001c 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1687              	.LVL218:
 1688 001e FFF7FEFF 		bl	disk_read
 1689              	.LVL219:
 1690 0022 10B1     		cbz	r0, .L174
 927:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 1691              		.loc 1 927 0
 1692 0024 0126     		movs	r6, #1
 926:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_DISK_ERR;
 1693              		.loc 1 926 0
 1694 0026 4FF0FF35 		mov	r5, #-1
 1695              	.LVL220:
 1696              	.L174:
 929:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 1697              		.loc 1 929 0
 1698 002a 2563     		str	r5, [r4, #48]
 1699 002c 00E0     		b	.L173
 1700              	.LVL221:
 1701              	.L175:
 917:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1702              		.loc 1 917 0
 1703 002e 0026     		movs	r6, #0
 1704              	.LVL222:
 1705              	.L173:
ARM GAS  /tmp/ccqUXb8n.s 			page 137


 933:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1706              		.loc 1 933 0
 1707 0030 3046     		mov	r0, r6
 1708 0032 70BD     		pop	{r4, r5, r6, pc}
 1709              		.cfi_endproc
 1710              	.LFE157:
 1712              		.section	.text.check_fs,"ax",%progbits
 1713              		.align	1
 1714              		.syntax unified
 1715              		.thumb
 1716              		.thumb_func
 1717              		.fpu fpv5-sp-d16
 1719              	check_fs:
 1720              	.LFB178:
2969:Middlewares/Third_Party/FatFs/src/ff.c **** 	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 1721              		.loc 1 2969 0
 1722              		.cfi_startproc
 1723              		@ args = 0, pretend = 0, frame = 0
 1724              		@ frame_needed = 0, uses_anonymous_args = 0
 1725              	.LVL223:
 1726 0000 10B5     		push	{r4, lr}
 1727              	.LCFI24:
 1728              		.cfi_def_cfa_offset 8
 1729              		.cfi_offset 4, -8
 1730              		.cfi_offset 14, -4
 1731 0002 0446     		mov	r4, r0
2970:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 1732              		.loc 1 2970 0
 1733 0004 0023     		movs	r3, #0
 1734 0006 C370     		strb	r3, [r0, #3]
 1735 0008 4FF0FF33 		mov	r3, #-1
 1736 000c 0363     		str	r3, [r0, #48]
2971:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1737              		.loc 1 2971 0
 1738 000e FFF7FEFF 		bl	move_window
 1739              	.LVL224:
 1740 0012 18BB     		cbnz	r0, .L181
2973:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1741              		.loc 1 2973 0
 1742 0014 04F23220 		addw	r0, r4, #562
 1743 0018 FFF7FEFF 		bl	ld_word
 1744              	.LVL225:
 1745 001c 4AF65523 		movw	r3, #43605
 1746 0020 9842     		cmp	r0, r3
 1747 0022 1DD1     		bne	.L182
2975:Middlewares/Third_Party/FatFs/src/ff.c **** 		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string *
 1748              		.loc 1 2975 0
 1749 0024 94F83430 		ldrb	r3, [r4, #52]	@ zero_extendqisi2
 1750 0028 E92B     		cmp	r3, #233
 1751 002a 05D0     		beq	.L180
2975:Middlewares/Third_Party/FatFs/src/ff.c **** 		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string *
 1752              		.loc 1 2975 0 is_stmt 0 discriminator 1
 1753 002c 636B     		ldr	r3, [r4, #52]
 1754 002e 03F0FF13 		and	r3, r3, #16711935
 1755 0032 0F4A     		ldr	r2, .L187
 1756 0034 9342     		cmp	r3, r2
 1757 0036 15D1     		bne	.L183
ARM GAS  /tmp/ccqUXb8n.s 			page 138


 1758              	.L180:
2976:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 1759              		.loc 1 2976 0 is_stmt 1
 1760 0038 04F16A00 		add	r0, r4, #106
 1761 003c FFF7FEFF 		bl	ld_dword
 1762              	.LVL226:
 1763 0040 20F07F40 		bic	r0, r0, #-16777216
 1764 0044 0B4B     		ldr	r3, .L187+4
 1765 0046 9842     		cmp	r0, r3
 1766 0048 0ED0     		beq	.L184
2977:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 1767              		.loc 1 2977 0
 1768 004a 04F18600 		add	r0, r4, #134
 1769 004e FFF7FEFF 		bl	ld_dword
 1770              	.LVL227:
 1771 0052 094B     		ldr	r3, .L187+8
 1772 0054 9842     		cmp	r0, r3
 1773 0056 09D1     		bne	.L185
 1774 0058 0020     		movs	r0, #0
 1775 005a 02E0     		b	.L179
 1776              	.L181:
2971:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1777              		.loc 1 2971 0
 1778 005c 0420     		movs	r0, #4
 1779 005e 00E0     		b	.L179
 1780              	.L182:
2973:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1781              		.loc 1 2973 0
 1782 0060 0320     		movs	r0, #3
 1783              	.L179:
2983:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1784              		.loc 1 2983 0
 1785 0062 10BD     		pop	{r4, pc}
 1786              	.LVL228:
 1787              	.L183:
2982:Middlewares/Third_Party/FatFs/src/ff.c **** }
 1788              		.loc 1 2982 0
 1789 0064 0220     		movs	r0, #2
 1790 0066 FCE7     		b	.L179
 1791              	.L184:
2976:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 1792              		.loc 1 2976 0
 1793 0068 0020     		movs	r0, #0
 1794 006a FAE7     		b	.L179
 1795              	.L185:
2982:Middlewares/Third_Party/FatFs/src/ff.c **** }
 1796              		.loc 1 2982 0
 1797 006c 0220     		movs	r0, #2
 1798 006e F8E7     		b	.L179
 1799              	.L188:
 1800              		.align	2
 1801              	.L187:
 1802 0070 EB009000 		.word	9437419
 1803 0074 46415400 		.word	5521734
 1804 0078 46415433 		.word	861159750
 1805              		.cfi_endproc
 1806              	.LFE178:
ARM GAS  /tmp/ccqUXb8n.s 			page 139


 1808              		.section	.text.find_volume,"ax",%progbits
 1809              		.align	1
 1810              		.syntax unified
 1811              		.thumb
 1812              		.thumb_func
 1813              		.fpu fpv5-sp-d16
 1815              	find_volume:
 1816              	.LFB179:
2998:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE fmt, *pt;
 1817              		.loc 1 2998 0
 1818              		.cfi_startproc
 1819              		@ args = 0, pretend = 0, frame = 16
 1820              		@ frame_needed = 0, uses_anonymous_args = 0
 1821              	.LVL229:
 1822 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1823              	.LCFI25:
 1824              		.cfi_def_cfa_offset 32
 1825              		.cfi_offset 4, -32
 1826              		.cfi_offset 5, -28
 1827              		.cfi_offset 6, -24
 1828              		.cfi_offset 7, -20
 1829              		.cfi_offset 8, -16
 1830              		.cfi_offset 9, -12
 1831              		.cfi_offset 10, -8
 1832              		.cfi_offset 14, -4
 1833 0004 84B0     		sub	sp, sp, #16
 1834              	.LCFI26:
 1835              		.cfi_def_cfa_offset 48
 1836 0006 0E46     		mov	r6, r1
 1837 0008 1746     		mov	r7, r2
3009:Middlewares/Third_Party/FatFs/src/ff.c **** 	vol = get_ldnumber(path);
 1838              		.loc 1 3009 0
 1839 000a 0023     		movs	r3, #0
 1840 000c 0B60     		str	r3, [r1]
3010:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 1841              		.loc 1 3010 0
 1842 000e FFF7FEFF 		bl	get_ldnumber
 1843              	.LVL230:
3011:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1844              		.loc 1 3011 0
 1845 0012 051E     		subs	r5, r0, #0
 1846 0014 C0F24A81 		blt	.L207
3014:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 1847              		.loc 1 3014 0
 1848 0018 BA4B     		ldr	r3, .L239
 1849 001a 53F82540 		ldr	r4, [r3, r5, lsl #2]
 1850              	.LVL231:
3015:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1851              		.loc 1 3015 0
 1852 001e 002C     		cmp	r4, #0
 1853 0020 00F04681 		beq	.L208
3017:Middlewares/Third_Party/FatFs/src/ff.c **** 	*rfs = fs;							/* Return pointer to the file system object */
 1854              		.loc 1 3017 0
 1855 0024 2046     		mov	r0, r4
 1856              	.LVL232:
 1857 0026 FFF7FEFF 		bl	lock_fs
 1858              	.LVL233:
ARM GAS  /tmp/ccqUXb8n.s 			page 140


 1859 002a 0028     		cmp	r0, #0
 1860 002c 00F04481 		beq	.L209
3018:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1861              		.loc 1 3018 0
 1862 0030 3460     		str	r4, [r6]
3020:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->fs_type) {					/* If the volume has been mounted */
 1863              		.loc 1 3020 0
 1864 0032 07F0FE07 		and	r7, r7, #254
 1865              	.LVL234:
3021:Middlewares/Third_Party/FatFs/src/ff.c **** 		stat = disk_status(fs->drv);
 1866              		.loc 1 3021 0
 1867 0036 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1868 0038 73B1     		cbz	r3, .L191
3022:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 1869              		.loc 1 3022 0
 1870 003a 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1871 003c FFF7FEFF 		bl	disk_status
 1872              	.LVL235:
3023:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 1873              		.loc 1 3023 0
 1874 0040 10F0010F 		tst	r0, #1
 1875 0044 08D1     		bne	.L191
3024:Middlewares/Third_Party/FatFs/src/ff.c **** 				return FR_WRITE_PROTECTED;
 1876              		.loc 1 3024 0
 1877 0046 002F     		cmp	r7, #0
 1878 0048 00F03881 		beq	.L210
3024:Middlewares/Third_Party/FatFs/src/ff.c **** 				return FR_WRITE_PROTECTED;
 1879              		.loc 1 3024 0 is_stmt 0 discriminator 1
 1880 004c 10F0040F 		tst	r0, #4
 1881 0050 40F03681 		bne	.L211
3027:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 1882              		.loc 1 3027 0 is_stmt 1
 1883 0054 0020     		movs	r0, #0
 1884              	.LVL236:
 1885 0056 2CE1     		b	.L190
 1886              	.L191:
3034:Middlewares/Third_Party/FatFs/src/ff.c **** 	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 1887              		.loc 1 3034 0
 1888 0058 0023     		movs	r3, #0
 1889 005a 2370     		strb	r3, [r4]
3035:Middlewares/Third_Party/FatFs/src/ff.c **** 	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 1890              		.loc 1 3035 0
 1891 005c E8B2     		uxtb	r0, r5
 1892 005e 6070     		strb	r0, [r4, #1]
3036:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 1893              		.loc 1 3036 0
 1894 0060 FFF7FEFF 		bl	disk_initialize
 1895              	.LVL237:
3037:Middlewares/Third_Party/FatFs/src/ff.c **** 		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 1896              		.loc 1 3037 0
 1897 0064 10F0010F 		tst	r0, #1
 1898 0068 40F02C81 		bne	.L212
3040:Middlewares/Third_Party/FatFs/src/ff.c **** 		return FR_WRITE_PROTECTED;
 1899              		.loc 1 3040 0
 1900 006c 1FB1     		cbz	r7, .L192
3040:Middlewares/Third_Party/FatFs/src/ff.c **** 		return FR_WRITE_PROTECTED;
 1901              		.loc 1 3040 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccqUXb8n.s 			page 141


 1902 006e 10F0040F 		tst	r0, #4
 1903 0072 40F02981 		bne	.L213
 1904              	.L192:
 1905              	.LVL238:
3050:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 1906              		.loc 1 3050 0 is_stmt 1
 1907 0076 0021     		movs	r1, #0
 1908 0078 2046     		mov	r0, r4
 1909              	.LVL239:
 1910 007a FFF7FEFF 		bl	check_fs
 1911              	.LVL240:
3051:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (i = 0; i < 4; i++) {		/* Get partition offset */
 1912              		.loc 1 3051 0
 1913 007e 0228     		cmp	r0, #2
 1914 0080 00F0B680 		beq	.L214
3049:Middlewares/Third_Party/FatFs/src/ff.c **** 	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 1915              		.loc 1 3049 0
 1916 0084 0026     		movs	r6, #0
 1917              	.LVL241:
 1918              	.L194:
3063:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 1919              		.loc 1 3063 0
 1920 0086 0428     		cmp	r0, #4
 1921 0088 00F02081 		beq	.L217
3064:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1922              		.loc 1 3064 0
 1923 008c 0128     		cmp	r0, #1
 1924 008e 00F21F81 		bhi	.L218
3116:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1925              		.loc 1 3116 0
 1926 0092 04F13F00 		add	r0, r4, #63
 1927              	.LVL242:
 1928 0096 FFF7FEFF 		bl	ld_word
 1929              	.LVL243:
 1930 009a B0F5007F 		cmp	r0, #512
 1931 009e 40F01981 		bne	.L219
3118:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 1932              		.loc 1 3118 0
 1933 00a2 04F14A00 		add	r0, r4, #74
 1934 00a6 FFF7FEFF 		bl	ld_word
 1935              	.LVL244:
 1936 00aa 0746     		mov	r7, r0
 1937              	.LVL245:
3119:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->fsize = fasize;
 1938              		.loc 1 3119 0
 1939 00ac 20B9     		cbnz	r0, .L199
3119:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->fsize = fasize;
 1940              		.loc 1 3119 0 is_stmt 0 discriminator 1
 1941 00ae 04F15800 		add	r0, r4, #88
 1942              	.LVL246:
 1943 00b2 FFF7FEFF 		bl	ld_dword
 1944              	.LVL247:
 1945 00b6 0746     		mov	r7, r0
 1946              	.LVL248:
 1947              	.L199:
3120:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1948              		.loc 1 3120 0 is_stmt 1
ARM GAS  /tmp/ccqUXb8n.s 			page 142


 1949 00b8 E761     		str	r7, [r4, #28]
3122:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 1950              		.loc 1 3122 0
 1951 00ba 94F84420 		ldrb	r2, [r4, #68]	@ zero_extendqisi2
 1952 00be A270     		strb	r2, [r4, #2]
3123:Middlewares/Third_Party/FatFs/src/ff.c **** 		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 1953              		.loc 1 3123 0
 1954 00c0 531E     		subs	r3, r2, #1
 1955 00c2 DBB2     		uxtb	r3, r3
 1956 00c4 012B     		cmp	r3, #1
 1957 00c6 00F20781 		bhi	.L220
3124:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1958              		.loc 1 3124 0
 1959 00ca 07FB02F5 		mul	r5, r7, r2
 1960              	.LVL249:
3126:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power o
 1961              		.loc 1 3126 0
 1962 00ce 94F84180 		ldrb	r8, [r4, #65]	@ zero_extendqisi2
 1963 00d2 A4F80A80 		strh	r8, [r4, #10]	@ movhi
3127:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1964              		.loc 1 3127 0
 1965 00d6 B8F1000F 		cmp	r8, #0
 1966 00da 00F0FF80 		beq	.L221
3127:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1967              		.loc 1 3127 0 is_stmt 0 discriminator 2
 1968 00de 08F1FF33 		add	r3, r8, #-1
 1969 00e2 18EA030F 		tst	r8, r3
 1970 00e6 40F0FB80 		bne	.L222
3129:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 1971              		.loc 1 3129 0 is_stmt 1
 1972 00ea 04F14500 		add	r0, r4, #69
 1973 00ee FFF7FEFF 		bl	ld_word
 1974              	.LVL250:
 1975 00f2 8246     		mov	r10, r0
 1976 00f4 2081     		strh	r0, [r4, #8]	@ movhi
3130:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1977              		.loc 1 3130 0
 1978 00f6 10F00F0F 		tst	r0, #15
 1979 00fa 40F0F380 		bne	.L223
3132:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 1980              		.loc 1 3132 0
 1981 00fe 04F14700 		add	r0, r4, #71
 1982 0102 FFF7FEFF 		bl	ld_word
 1983              	.LVL251:
 1984 0106 8146     		mov	r9, r0
 1985              	.LVL252:
3133:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1986              		.loc 1 3133 0
 1987 0108 20B9     		cbnz	r0, .L200
3133:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1988              		.loc 1 3133 0 is_stmt 0 discriminator 1
 1989 010a 04F15400 		add	r0, r4, #84
 1990              	.LVL253:
 1991 010e FFF7FEFF 		bl	ld_dword
 1992              	.LVL254:
 1993 0112 8146     		mov	r9, r0
 1994              	.LVL255:
ARM GAS  /tmp/ccqUXb8n.s 			page 143


 1995              	.L200:
3135:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 1996              		.loc 1 3135 0 is_stmt 1
 1997 0114 04F14200 		add	r0, r4, #66
 1998              	.LVL256:
 1999 0118 FFF7FEFF 		bl	ld_word
 2000              	.LVL257:
3136:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2001              		.loc 1 3136 0
 2002 011c 0146     		mov	r1, r0
 2003 011e 0028     		cmp	r0, #0
 2004 0120 00F0E280 		beq	.L224
3139:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 2005              		.loc 1 3139 0
 2006 0124 4219     		adds	r2, r0, r5
 2007 0126 02EB1A12 		add	r2, r2, r10, lsr #4
 2008              	.LVL258:
3140:Middlewares/Third_Party/FatFs/src/ff.c **** 		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 2009              		.loc 1 3140 0
 2010 012a 9145     		cmp	r9, r2
 2011 012c C0F0DE80 		bcc	.L225
3141:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 2012              		.loc 1 3141 0
 2013 0130 A9EB0203 		sub	r3, r9, r2
 2014 0134 B3FBF8F3 		udiv	r3, r3, r8
 2015              	.LVL259:
3142:Middlewares/Third_Party/FatFs/src/ff.c **** 		fmt = FS_FAT32;
 2016              		.loc 1 3142 0
 2017 0138 002B     		cmp	r3, #0
 2018 013a 00F0D980 		beq	.L226
 2019              	.LVL260:
3144:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 2020              		.loc 1 3144 0
 2021 013e 4FF6F570 		movw	r0, #65525
 2022              	.LVL261:
 2023 0142 8342     		cmp	r3, r0
 2024 0144 6CD9     		bls	.L227
3143:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 2025              		.loc 1 3143 0
 2026 0146 4FF00309 		mov	r9, #3
 2027              	.LVL262:
 2028              	.L201:
3145:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2029              		.loc 1 3145 0
 2030 014a 40F6F570 		movw	r0, #4085
 2031 014e 8342     		cmp	r3, r0
 2032 0150 01D8     		bhi	.L202
 2033 0152 4FF00109 		mov	r9, #1
 2034              	.LVL263:
 2035              	.L202:
3148:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->volbase = bsect;							/* Volume start sector */
 2036              		.loc 1 3148 0
 2037 0156 03F10208 		add	r8, r3, #2
 2038 015a C4F81880 		str	r8, [r4, #24]
3149:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 2039              		.loc 1 3149 0
 2040 015e 2662     		str	r6, [r4, #32]
ARM GAS  /tmp/ccqUXb8n.s 			page 144


3150:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->database = bsect + sysect;					/* Data start sector */
 2041              		.loc 1 3150 0
 2042 0160 8B19     		adds	r3, r1, r6
 2043              	.LVL264:
 2044 0162 6362     		str	r3, [r4, #36]
3151:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fmt == FS_FAT32) {
 2045              		.loc 1 3151 0
 2046 0164 3244     		add	r2, r2, r6
 2047              	.LVL265:
 2048 0166 E262     		str	r2, [r4, #44]
3152:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0
 2049              		.loc 1 3152 0
 2050 0168 B9F1030F 		cmp	r9, #3
 2051 016c 5BD0     		beq	.L234
3158:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 2052              		.loc 1 3158 0
 2053 016e BAF1000F 		cmp	r10, #0
 2054 0172 00F0C380 		beq	.L231
3159:Middlewares/Third_Party/FatFs/src/ff.c **** 			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 2055              		.loc 1 3159 0
 2056 0176 2B44     		add	r3, r3, r5
 2057 0178 A362     		str	r3, [r4, #40]
3161:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 2058              		.loc 1 3161 0
 2059 017a B9F1020F 		cmp	r9, #2
 2060 017e 63D0     		beq	.L235
3161:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 2061              		.loc 1 3161 0 is_stmt 0 discriminator 2
 2062 0180 08EB4802 		add	r2, r8, r8, lsl #1
 2063 0184 08F00103 		and	r3, r8, #1
 2064 0188 03EB5203 		add	r3, r3, r2, lsr #1
 2065              	.LVL266:
 2066              	.L204:
3163:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2067              		.loc 1 3163 0 is_stmt 1
 2068 018c 03F2FF13 		addw	r3, r3, #511
 2069              	.LVL267:
 2070 0190 B7EB532F 		cmp	r7, r3, lsr #9
 2071 0194 C0F0B480 		bcc	.L232
3167:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->fsi_flag = 0x80;
 2072              		.loc 1 3167 0
 2073 0198 4FF0FF33 		mov	r3, #-1
 2074              	.LVL268:
 2075 019c 6361     		str	r3, [r4, #20]
 2076 019e 2361     		str	r3, [r4, #16]
3168:Middlewares/Third_Party/FatFs/src/ff.c **** #if (_FS_NOFSINFO & 3) != 3
 2077              		.loc 1 3168 0
 2078 01a0 8023     		movs	r3, #128
 2079 01a2 2371     		strb	r3, [r4, #4]
3170:Middlewares/Third_Party/FatFs/src/ff.c **** 			&& ld_word(fs->win + BPB_FSInfo32) == 1
 2080              		.loc 1 3170 0
 2081 01a4 B9F1030F 		cmp	r9, #3
 2082 01a8 51D0     		beq	.L236
 2083              	.L206:
3191:Middlewares/Third_Party/FatFs/src/ff.c **** 	fs->id = ++Fsid;		/* File system mount ID */
 2084              		.loc 1 3191 0
 2085 01aa 84F80090 		strb	r9, [r4]
ARM GAS  /tmp/ccqUXb8n.s 			page 145


3192:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN == 1
 2086              		.loc 1 3192 0
 2087 01ae 564A     		ldr	r2, .L239+4
 2088 01b0 1388     		ldrh	r3, [r2]
 2089 01b2 0133     		adds	r3, r3, #1
 2090 01b4 9BB2     		uxth	r3, r3
 2091 01b6 1380     		strh	r3, [r2]	@ movhi
 2092 01b8 E380     		strh	r3, [r4, #6]	@ movhi
3203:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 2093              		.loc 1 3203 0
 2094 01ba 2046     		mov	r0, r4
 2095 01bc FFF7FEFF 		bl	clear_lock
 2096              	.LVL269:
3205:Middlewares/Third_Party/FatFs/src/ff.c **** }
 2097              		.loc 1 3205 0
 2098 01c0 0020     		movs	r0, #0
 2099 01c2 76E0     		b	.L190
 2100              	.LVL270:
 2101              	.L215:
3054:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 2102              		.loc 1 3054 0
 2103 01c4 0020     		movs	r0, #0
 2104              	.LVL271:
 2105              	.L195:
3054:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 2106              		.loc 1 3054 0 is_stmt 0 discriminator 4
 2107 01c6 04AB     		add	r3, sp, #16
 2108 01c8 03EB8503 		add	r3, r3, r5, lsl #2
 2109 01cc 43F8100C 		str	r0, [r3, #-16]
3052:Middlewares/Third_Party/FatFs/src/ff.c **** 			pt = fs->win + (MBR_Table + i * SZ_PTE);
 2110              		.loc 1 3052 0 is_stmt 1 discriminator 4
 2111 01d0 0135     		adds	r5, r5, #1
 2112              	.LVL272:
 2113              	.L193:
3052:Middlewares/Third_Party/FatFs/src/ff.c **** 			pt = fs->win + (MBR_Table + i * SZ_PTE);
 2114              		.loc 1 3052 0 is_stmt 0 discriminator 2
 2115 01d2 032D     		cmp	r5, #3
 2116 01d4 0ED8     		bhi	.L237
3053:Middlewares/Third_Party/FatFs/src/ff.c **** 			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 2117              		.loc 1 3053 0 is_stmt 1
 2118 01d6 04F13400 		add	r0, r4, #52
 2119 01da 2B01     		lsls	r3, r5, #4
 2120 01dc 03F5DF73 		add	r3, r3, #446
 2121 01e0 1844     		add	r0, r0, r3
 2122              	.LVL273:
3054:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 2123              		.loc 1 3054 0
 2124 01e2 0379     		ldrb	r3, [r0, #4]	@ zero_extendqisi2
 2125 01e4 002B     		cmp	r3, #0
 2126 01e6 EDD0     		beq	.L215
3054:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 2127              		.loc 1 3054 0 is_stmt 0 discriminator 1
 2128 01e8 0830     		adds	r0, r0, #8
 2129              	.LVL274:
 2130 01ea FFF7FEFF 		bl	ld_dword
 2131              	.LVL275:
 2132 01ee EAE7     		b	.L195
ARM GAS  /tmp/ccqUXb8n.s 			page 146


 2133              	.LVL276:
 2134              	.L214:
3052:Middlewares/Third_Party/FatFs/src/ff.c **** 			pt = fs->win + (MBR_Table + i * SZ_PTE);
 2135              		.loc 1 3052 0 is_stmt 1
 2136 01f0 0025     		movs	r5, #0
 2137              	.LVL277:
 2138 01f2 EEE7     		b	.L193
 2139              	.LVL278:
 2140              	.L237:
3056:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i) i--;
 2141              		.loc 1 3056 0
 2142 01f4 0025     		movs	r5, #0
 2143              	.LVL279:
 2144 01f6 0AE0     		b	.L198
 2145              	.LVL280:
 2146              	.L238:
3060:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 2147              		.loc 1 3060 0 discriminator 1
 2148 01f8 3146     		mov	r1, r6
 2149 01fa 2046     		mov	r0, r4
 2150 01fc FFF7FEFF 		bl	check_fs
 2151              	.LVL281:
3061:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 2152              		.loc 1 3061 0 discriminator 1
 2153 0200 0128     		cmp	r0, #1
 2154 0202 7FF640AF 		bls	.L194
 2155              	.LVL282:
 2156              	.L197:
 2157 0206 0135     		adds	r5, r5, #1
 2158              	.LVL283:
 2159 0208 032D     		cmp	r5, #3
 2160 020a 3FF63CAF 		bhi	.L194
 2161              	.LVL284:
 2162              	.L198:
3059:Middlewares/Third_Party/FatFs/src/ff.c **** 			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 2163              		.loc 1 3059 0
 2164 020e 04AB     		add	r3, sp, #16
 2165 0210 03EB8503 		add	r3, r3, r5, lsl #2
 2166 0214 53F8106C 		ldr	r6, [r3, #-16]
 2167              	.LVL285:
3060:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 2168              		.loc 1 3060 0
 2169 0218 002E     		cmp	r6, #0
 2170 021a EDD1     		bne	.L238
 2171 021c 0320     		movs	r0, #3
 2172 021e F2E7     		b	.L197
 2173              	.LVL286:
 2174              	.L227:
3144:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 2175              		.loc 1 3144 0
 2176 0220 4FF00209 		mov	r9, #2
 2177              	.LVL287:
 2178 0224 91E7     		b	.L201
 2179              	.LVL288:
 2180              	.L234:
3153:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 2181              		.loc 1 3153 0
ARM GAS  /tmp/ccqUXb8n.s 			page 147


 2182 0226 04F15E00 		add	r0, r4, #94
 2183 022a FFF7FEFF 		bl	ld_word
 2184              	.LVL289:
 2185 022e 0028     		cmp	r0, #0
 2186 0230 60D1     		bne	.L229
3154:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 2187              		.loc 1 3154 0
 2188 0232 BAF1000F 		cmp	r10, #0
 2189 0236 5FD1     		bne	.L230
3155:Middlewares/Third_Party/FatFs/src/ff.c **** 			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 2190              		.loc 1 3155 0
 2191 0238 04F16000 		add	r0, r4, #96
 2192 023c FFF7FEFF 		bl	ld_dword
 2193              	.LVL290:
 2194 0240 A062     		str	r0, [r4, #40]
3156:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
 2195              		.loc 1 3156 0
 2196 0242 4FEA8803 		lsl	r3, r8, #2
 2197              	.LVL291:
 2198 0246 A1E7     		b	.L204
 2199              	.LVL292:
 2200              	.L235:
3161:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 2201              		.loc 1 3161 0 discriminator 1
 2202 0248 4FEA4803 		lsl	r3, r8, #1
 2203 024c 9EE7     		b	.L204
 2204              	.LVL293:
 2205              	.L236:
3171:Middlewares/Third_Party/FatFs/src/ff.c **** 			&& move_window(fs, bsect + 1) == FR_OK)
 2206              		.loc 1 3171 0
 2207 024e 04F16400 		add	r0, r4, #100
 2208 0252 FFF7FEFF 		bl	ld_word
 2209              	.LVL294:
 2210 0256 0128     		cmp	r0, #1
 2211 0258 A7D1     		bne	.L206
3172:Middlewares/Third_Party/FatFs/src/ff.c **** 		{
 2212              		.loc 1 3172 0
 2213 025a 711C     		adds	r1, r6, #1
 2214 025c 2046     		mov	r0, r4
 2215 025e FFF7FEFF 		bl	move_window
 2216              	.LVL295:
 2217 0262 0028     		cmp	r0, #0
 2218 0264 A1D1     		bne	.L206
3174:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 2219              		.loc 1 3174 0
 2220 0266 0023     		movs	r3, #0
 2221 0268 2371     		strb	r3, [r4, #4]
3175:Middlewares/Third_Party/FatFs/src/ff.c **** 				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 2222              		.loc 1 3175 0
 2223 026a 04F23220 		addw	r0, r4, #562
 2224 026e FFF7FEFF 		bl	ld_word
 2225              	.LVL296:
 2226 0272 4AF65523 		movw	r3, #43605
 2227 0276 9842     		cmp	r0, r3
 2228 0278 97D1     		bne	.L206
3176:Middlewares/Third_Party/FatFs/src/ff.c **** 				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 2229              		.loc 1 3176 0
ARM GAS  /tmp/ccqUXb8n.s 			page 148


 2230 027a 04F13400 		add	r0, r4, #52
 2231 027e FFF7FEFF 		bl	ld_dword
 2232              	.LVL297:
 2233 0282 224B     		ldr	r3, .L239+8
 2234 0284 9842     		cmp	r0, r3
 2235 0286 90D1     		bne	.L206
3177:Middlewares/Third_Party/FatFs/src/ff.c **** 			{
 2236              		.loc 1 3177 0
 2237 0288 04F50670 		add	r0, r4, #536
 2238 028c FFF7FEFF 		bl	ld_dword
 2239              	.LVL298:
 2240 0290 1F4B     		ldr	r3, .L239+12
 2241 0292 9842     		cmp	r0, r3
 2242 0294 89D1     		bne	.L206
3180:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 2243              		.loc 1 3180 0
 2244 0296 04F50770 		add	r0, r4, #540
 2245 029a FFF7FEFF 		bl	ld_dword
 2246              	.LVL299:
 2247 029e 6061     		str	r0, [r4, #20]
3183:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 2248              		.loc 1 3183 0
 2249 02a0 04F50870 		add	r0, r4, #544
 2250 02a4 FFF7FEFF 		bl	ld_dword
 2251              	.LVL300:
 2252 02a8 2061     		str	r0, [r4, #16]
 2253 02aa 7EE7     		b	.L206
 2254              	.LVL301:
 2255              	.L207:
3011:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2256              		.loc 1 3011 0
 2257 02ac 0B20     		movs	r0, #11
 2258              	.LVL302:
 2259 02ae 00E0     		b	.L190
 2260              	.LVL303:
 2261              	.L208:
3015:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2262              		.loc 1 3015 0
 2263 02b0 0C20     		movs	r0, #12
 2264              	.LVL304:
 2265              	.L190:
3206:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2266              		.loc 1 3206 0
 2267 02b2 04B0     		add	sp, sp, #16
 2268              	.LCFI27:
 2269              		.cfi_remember_state
 2270              		.cfi_def_cfa_offset 32
 2271              		@ sp needed
 2272 02b4 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 2273              	.LVL305:
 2274              	.L209:
 2275              	.LCFI28:
 2276              		.cfi_restore_state
3017:Middlewares/Third_Party/FatFs/src/ff.c **** 	*rfs = fs;							/* Return pointer to the file system object */
 2277              		.loc 1 3017 0
 2278 02b8 0F20     		movs	r0, #15
 2279 02ba FAE7     		b	.L190
ARM GAS  /tmp/ccqUXb8n.s 			page 149


 2280              	.LVL306:
 2281              	.L210:
3027:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 2282              		.loc 1 3027 0
 2283 02bc 0020     		movs	r0, #0
 2284              	.LVL307:
 2285 02be F8E7     		b	.L190
 2286              	.LVL308:
 2287              	.L211:
3025:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 2288              		.loc 1 3025 0
 2289 02c0 0A20     		movs	r0, #10
 2290              	.LVL309:
 2291 02c2 F6E7     		b	.L190
 2292              	.LVL310:
 2293              	.L212:
3038:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 2294              		.loc 1 3038 0
 2295 02c4 0320     		movs	r0, #3
 2296              	.LVL311:
 2297 02c6 F4E7     		b	.L190
 2298              	.LVL312:
 2299              	.L213:
3041:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 2300              		.loc 1 3041 0
 2301 02c8 0A20     		movs	r0, #10
 2302              	.LVL313:
 2303 02ca F2E7     		b	.L190
 2304              	.LVL314:
 2305              	.L217:
3063:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 2306              		.loc 1 3063 0
 2307 02cc 0120     		movs	r0, #1
 2308              	.LVL315:
 2309 02ce F0E7     		b	.L190
 2310              	.LVL316:
 2311              	.L218:
3064:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2312              		.loc 1 3064 0
 2313 02d0 0D20     		movs	r0, #13
 2314              	.LVL317:
 2315 02d2 EEE7     		b	.L190
 2316              	.L219:
3116:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2317              		.loc 1 3116 0
 2318 02d4 0D20     		movs	r0, #13
 2319 02d6 ECE7     		b	.L190
 2320              	.LVL318:
 2321              	.L220:
3123:Middlewares/Third_Party/FatFs/src/ff.c **** 		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 2322              		.loc 1 3123 0
 2323 02d8 0D20     		movs	r0, #13
 2324              	.LVL319:
 2325 02da EAE7     		b	.L190
 2326              	.LVL320:
 2327              	.L221:
3127:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  /tmp/ccqUXb8n.s 			page 150


 2328              		.loc 1 3127 0
 2329 02dc 0D20     		movs	r0, #13
 2330 02de E8E7     		b	.L190
 2331              	.L222:
 2332 02e0 0D20     		movs	r0, #13
 2333 02e2 E6E7     		b	.L190
 2334              	.L223:
3130:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2335              		.loc 1 3130 0
 2336 02e4 0D20     		movs	r0, #13
 2337 02e6 E4E7     		b	.L190
 2338              	.LVL321:
 2339              	.L224:
3136:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2340              		.loc 1 3136 0
 2341 02e8 0D20     		movs	r0, #13
 2342              	.LVL322:
 2343 02ea E2E7     		b	.L190
 2344              	.LVL323:
 2345              	.L225:
3140:Middlewares/Third_Party/FatFs/src/ff.c **** 		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 2346              		.loc 1 3140 0
 2347 02ec 0D20     		movs	r0, #13
 2348              	.LVL324:
 2349 02ee E0E7     		b	.L190
 2350              	.LVL325:
 2351              	.L226:
3142:Middlewares/Third_Party/FatFs/src/ff.c **** 		fmt = FS_FAT32;
 2352              		.loc 1 3142 0
 2353 02f0 0D20     		movs	r0, #13
 2354              	.LVL326:
 2355 02f2 DEE7     		b	.L190
 2356              	.LVL327:
 2357              	.L229:
3153:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 2358              		.loc 1 3153 0
 2359 02f4 0D20     		movs	r0, #13
 2360 02f6 DCE7     		b	.L190
 2361              	.L230:
3154:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 2362              		.loc 1 3154 0
 2363 02f8 0D20     		movs	r0, #13
 2364 02fa DAE7     		b	.L190
 2365              	.LVL328:
 2366              	.L231:
3158:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 2367              		.loc 1 3158 0
 2368 02fc 0D20     		movs	r0, #13
 2369 02fe D8E7     		b	.L190
 2370              	.LVL329:
 2371              	.L232:
3163:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2372              		.loc 1 3163 0
 2373 0300 0D20     		movs	r0, #13
 2374 0302 D6E7     		b	.L190
 2375              	.L240:
 2376              		.align	2
ARM GAS  /tmp/ccqUXb8n.s 			page 151


 2377              	.L239:
 2378 0304 00000000 		.word	.LANCHOR2
 2379 0308 00000000 		.word	.LANCHOR3
 2380 030c 52526141 		.word	1096897106
 2381 0310 72724161 		.word	1631679090
 2382              		.cfi_endproc
 2383              	.LFE179:
 2385              		.section	.text.put_fat,"ax",%progbits
 2386              		.align	1
 2387              		.syntax unified
 2388              		.thumb
 2389              		.thumb_func
 2390              		.fpu fpv5-sp-d16
 2392              	put_fat:
 2393              	.LFB161:
1086:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT bc;
 2394              		.loc 1 1086 0
 2395              		.cfi_startproc
 2396              		@ args = 0, pretend = 0, frame = 0
 2397              		@ frame_needed = 0, uses_anonymous_args = 0
 2398              	.LVL330:
 2399 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 2400              	.LCFI29:
 2401              		.cfi_def_cfa_offset 32
 2402              		.cfi_offset 4, -32
 2403              		.cfi_offset 5, -28
 2404              		.cfi_offset 6, -24
 2405              		.cfi_offset 7, -20
 2406              		.cfi_offset 8, -16
 2407              		.cfi_offset 9, -12
 2408              		.cfi_offset 10, -8
 2409              		.cfi_offset 14, -4
 2410              	.LVL331:
1091:Middlewares/Third_Party/FatFs/src/ff.c **** 		switch (fs->fs_type) {
 2411              		.loc 1 1091 0
 2412 0004 0129     		cmp	r1, #1
 2413 0006 7AD9     		bls	.L250
1091:Middlewares/Third_Party/FatFs/src/ff.c **** 		switch (fs->fs_type) {
 2414              		.loc 1 1091 0 is_stmt 0 discriminator 1
 2415 0008 8369     		ldr	r3, [r0, #24]
 2416 000a 8B42     		cmp	r3, r1
 2417 000c 79D9     		bls	.L251
 2418 000e 1746     		mov	r7, r2
 2419 0010 0C46     		mov	r4, r1
 2420 0012 0646     		mov	r6, r0
1092:Middlewares/Third_Party/FatFs/src/ff.c **** 		case FS_FAT12 :	/* Bitfield items */
 2421              		.loc 1 1092 0 is_stmt 1
 2422 0014 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 2423 0016 022B     		cmp	r3, #2
 2424 0018 43D0     		beq	.L243
 2425 001a 032B     		cmp	r3, #3
 2426 001c 54D0     		beq	.L244
 2427 001e 012B     		cmp	r3, #1
 2428 0020 01D0     		beq	.L255
1089:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2429              		.loc 1 1089 0
 2430 0022 0225     		movs	r5, #2
ARM GAS  /tmp/ccqUXb8n.s 			page 152


 2431 0024 6EE0     		b	.L242
 2432              	.L255:
 2433              	.LVL332:
1094:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 2434              		.loc 1 1094 0
 2435 0026 01EB5108 		add	r8, r1, r1, lsr #1
 2436              	.LVL333:
1095:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
 2437              		.loc 1 1095 0
 2438 002a 416A     		ldr	r1, [r0, #36]
 2439              	.LVL334:
 2440 002c 01EB5821 		add	r1, r1, r8, lsr #9
 2441 0030 FFF7FEFF 		bl	move_window
 2442              	.LVL335:
1096:Middlewares/Third_Party/FatFs/src/ff.c **** 			p = fs->win + bc++ % SS(fs);
 2443              		.loc 1 1096 0
 2444 0034 0546     		mov	r5, r0
 2445 0036 0028     		cmp	r0, #0
 2446 0038 64D1     		bne	.L242
1097:Middlewares/Third_Party/FatFs/src/ff.c **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 2447              		.loc 1 1097 0
 2448 003a 06F1340A 		add	r10, r6, #52
 2449 003e 08F10109 		add	r9, r8, #1
 2450              	.LVL336:
 2451 0042 C8F30808 		ubfx	r8, r8, #0, #9
 2452              	.LVL337:
1098:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
 2453              		.loc 1 1098 0
 2454 0046 14F00104 		ands	r4, r4, #1
 2455              	.LVL338:
 2456 004a 1FD0     		beq	.L246
1098:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
 2457              		.loc 1 1098 0 is_stmt 0 discriminator 1
 2458 004c 1AF90830 		ldrsb	r3, [r10, r8]
 2459 0050 03F00F03 		and	r3, r3, #15
 2460 0054 3A01     		lsls	r2, r7, #4
 2461 0056 02F47F62 		and	r2, r2, #4080
 2462 005a 1343     		orrs	r3, r3, r2
 2463 005c DBB2     		uxtb	r3, r3
 2464              	.L247:
1098:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
 2465              		.loc 1 1098 0 discriminator 4
 2466 005e 0AF80830 		strb	r3, [r10, r8]
1099:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 2467              		.loc 1 1099 0 is_stmt 1 discriminator 4
 2468 0062 0123     		movs	r3, #1
 2469 0064 F370     		strb	r3, [r6, #3]
1100:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
 2470              		.loc 1 1100 0 discriminator 4
 2471 0066 716A     		ldr	r1, [r6, #36]
 2472 0068 01EB5921 		add	r1, r1, r9, lsr #9
 2473 006c 3046     		mov	r0, r6
 2474              	.LVL339:
 2475 006e FFF7FEFF 		bl	move_window
 2476              	.LVL340:
1101:Middlewares/Third_Party/FatFs/src/ff.c **** 			p = fs->win + bc % SS(fs);
 2477              		.loc 1 1101 0 discriminator 4
ARM GAS  /tmp/ccqUXb8n.s 			page 153


 2478 0072 0546     		mov	r5, r0
 2479 0074 0028     		cmp	r0, #0
 2480 0076 45D1     		bne	.L242
1102:Middlewares/Third_Party/FatFs/src/ff.c **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 2481              		.loc 1 1102 0
 2482 0078 C9F30809 		ubfx	r9, r9, #0, #9
 2483              	.LVL341:
1103:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
 2484              		.loc 1 1103 0
 2485 007c 44B1     		cbz	r4, .L248
1103:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
 2486              		.loc 1 1103 0 is_stmt 0 discriminator 1
 2487 007e C7F30712 		ubfx	r2, r7, #4, #8
 2488              	.LVL342:
 2489              	.L249:
1103:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
 2490              		.loc 1 1103 0 discriminator 4
 2491 0082 0AF80920 		strb	r2, [r10, r9]
1104:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
 2492              		.loc 1 1104 0 is_stmt 1 discriminator 4
 2493 0086 0123     		movs	r3, #1
 2494 0088 F370     		strb	r3, [r6, #3]
1105:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2495              		.loc 1 1105 0 discriminator 4
 2496 008a 3BE0     		b	.L242
 2497              	.LVL343:
 2498              	.L246:
1098:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
 2499              		.loc 1 1098 0 discriminator 2
 2500 008c FBB2     		uxtb	r3, r7
 2501 008e E6E7     		b	.L247
 2502              	.LVL344:
 2503              	.L248:
1103:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
 2504              		.loc 1 1103 0 discriminator 2
 2505 0090 1AF90920 		ldrsb	r2, [r10, r9]
 2506 0094 22F00F02 		bic	r2, r2, #15
 2507 0098 C7F30327 		ubfx	r7, r7, #8, #4
 2508              	.LVL345:
 2509 009c 3A43     		orrs	r2, r2, r7
 2510 009e D2B2     		uxtb	r2, r2
 2511 00a0 EFE7     		b	.L249
 2512              	.LVL346:
 2513              	.L243:
1108:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
 2514              		.loc 1 1108 0
 2515 00a2 416A     		ldr	r1, [r0, #36]
 2516              	.LVL347:
 2517 00a4 01EB1421 		add	r1, r1, r4, lsr #8
 2518 00a8 FFF7FEFF 		bl	move_window
 2519              	.LVL348:
1109:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 2520              		.loc 1 1109 0
 2521 00ac 0546     		mov	r5, r0
 2522 00ae 48BB     		cbnz	r0, .L242
1110:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
 2523              		.loc 1 1110 0
ARM GAS  /tmp/ccqUXb8n.s 			page 154


 2524 00b0 06F13400 		add	r0, r6, #52
 2525              	.LVL349:
 2526 00b4 6400     		lsls	r4, r4, #1
 2527              	.LVL350:
 2528 00b6 04F4FF74 		and	r4, r4, #510
 2529 00ba B9B2     		uxth	r1, r7
 2530 00bc 2044     		add	r0, r0, r4
 2531 00be FFF7FEFF 		bl	st_word
 2532              	.LVL351:
1111:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
 2533              		.loc 1 1111 0
 2534 00c2 0123     		movs	r3, #1
 2535 00c4 F370     		strb	r3, [r6, #3]
1112:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2536              		.loc 1 1112 0
 2537 00c6 1DE0     		b	.L242
 2538              	.LVL352:
 2539              	.L244:
1118:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
 2540              		.loc 1 1118 0
 2541 00c8 416A     		ldr	r1, [r0, #36]
 2542              	.LVL353:
 2543 00ca 01EBD411 		add	r1, r1, r4, lsr #7
 2544 00ce FFF7FEFF 		bl	move_window
 2545              	.LVL354:
1119:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 2546              		.loc 1 1119 0
 2547 00d2 0546     		mov	r5, r0
 2548 00d4 B0B9     		cbnz	r0, .L242
1121:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 2549              		.loc 1 1121 0
 2550 00d6 27F07047 		bic	r7, r7, #-268435456
 2551              	.LVL355:
 2552 00da 06F13403 		add	r3, r6, #52
 2553 00de A100     		lsls	r1, r4, #2
 2554 00e0 01F4FE71 		and	r1, r1, #508
 2555 00e4 5C18     		adds	r4, r3, r1
 2556              	.LVL356:
 2557 00e6 2046     		mov	r0, r4
 2558              	.LVL357:
 2559 00e8 FFF7FEFF 		bl	ld_dword
 2560              	.LVL358:
 2561 00ec 00F07041 		and	r1, r0, #-268435456
 2562              	.LVL359:
1123:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
 2563              		.loc 1 1123 0
 2564 00f0 3943     		orrs	r1, r1, r7
 2565              	.LVL360:
 2566 00f2 2046     		mov	r0, r4
 2567 00f4 FFF7FEFF 		bl	st_dword
 2568              	.LVL361:
1124:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
 2569              		.loc 1 1124 0
 2570 00f8 0123     		movs	r3, #1
 2571 00fa F370     		strb	r3, [r6, #3]
1125:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 2572              		.loc 1 1125 0
ARM GAS  /tmp/ccqUXb8n.s 			page 155


 2573 00fc 02E0     		b	.L242
 2574              	.LVL362:
 2575              	.L250:
1089:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2576              		.loc 1 1089 0
 2577 00fe 0225     		movs	r5, #2
 2578 0100 00E0     		b	.L242
 2579              	.L251:
 2580 0102 0225     		movs	r5, #2
 2581              	.LVL363:
 2582              	.L242:
1129:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2583              		.loc 1 1129 0
 2584 0104 2846     		mov	r0, r5
 2585 0106 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 2586              		.cfi_endproc
 2587              	.LFE161:
 2589              		.section	.text.get_fat,"ax",%progbits
 2590              		.align	1
 2591              		.syntax unified
 2592              		.thumb
 2593              		.thumb_func
 2594              		.fpu fpv5-sp-d16
 2596              	get_fat:
 2597              	.LFB160:
1005:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT wc, bc;
 2598              		.loc 1 1005 0
 2599              		.cfi_startproc
 2600              		@ args = 0, pretend = 0, frame = 0
 2601              		@ frame_needed = 0, uses_anonymous_args = 0
 2602              	.LVL364:
 2603 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2604              	.LCFI30:
 2605              		.cfi_def_cfa_offset 24
 2606              		.cfi_offset 3, -24
 2607              		.cfi_offset 4, -20
 2608              		.cfi_offset 5, -16
 2609              		.cfi_offset 6, -12
 2610              		.cfi_offset 7, -8
 2611              		.cfi_offset 14, -4
1008:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2612              		.loc 1 1008 0
 2613 0002 0668     		ldr	r6, [r0]
 2614              	.LVL365:
1011:Middlewares/Third_Party/FatFs/src/ff.c **** 		val = 1;	/* Internal error */
 2615              		.loc 1 1011 0
 2616 0004 0129     		cmp	r1, #1
 2617 0006 53D9     		bls	.L262
1011:Middlewares/Third_Party/FatFs/src/ff.c **** 		val = 1;	/* Internal error */
 2618              		.loc 1 1011 0 is_stmt 0 discriminator 1
 2619 0008 B369     		ldr	r3, [r6, #24]
 2620 000a 8B42     		cmp	r3, r1
 2621 000c 52D9     		bls	.L263
 2622 000e 0C46     		mov	r4, r1
 2623              	.LVL366:
1017:Middlewares/Third_Party/FatFs/src/ff.c **** 		case FS_FAT12 :
 2624              		.loc 1 1017 0 is_stmt 1
ARM GAS  /tmp/ccqUXb8n.s 			page 156


 2625 0010 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 2626 0012 022B     		cmp	r3, #2
 2627 0014 2BD0     		beq	.L258
 2628 0016 032B     		cmp	r3, #3
 2629 0018 39D0     		beq	.L259
 2630 001a 012B     		cmp	r3, #1
 2631 001c 01D0     		beq	.L271
1065:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 2632              		.loc 1 1065 0
 2633 001e 0120     		movs	r0, #1
 2634              	.LVL367:
 2635 0020 47E0     		b	.L256
 2636              	.LVL368:
 2637              	.L271:
1019:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 2638              		.loc 1 1019 0
 2639 0022 01EB5105 		add	r5, r1, r1, lsr #1
 2640              	.LVL369:
1020:Middlewares/Third_Party/FatFs/src/ff.c **** 			wc = fs->win[bc++ % SS(fs)];
 2641              		.loc 1 1020 0
 2642 0026 716A     		ldr	r1, [r6, #36]
 2643              	.LVL370:
 2644 0028 01EB5521 		add	r1, r1, r5, lsr #9
 2645 002c 3046     		mov	r0, r6
 2646              	.LVL371:
 2647 002e FFF7FEFF 		bl	move_window
 2648              	.LVL372:
 2649 0032 0028     		cmp	r0, #0
 2650 0034 40D1     		bne	.L265
1021:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 2651              		.loc 1 1021 0
 2652 0036 6F1C     		adds	r7, r5, #1
 2653              	.LVL373:
 2654 0038 C5F30805 		ubfx	r5, r5, #0, #9
 2655 003c 3544     		add	r5, r5, r6
 2656 003e 95F83450 		ldrb	r5, [r5, #52]	@ zero_extendqisi2
 2657              	.LVL374:
1022:Middlewares/Third_Party/FatFs/src/ff.c **** 			wc |= fs->win[bc % SS(fs)] << 8;
 2658              		.loc 1 1022 0
 2659 0042 716A     		ldr	r1, [r6, #36]
 2660 0044 01EB5721 		add	r1, r1, r7, lsr #9
 2661 0048 3046     		mov	r0, r6
 2662 004a FFF7FEFF 		bl	move_window
 2663              	.LVL375:
 2664 004e B0BB     		cbnz	r0, .L266
1023:Middlewares/Third_Party/FatFs/src/ff.c **** 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 2665              		.loc 1 1023 0
 2666 0050 C7F30803 		ubfx	r3, r7, #0, #9
 2667 0054 3344     		add	r3, r3, r6
 2668 0056 93F83400 		ldrb	r0, [r3, #52]	@ zero_extendqisi2
 2669 005a 45EA0020 		orr	r0, r5, r0, lsl #8
 2670              	.LVL376:
1024:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
 2671              		.loc 1 1024 0
 2672 005e 14F0010F 		tst	r4, #1
 2673 0062 01D0     		beq	.L261
1024:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
ARM GAS  /tmp/ccqUXb8n.s 			page 157


 2674              		.loc 1 1024 0 is_stmt 0 discriminator 1
 2675 0064 0009     		lsrs	r0, r0, #4
 2676              	.LVL377:
 2677 0066 24E0     		b	.L256
 2678              	.LVL378:
 2679              	.L261:
1024:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
 2680              		.loc 1 1024 0 discriminator 2
 2681 0068 C0F30B00 		ubfx	r0, r0, #0, #12
 2682              	.LVL379:
 2683 006c 21E0     		b	.L256
 2684              	.LVL380:
 2685              	.L258:
1028:Middlewares/Third_Party/FatFs/src/ff.c **** 			val = ld_word(fs->win + clst * 2 % SS(fs));
 2686              		.loc 1 1028 0 is_stmt 1
 2687 006e 716A     		ldr	r1, [r6, #36]
 2688              	.LVL381:
 2689 0070 01EB1421 		add	r1, r1, r4, lsr #8
 2690 0074 3046     		mov	r0, r6
 2691              	.LVL382:
 2692 0076 FFF7FEFF 		bl	move_window
 2693              	.LVL383:
 2694 007a 18BB     		cbnz	r0, .L267
1029:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
 2695              		.loc 1 1029 0
 2696 007c 06F13400 		add	r0, r6, #52
 2697 0080 6100     		lsls	r1, r4, #1
 2698 0082 01F4FF71 		and	r1, r1, #510
 2699 0086 0844     		add	r0, r0, r1
 2700 0088 FFF7FEFF 		bl	ld_word
 2701              	.LVL384:
1030:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2702              		.loc 1 1030 0
 2703 008c 11E0     		b	.L256
 2704              	.LVL385:
 2705              	.L259:
1033:Middlewares/Third_Party/FatFs/src/ff.c **** 			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 2706              		.loc 1 1033 0
 2707 008e 716A     		ldr	r1, [r6, #36]
 2708              	.LVL386:
 2709 0090 01EBD411 		add	r1, r1, r4, lsr #7
 2710 0094 3046     		mov	r0, r6
 2711              	.LVL387:
 2712 0096 FFF7FEFF 		bl	move_window
 2713              	.LVL388:
 2714 009a B0B9     		cbnz	r0, .L268
1034:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
 2715              		.loc 1 1034 0
 2716 009c 3436     		adds	r6, r6, #52
 2717              	.LVL389:
 2718 009e A100     		lsls	r1, r4, #2
 2719 00a0 01F4FE70 		and	r0, r1, #508
 2720 00a4 3044     		add	r0, r0, r6
 2721 00a6 FFF7FEFF 		bl	ld_dword
 2722              	.LVL390:
 2723 00aa 20F07040 		bic	r0, r0, #-268435456
 2724              	.LVL391:
ARM GAS  /tmp/ccqUXb8n.s 			page 158


1035:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 2725              		.loc 1 1035 0
 2726 00ae 00E0     		b	.L256
 2727              	.LVL392:
 2728              	.L262:
1012:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2729              		.loc 1 1012 0
 2730 00b0 0120     		movs	r0, #1
 2731              	.LVL393:
 2732              	.L256:
1070:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2733              		.loc 1 1070 0
 2734 00b2 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2735              	.LVL394:
 2736              	.L263:
1012:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2737              		.loc 1 1012 0
 2738 00b4 0120     		movs	r0, #1
 2739              	.LVL395:
 2740 00b6 FCE7     		b	.L256
 2741              	.LVL396:
 2742              	.L265:
1015:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2743              		.loc 1 1015 0
 2744 00b8 4FF0FF30 		mov	r0, #-1
 2745 00bc F9E7     		b	.L256
 2746              	.LVL397:
 2747              	.L266:
 2748 00be 4FF0FF30 		mov	r0, #-1
 2749 00c2 F6E7     		b	.L256
 2750              	.LVL398:
 2751              	.L267:
 2752 00c4 4FF0FF30 		mov	r0, #-1
 2753 00c8 F3E7     		b	.L256
 2754              	.L268:
 2755 00ca 4FF0FF30 		mov	r0, #-1
1069:Middlewares/Third_Party/FatFs/src/ff.c **** }
 2756              		.loc 1 1069 0
 2757 00ce F0E7     		b	.L256
 2758              		.cfi_endproc
 2759              	.LFE160:
 2761              		.section	.text.dir_sdi,"ax",%progbits
 2762              		.align	1
 2763              		.syntax unified
 2764              		.thumb
 2765              		.thumb_func
 2766              		.fpu fpv5-sp-d16
 2768              	dir_sdi:
 2769              	.LFB165:
1474:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD csz, clst;
 2770              		.loc 1 1474 0
 2771              		.cfi_startproc
 2772              		@ args = 0, pretend = 0, frame = 0
 2773              		@ frame_needed = 0, uses_anonymous_args = 0
 2774              	.LVL399:
 2775 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2776              	.LCFI31:
ARM GAS  /tmp/ccqUXb8n.s 			page 159


 2777              		.cfi_def_cfa_offset 24
 2778              		.cfi_offset 4, -24
 2779              		.cfi_offset 5, -20
 2780              		.cfi_offset 6, -16
 2781              		.cfi_offset 7, -12
 2782              		.cfi_offset 8, -8
 2783              		.cfi_offset 14, -4
1476:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2784              		.loc 1 1476 0
 2785 0004 0768     		ldr	r7, [r0]
 2786              	.LVL400:
1479:Middlewares/Third_Party/FatFs/src/ff.c **** 		return FR_INT_ERR;
 2787              		.loc 1 1479 0
 2788 0006 B1F5001F 		cmp	r1, #2097152
 2789 000a 3BD2     		bcs	.L279
 2790 000c 0646     		mov	r6, r0
 2791 000e 0D46     		mov	r5, r1
1479:Middlewares/Third_Party/FatFs/src/ff.c **** 		return FR_INT_ERR;
 2792              		.loc 1 1479 0 is_stmt 0 discriminator 1
 2793 0010 11F01F0F 		tst	r1, #31
 2794 0014 39D1     		bne	.L280
1482:Middlewares/Third_Party/FatFs/src/ff.c **** 	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 2795              		.loc 1 1482 0 is_stmt 1
 2796 0016 7161     		str	r1, [r6, #20]
1483:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 2797              		.loc 1 1483 0
 2798 0018 8468     		ldr	r4, [r0, #8]
 2799              	.LVL401:
1484:Middlewares/Third_Party/FatFs/src/ff.c **** 		clst = fs->dirbase;
 2800              		.loc 1 1484 0
 2801 001a 1CB9     		cbnz	r4, .L274
1484:Middlewares/Third_Party/FatFs/src/ff.c **** 		clst = fs->dirbase;
 2802              		.loc 1 1484 0 is_stmt 0 discriminator 1
 2803 001c 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
 2804 001e 022B     		cmp	r3, #2
 2805 0020 00D9     		bls	.L274
1485:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 2806              		.loc 1 1485 0 is_stmt 1
 2807 0022 BC6A     		ldr	r4, [r7, #40]
 2808              	.LVL402:
 2809              	.L274:
1489:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 2810              		.loc 1 1489 0
 2811 0024 94B9     		cbnz	r4, .L275
1490:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->sect = fs->dirbase;
 2812              		.loc 1 1490 0
 2813 0026 3B89     		ldrh	r3, [r7, #8]
 2814 0028 B3EB551F 		cmp	r3, r5, lsr #5
 2815 002c 2FD9     		bls	.L281
1491:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2816              		.loc 1 1491 0
 2817 002e BB6A     		ldr	r3, [r7, #40]
 2818 0030 F361     		str	r3, [r6, #28]
 2819              	.LVL403:
 2820              	.L276:
1503:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!dp->sect) return FR_INT_ERR;
 2821              		.loc 1 1503 0
ARM GAS  /tmp/ccqUXb8n.s 			page 160


 2822 0032 B461     		str	r4, [r6, #24]
1504:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 2823              		.loc 1 1504 0
 2824 0034 F369     		ldr	r3, [r6, #28]
 2825 0036 93B3     		cbz	r3, .L285
1505:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 2826              		.loc 1 1505 0
 2827 0038 03EB5523 		add	r3, r3, r5, lsr #9
 2828 003c F361     		str	r3, [r6, #28]
1506:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2829              		.loc 1 1506 0
 2830 003e 3437     		adds	r7, r7, #52
 2831              	.LVL404:
 2832 0040 C5F30805 		ubfx	r5, r5, #0, #9
 2833              	.LVL405:
 2834 0044 3D44     		add	r5, r5, r7
 2835 0046 3562     		str	r5, [r6, #32]
1508:Middlewares/Third_Party/FatFs/src/ff.c **** }
 2836              		.loc 1 1508 0
 2837 0048 0020     		movs	r0, #0
 2838 004a 1CE0     		b	.L273
 2839              	.LVL406:
 2840              	.L275:
1494:Middlewares/Third_Party/FatFs/src/ff.c **** 		while (ofs >= csz) {				/* Follow cluster chain */
 2841              		.loc 1 1494 0
 2842 004c B7F80A80 		ldrh	r8, [r7, #10]
 2843 0050 4FEA4828 		lsl	r8, r8, #9
 2844              	.LVL407:
 2845              	.L277:
1495:Middlewares/Third_Party/FatFs/src/ff.c **** 			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 2846              		.loc 1 1495 0
 2847 0054 4545     		cmp	r5, r8
 2848 0056 0FD3     		bcc	.L287
1496:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 2849              		.loc 1 1496 0
 2850 0058 2146     		mov	r1, r4
 2851 005a 3046     		mov	r0, r6
 2852 005c FFF7FEFF 		bl	get_fat
 2853              	.LVL408:
 2854 0060 0446     		mov	r4, r0
 2855              	.LVL409:
1497:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal 
 2856              		.loc 1 1497 0
 2857 0062 B0F1FF3F 		cmp	r0, #-1
 2858 0066 14D0     		beq	.L282
1498:Middlewares/Third_Party/FatFs/src/ff.c **** 			ofs -= csz;
 2859              		.loc 1 1498 0
 2860 0068 0128     		cmp	r0, #1
 2861 006a 14D9     		bls	.L283
1498:Middlewares/Third_Party/FatFs/src/ff.c **** 			ofs -= csz;
 2862              		.loc 1 1498 0 is_stmt 0 discriminator 2
 2863 006c BB69     		ldr	r3, [r7, #24]
 2864 006e 8342     		cmp	r3, r0
 2865 0070 13D9     		bls	.L284
1499:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 2866              		.loc 1 1499 0 is_stmt 1
 2867 0072 A5EB0805 		sub	r5, r5, r8
ARM GAS  /tmp/ccqUXb8n.s 			page 161


 2868              	.LVL410:
 2869 0076 EDE7     		b	.L277
 2870              	.LVL411:
 2871              	.L287:
1501:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 2872              		.loc 1 1501 0
 2873 0078 2146     		mov	r1, r4
 2874 007a 3846     		mov	r0, r7
 2875 007c FFF7FEFF 		bl	clust2sect
 2876              	.LVL412:
 2877 0080 F061     		str	r0, [r6, #28]
 2878 0082 D6E7     		b	.L276
 2879              	.LVL413:
 2880              	.L279:
1480:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 2881              		.loc 1 1480 0
 2882 0084 0220     		movs	r0, #2
 2883              	.LVL414:
 2884              	.L273:
1509:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2885              		.loc 1 1509 0
 2886 0086 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2887              	.LVL415:
 2888              	.L280:
1480:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 2889              		.loc 1 1480 0
 2890 008a 0220     		movs	r0, #2
 2891              	.LVL416:
 2892 008c FBE7     		b	.L273
 2893              	.LVL417:
 2894              	.L281:
1490:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->sect = fs->dirbase;
 2895              		.loc 1 1490 0
 2896 008e 0220     		movs	r0, #2
 2897              	.LVL418:
 2898 0090 F9E7     		b	.L273
 2899              	.LVL419:
 2900              	.L282:
1497:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal 
 2901              		.loc 1 1497 0
 2902 0092 0120     		movs	r0, #1
 2903              	.LVL420:
 2904 0094 F7E7     		b	.L273
 2905              	.LVL421:
 2906              	.L283:
1498:Middlewares/Third_Party/FatFs/src/ff.c **** 			ofs -= csz;
 2907              		.loc 1 1498 0
 2908 0096 0220     		movs	r0, #2
 2909              	.LVL422:
 2910 0098 F5E7     		b	.L273
 2911              	.LVL423:
 2912              	.L284:
 2913 009a 0220     		movs	r0, #2
 2914              	.LVL424:
 2915 009c F3E7     		b	.L273
 2916              	.LVL425:
 2917              	.L285:
ARM GAS  /tmp/ccqUXb8n.s 			page 162


1504:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 2918              		.loc 1 1504 0
 2919 009e 0220     		movs	r0, #2
 2920 00a0 F1E7     		b	.L273
 2921              		.cfi_endproc
 2922              	.LFE165:
 2924              		.section	.text.create_chain,"ax",%progbits
 2925              		.align	1
 2926              		.syntax unified
 2927              		.thumb
 2928              		.thumb_func
 2929              		.fpu fpv5-sp-d16
 2931              	create_chain:
 2932              	.LFB163:
1355:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD cs, ncl, scl;
 2933              		.loc 1 1355 0
 2934              		.cfi_startproc
 2935              		@ args = 0, pretend = 0, frame = 0
 2936              		@ frame_needed = 0, uses_anonymous_args = 0
 2937              	.LVL426:
 2938 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2939              	.LCFI32:
 2940              		.cfi_def_cfa_offset 24
 2941              		.cfi_offset 4, -24
 2942              		.cfi_offset 5, -20
 2943              		.cfi_offset 6, -16
 2944              		.cfi_offset 7, -12
 2945              		.cfi_offset 8, -8
 2946              		.cfi_offset 14, -4
 2947 0004 0746     		mov	r7, r0
1358:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2948              		.loc 1 1358 0
 2949 0006 0668     		ldr	r6, [r0]
 2950              	.LVL427:
1361:Middlewares/Third_Party/FatFs/src/ff.c **** 		scl = fs->last_clst;				/* Get suggested cluster to start from */
 2951              		.loc 1 1361 0
 2952 0008 8846     		mov	r8, r1
 2953 000a 31B9     		cbnz	r1, .L289
1362:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 2954              		.loc 1 1362 0
 2955 000c 3569     		ldr	r5, [r6, #16]
 2956              	.LVL428:
1363:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 2957              		.loc 1 1363 0
 2958 000e 8DB1     		cbz	r5, .L298
1363:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 2959              		.loc 1 1363 0 is_stmt 0 discriminator 2
 2960 0010 B369     		ldr	r3, [r6, #24]
 2961 0012 AB42     		cmp	r3, r5
 2962 0014 0FD8     		bhi	.L290
1363:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 2963              		.loc 1 1363 0
 2964 0016 0125     		movs	r5, #1
 2965              	.LVL429:
 2966 0018 0DE0     		b	.L290
 2967              	.LVL430:
 2968              	.L289:
ARM GAS  /tmp/ccqUXb8n.s 			page 163


1366:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (cs < 2) return 1;				/* Invalid FAT value */
 2969              		.loc 1 1366 0 is_stmt 1
 2970 001a FFF7FEFF 		bl	get_fat
 2971              	.LVL431:
 2972 001e 0346     		mov	r3, r0
 2973              	.LVL432:
1367:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 2974              		.loc 1 1367 0
 2975 0020 0128     		cmp	r0, #1
 2976 0022 4CD9     		bls	.L300
1368:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 2977              		.loc 1 1368 0
 2978 0024 B0F1FF3F 		cmp	r0, #-1
 2979 0028 4ED0     		beq	.L288
1369:Middlewares/Third_Party/FatFs/src/ff.c **** 		scl = clst;
 2980              		.loc 1 1369 0
 2981 002a B269     		ldr	r2, [r6, #24]
 2982 002c 8242     		cmp	r2, r0
 2983 002e 4BD8     		bhi	.L288
1370:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 2984              		.loc 1 1370 0
 2985 0030 4546     		mov	r5, r8
 2986 0032 00E0     		b	.L290
 2987              	.LVL433:
 2988              	.L298:
1363:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 2989              		.loc 1 1363 0
 2990 0034 0125     		movs	r5, #1
 2991              	.LVL434:
 2992              	.L290:
1400:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (;;) {
 2993              		.loc 1 1400 0
 2994 0036 2C46     		mov	r4, r5
 2995 0038 0CE0     		b	.L294
 2996              	.LVL435:
 2997              	.L292:
1407:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (cs == 0) break;				/* Found a free cluster */
 2998              		.loc 1 1407 0
 2999 003a 2146     		mov	r1, r4
 3000 003c 3846     		mov	r0, r7
 3001 003e FFF7FEFF 		bl	get_fat
 3002              	.LVL436:
1408:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 3003              		.loc 1 1408 0
 3004 0042 0346     		mov	r3, r0
 3005 0044 70B1     		cbz	r0, .L293
1409:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ncl == scl) return 0;		/* No free cluster */
 3006              		.loc 1 1409 0
 3007 0046 B0F1FF3F 		cmp	r0, #-1
 3008 004a 18BF     		it	ne
 3009 004c 0128     		cmpne	r0, #1
 3010 004e 3BD0     		beq	.L288
1410:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 3011              		.loc 1 1410 0
 3012 0050 AC42     		cmp	r4, r5
 3013 0052 38D0     		beq	.L305
 3014              	.LVL437:
ARM GAS  /tmp/ccqUXb8n.s 			page 164


 3015              	.L294:
1402:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 3016              		.loc 1 1402 0
 3017 0054 0134     		adds	r4, r4, #1
 3018              	.LVL438:
1403:Middlewares/Third_Party/FatFs/src/ff.c **** 				ncl = 2;
 3019              		.loc 1 1403 0
 3020 0056 B369     		ldr	r3, [r6, #24]
 3021 0058 A342     		cmp	r3, r4
 3022 005a EED8     		bhi	.L292
 3023              	.LVL439:
1405:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 3024              		.loc 1 1405 0
 3025 005c 012D     		cmp	r5, #1
 3026 005e 30D9     		bls	.L301
1404:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (ncl > scl) return 0;	/* No free cluster */
 3027              		.loc 1 1404 0
 3028 0060 0224     		movs	r4, #2
 3029 0062 EAE7     		b	.L292
 3030              	.LVL440:
 3031              	.L293:
1412:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK && clst != 0) {
 3032              		.loc 1 1412 0
 3033 0064 4FF0FF32 		mov	r2, #-1
 3034 0068 2146     		mov	r1, r4
 3035 006a 3046     		mov	r0, r6
 3036              	.LVL441:
 3037 006c FFF7FEFF 		bl	put_fat
 3038              	.LVL442:
1413:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 3039              		.loc 1 1413 0
 3040 0070 0246     		mov	r2, r0
 3041 0072 18F10003 		adds	r3, r8, #0
 3042 0076 18BF     		it	ne
 3043 0078 0123     		movne	r3, #1
 3044 007a 0028     		cmp	r0, #0
 3045 007c 0CBF     		ite	eq
 3046 007e 1846     		moveq	r0, r3
 3047 0080 0020     		movne	r0, #0
 3048              	.LVL443:
 3049 0082 70B9     		cbnz	r0, .L306
 3050              	.L295:
 3051              	.LVL444:
1418:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->last_clst = ncl;
 3052              		.loc 1 1418 0
 3053 0084 A2B9     		cbnz	r2, .L296
1419:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 3054              		.loc 1 1419 0
 3055 0086 3461     		str	r4, [r6, #16]
1420:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->fsi_flag |= 1;
 3056              		.loc 1 1420 0
 3057 0088 7269     		ldr	r2, [r6, #20]
 3058              	.LVL445:
 3059 008a B369     		ldr	r3, [r6, #24]
 3060 008c 023B     		subs	r3, r3, #2
 3061 008e 9A42     		cmp	r2, r3
 3062 0090 01D8     		bhi	.L297
ARM GAS  /tmp/ccqUXb8n.s 			page 165


1420:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->fsi_flag |= 1;
 3063              		.loc 1 1420 0 is_stmt 0 discriminator 1
 3064 0092 013A     		subs	r2, r2, #1
 3065 0094 7261     		str	r2, [r6, #20]
 3066              	.L297:
1421:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else {
 3067              		.loc 1 1421 0 is_stmt 1
 3068 0096 3379     		ldrb	r3, [r6, #4]	@ zero_extendqisi2
 3069 0098 43F00103 		orr	r3, r3, #1
 3070 009c 3371     		strb	r3, [r6, #4]
 3071 009e 2346     		mov	r3, r4
 3072 00a0 12E0     		b	.L288
 3073              	.L306:
1414:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 3074              		.loc 1 1414 0
 3075 00a2 2246     		mov	r2, r4
 3076 00a4 4146     		mov	r1, r8
 3077 00a6 3046     		mov	r0, r6
 3078 00a8 FFF7FEFF 		bl	put_fat
 3079              	.LVL446:
 3080 00ac 0246     		mov	r2, r0
 3081              	.LVL447:
 3082 00ae E9E7     		b	.L295
 3083              	.L296:
1423:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 3084              		.loc 1 1423 0
 3085 00b0 012A     		cmp	r2, #1
 3086 00b2 01D0     		beq	.L307
 3087 00b4 0123     		movs	r3, #1
 3088 00b6 07E0     		b	.L288
 3089              	.L307:
 3090 00b8 4FF0FF33 		mov	r3, #-1
 3091 00bc 04E0     		b	.L288
 3092              	.LVL448:
 3093              	.L300:
1367:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 3094              		.loc 1 1367 0
 3095 00be 0123     		movs	r3, #1
 3096 00c0 02E0     		b	.L288
 3097              	.LVL449:
 3098              	.L301:
1405:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 3099              		.loc 1 1405 0
 3100 00c2 0023     		movs	r3, #0
 3101 00c4 00E0     		b	.L288
 3102              	.LVL450:
 3103              	.L305:
1410:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 3104              		.loc 1 1410 0
 3105 00c6 0023     		movs	r3, #0
 3106              	.LVL451:
 3107              	.L288:
1427:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3108              		.loc 1 1427 0
 3109 00c8 1846     		mov	r0, r3
 3110 00ca BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3111              		.cfi_endproc
ARM GAS  /tmp/ccqUXb8n.s 			page 166


 3112              	.LFE163:
 3114              		.section	.text.remove_chain,"ax",%progbits
 3115              		.align	1
 3116              		.syntax unified
 3117              		.thumb
 3118              		.thumb_func
 3119              		.fpu fpv5-sp-d16
 3121              	remove_chain:
 3122              	.LFB162:
1276:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res = FR_OK;
 3123              		.loc 1 1276 0
 3124              		.cfi_startproc
 3125              		@ args = 0, pretend = 0, frame = 0
 3126              		@ frame_needed = 0, uses_anonymous_args = 0
 3127              	.LVL452:
 3128 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3129              	.LCFI33:
 3130              		.cfi_def_cfa_offset 24
 3131              		.cfi_offset 3, -24
 3132              		.cfi_offset 4, -20
 3133              		.cfi_offset 5, -16
 3134              		.cfi_offset 6, -12
 3135              		.cfi_offset 7, -8
 3136              		.cfi_offset 14, -4
 3137 0002 0E46     		mov	r6, r1
 3138              	.LVL453:
1279:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT || _USE_TRIM
 3139              		.loc 1 1279 0
 3140 0004 0568     		ldr	r5, [r0]
 3141              	.LVL454:
1287:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3142              		.loc 1 1287 0
 3143 0006 0129     		cmp	r1, #1
 3144 0008 2ED9     		bls	.L313
 3145 000a 0746     		mov	r7, r0
 3146 000c 1146     		mov	r1, r2
 3147              	.LVL455:
1287:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3148              		.loc 1 1287 0 is_stmt 0 discriminator 2
 3149 000e AB69     		ldr	r3, [r5, #24]
 3150 0010 B342     		cmp	r3, r6
 3151 0012 2CD9     		bls	.L314
1290:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = put_fat(fs, pclst, 0xFFFFFFFF);
 3152              		.loc 1 1290 0 is_stmt 1
 3153 0014 52B1     		cbz	r2, .L312
1291:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) return res;
 3154              		.loc 1 1291 0
 3155 0016 4FF0FF32 		mov	r2, #-1
 3156              	.LVL456:
 3157 001a 2846     		mov	r0, r5
 3158              	.LVL457:
 3159 001c FFF7FEFF 		bl	put_fat
 3160              	.LVL458:
1292:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 3161              		.loc 1 1292 0
 3162 0020 8446     		mov	ip, r0
 3163 0022 18B1     		cbz	r0, .L312
ARM GAS  /tmp/ccqUXb8n.s 			page 167


 3164 0024 25E0     		b	.L309
 3165              	.LVL459:
 3166              	.L311:
1327:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 3167              		.loc 1 1327 0
 3168 0026 2646     		mov	r6, r4
1328:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3169              		.loc 1 1328 0
 3170 0028 A242     		cmp	r2, r4
 3171 002a 22D9     		bls	.L309
 3172              	.LVL460:
 3173              	.L312:
1297:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nxt == 0) break;				/* Empty cluster? */
 3174              		.loc 1 1297 0
 3175 002c 3146     		mov	r1, r6
 3176 002e 3846     		mov	r0, r7
 3177 0030 FFF7FEFF 		bl	get_fat
 3178              	.LVL461:
1298:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 3179              		.loc 1 1298 0
 3180 0034 0446     		mov	r4, r0
 3181 0036 F0B1     		cbz	r0, .L315
1299:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 3182              		.loc 1 1299 0
 3183 0038 0128     		cmp	r0, #1
 3184 003a 1FD0     		beq	.L316
1300:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 3185              		.loc 1 1300 0
 3186 003c B0F1FF3F 		cmp	r0, #-1
 3187 0040 1FD0     		beq	.L317
1302:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) return res;
 3188              		.loc 1 1302 0
 3189 0042 0022     		movs	r2, #0
 3190 0044 3146     		mov	r1, r6
 3191 0046 2846     		mov	r0, r5
 3192              	.LVL462:
 3193 0048 FFF7FEFF 		bl	put_fat
 3194              	.LVL463:
1303:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 3195              		.loc 1 1303 0
 3196 004c 8446     		mov	ip, r0
 3197 004e 80B9     		cbnz	r0, .L309
1305:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->free_clst++;
 3198              		.loc 1 1305 0
 3199 0050 6B69     		ldr	r3, [r5, #20]
 3200 0052 AA69     		ldr	r2, [r5, #24]
 3201 0054 911E     		subs	r1, r2, #2
 3202 0056 8B42     		cmp	r3, r1
 3203 0058 E5D2     		bcs	.L311
1306:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->fsi_flag |= 1;
 3204              		.loc 1 1306 0
 3205 005a 0133     		adds	r3, r3, #1
 3206 005c 6B61     		str	r3, [r5, #20]
1307:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 3207              		.loc 1 1307 0
 3208 005e 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 3209 0060 43F00103 		orr	r3, r3, #1
ARM GAS  /tmp/ccqUXb8n.s 			page 168


 3210 0064 2B71     		strb	r3, [r5, #4]
 3211 0066 DEE7     		b	.L311
 3212              	.LVL464:
 3213              	.L313:
1287:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3214              		.loc 1 1287 0
 3215 0068 4FF0020C 		mov	ip, #2
 3216 006c 01E0     		b	.L309
 3217              	.LVL465:
 3218              	.L314:
 3219 006e 4FF0020C 		mov	ip, #2
 3220              	.LVL466:
 3221              	.L309:
1342:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3222              		.loc 1 1342 0
 3223 0072 6046     		mov	r0, ip
 3224 0074 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3225              	.LVL467:
 3226              	.L315:
1341:Middlewares/Third_Party/FatFs/src/ff.c **** }
 3227              		.loc 1 1341 0
 3228 0076 4FF0000C 		mov	ip, #0
 3229 007a FAE7     		b	.L309
 3230              	.L316:
1299:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 3231              		.loc 1 1299 0
 3232 007c 4FF0020C 		mov	ip, #2
 3233 0080 F7E7     		b	.L309
 3234              	.L317:
1300:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 3235              		.loc 1 1300 0
 3236 0082 4FF0010C 		mov	ip, #1
 3237 0086 F4E7     		b	.L309
 3238              		.cfi_endproc
 3239              	.LFE162:
 3241              		.section	.text.dir_remove,"ax",%progbits
 3242              		.align	1
 3243              		.syntax unified
 3244              		.thumb
 3245              		.thumb_func
 3246              		.fpu fpv5-sp-d16
 3248              	dir_remove:
 3249              	.LFB173:
2399:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 3250              		.loc 1 2399 0
 3251              		.cfi_startproc
 3252              		@ args = 0, pretend = 0, frame = 0
 3253              		@ frame_needed = 0, uses_anonymous_args = 0
 3254              	.LVL468:
 3255 0000 38B5     		push	{r3, r4, r5, lr}
 3256              	.LCFI34:
 3257              		.cfi_def_cfa_offset 16
 3258              		.cfi_offset 3, -16
 3259              		.cfi_offset 4, -12
 3260              		.cfi_offset 5, -8
 3261              		.cfi_offset 14, -4
 3262 0002 0446     		mov	r4, r0
ARM GAS  /tmp/ccqUXb8n.s 			page 169


2401:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
 3263              		.loc 1 2401 0
 3264 0004 0568     		ldr	r5, [r0]
 3265              	.LVL469:
2424:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 3266              		.loc 1 2424 0
 3267 0006 C169     		ldr	r1, [r0, #28]
 3268 0008 2846     		mov	r0, r5
 3269              	.LVL470:
 3270 000a FFF7FEFF 		bl	move_window
 3271              	.LVL471:
2425:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->dir[DIR_Name] = DDEM;
 3272              		.loc 1 2425 0
 3273 000e 0346     		mov	r3, r0
 3274 0010 20B9     		cbnz	r0, .L320
2426:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->wflag = 1;
 3275              		.loc 1 2426 0
 3276 0012 226A     		ldr	r2, [r4, #32]
 3277 0014 E521     		movs	r1, #229
 3278 0016 1170     		strb	r1, [r2]
2427:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 3279              		.loc 1 2427 0
 3280 0018 0122     		movs	r2, #1
 3281 001a EA70     		strb	r2, [r5, #3]
 3282              	.L320:
2432:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3283              		.loc 1 2432 0
 3284 001c 1846     		mov	r0, r3
 3285              	.LVL472:
 3286 001e 38BD     		pop	{r3, r4, r5, pc}
 3287              		.cfi_endproc
 3288              	.LFE173:
 3290              		.section	.text.dir_next,"ax",%progbits
 3291              		.align	1
 3292              		.syntax unified
 3293              		.thumb
 3294              		.thumb_func
 3295              		.fpu fpv5-sp-d16
 3297              	dir_next:
 3298              	.LFB166:
1523:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD ofs, clst;
 3299              		.loc 1 1523 0
 3300              		.cfi_startproc
 3301              		@ args = 0, pretend = 0, frame = 0
 3302              		@ frame_needed = 0, uses_anonymous_args = 0
 3303              	.LVL473:
 3304 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 3305              	.LCFI35:
 3306              		.cfi_def_cfa_offset 32
 3307              		.cfi_offset 3, -32
 3308              		.cfi_offset 4, -28
 3309              		.cfi_offset 5, -24
 3310              		.cfi_offset 6, -20
 3311              		.cfi_offset 7, -16
 3312              		.cfi_offset 8, -12
 3313              		.cfi_offset 9, -8
 3314              		.cfi_offset 14, -4
ARM GAS  /tmp/ccqUXb8n.s 			page 170


1525:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
 3315              		.loc 1 1525 0
 3316 0004 0668     		ldr	r6, [r0]
 3317              	.LVL474:
1530:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) re
 3318              		.loc 1 1530 0
 3319 0006 4569     		ldr	r5, [r0, #20]
 3320              	.LVL475:
1531:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3321              		.loc 1 1531 0
 3322 0008 C369     		ldr	r3, [r0, #28]
 3323 000a 002B     		cmp	r3, #0
 3324 000c 6ED0     		beq	.L330
 3325 000e 2035     		adds	r5, r5, #32
 3326              	.LVL476:
1531:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3327              		.loc 1 1531 0 is_stmt 0 discriminator 2
 3328 0010 B5F5001F 		cmp	r5, #2097152
 3329 0014 6CD2     		bcs	.L331
 3330 0016 8846     		mov	r8, r1
 3331 0018 0446     		mov	r4, r0
1533:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->sect++;				/* Next sector */
 3332              		.loc 1 1533 0 is_stmt 1
 3333 001a C5F30807 		ubfx	r7, r5, #0, #9
 3334 001e 3FB9     		cbnz	r7, .L324
1534:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3335              		.loc 1 1534 0
 3336 0020 0133     		adds	r3, r3, #1
 3337 0022 C361     		str	r3, [r0, #28]
1536:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 3338              		.loc 1 1536 0
 3339 0024 8169     		ldr	r1, [r0, #24]
 3340              	.LVL477:
 3341 0026 79B9     		cbnz	r1, .L325
1537:Middlewares/Third_Party/FatFs/src/ff.c **** 				dp->sect = 0; return FR_NO_FILE;
 3342              		.loc 1 1537 0
 3343 0028 3389     		ldrh	r3, [r6, #8]
 3344 002a B3EB551F 		cmp	r3, r5, lsr #5
 3345 002e 07D9     		bls	.L340
 3346              	.LVL478:
 3347              	.L324:
1574:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 3348              		.loc 1 1574 0
 3349 0030 6561     		str	r5, [r4, #20]
1575:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3350              		.loc 1 1575 0
 3351 0032 06F13403 		add	r3, r6, #52
 3352 0036 3B44     		add	r3, r3, r7
 3353 0038 2362     		str	r3, [r4, #32]
1577:Middlewares/Third_Party/FatFs/src/ff.c **** }
 3354              		.loc 1 1577 0
 3355 003a 0020     		movs	r0, #0
 3356              	.LVL479:
 3357              	.L323:
1578:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3358              		.loc 1 1578 0
 3359 003c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
ARM GAS  /tmp/ccqUXb8n.s 			page 171


 3360              	.LVL480:
 3361              	.L340:
1538:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 3362              		.loc 1 1538 0
 3363 0040 0023     		movs	r3, #0
 3364 0042 C361     		str	r3, [r0, #28]
 3365 0044 0420     		movs	r0, #4
 3366              	.LVL481:
 3367 0046 F9E7     		b	.L323
 3368              	.LVL482:
 3369              	.L325:
1542:Middlewares/Third_Party/FatFs/src/ff.c **** 				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 3370              		.loc 1 1542 0
 3371 0048 7389     		ldrh	r3, [r6, #10]
 3372 004a 013B     		subs	r3, r3, #1
 3373 004c 13EA5523 		ands	r3, r3, r5, lsr #9
 3374 0050 EED1     		bne	.L324
1543:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 3375              		.loc 1 1543 0
 3376 0052 FFF7FEFF 		bl	get_fat
 3377              	.LVL483:
 3378 0056 8146     		mov	r9, r0
 3379              	.LVL484:
1544:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 3380              		.loc 1 1544 0
 3381 0058 0128     		cmp	r0, #1
 3382 005a 4BD9     		bls	.L332
1545:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 3383              		.loc 1 1545 0
 3384 005c B0F1FF3F 		cmp	r0, #-1
 3385 0060 4AD0     		beq	.L333
1546:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
 3386              		.loc 1 1546 0
 3387 0062 B369     		ldr	r3, [r6, #24]
 3388 0064 8342     		cmp	r3, r0
 3389 0066 39D8     		bhi	.L326
1548:Middlewares/Third_Party/FatFs/src/ff.c **** 						dp->sect = 0; return FR_NO_FILE;
 3390              		.loc 1 1548 0
 3391 0068 B8F1000F 		cmp	r8, #0
 3392 006c 11D0     		beq	.L341
1551:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
 3393              		.loc 1 1551 0
 3394 006e A169     		ldr	r1, [r4, #24]
 3395 0070 2046     		mov	r0, r4
 3396              	.LVL485:
 3397 0072 FFF7FEFF 		bl	create_chain
 3398              	.LVL486:
1552:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 3399              		.loc 1 1552 0
 3400 0076 8146     		mov	r9, r0
 3401 0078 0028     		cmp	r0, #0
 3402 007a 3FD0     		beq	.L334
1553:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 3403              		.loc 1 1553 0
 3404 007c 0128     		cmp	r0, #1
 3405 007e 3FD0     		beq	.L335
1554:Middlewares/Third_Party/FatFs/src/ff.c **** 					/* Clean-up the stretched table */
ARM GAS  /tmp/ccqUXb8n.s 			page 172


 3406              		.loc 1 1554 0
 3407 0080 B0F1FF3F 		cmp	r0, #-1
 3408 0084 3ED0     		beq	.L336
1557:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 3409              		.loc 1 1557 0
 3410 0086 3046     		mov	r0, r6
 3411              	.LVL487:
 3412 0088 FFF7FEFF 		bl	sync_window
 3413              	.LVL488:
 3414 008c 28B1     		cbz	r0, .L342
 3415 008e 0120     		movs	r0, #1
 3416 0090 D4E7     		b	.L323
 3417              	.LVL489:
 3418              	.L341:
1549:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 3419              		.loc 1 1549 0
 3420 0092 0023     		movs	r3, #0
 3421 0094 E361     		str	r3, [r4, #28]
 3422 0096 0420     		movs	r0, #4
 3423              	.LVL490:
 3424 0098 D0E7     		b	.L323
 3425              	.L342:
1558:Middlewares/Third_Party/FatFs/src/ff.c **** 					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill t
 3426              		.loc 1 1558 0
 3427 009a 4FF40072 		mov	r2, #512
 3428 009e 0021     		movs	r1, #0
 3429 00a0 06F13400 		add	r0, r6, #52
 3430 00a4 FFF7FEFF 		bl	mem_set
 3431              	.LVL491:
1559:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->wflag = 1;
 3432              		.loc 1 1559 0
 3433 00a8 4946     		mov	r1, r9
 3434 00aa 3046     		mov	r0, r6
 3435 00ac FFF7FEFF 		bl	clust2sect
 3436              	.LVL492:
 3437 00b0 3063     		str	r0, [r6, #48]
 3438 00b2 4FF00008 		mov	r8, #0
 3439              	.LVL493:
 3440              	.L328:
1559:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->wflag = 1;
 3441              		.loc 1 1559 0 is_stmt 0 discriminator 1
 3442 00b6 7389     		ldrh	r3, [r6, #10]
 3443 00b8 9845     		cmp	r8, r3
 3444 00ba 0BD2     		bcs	.L343
1560:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 3445              		.loc 1 1560 0 is_stmt 1
 3446 00bc 0123     		movs	r3, #1
 3447 00be F370     		strb	r3, [r6, #3]
1561:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 3448              		.loc 1 1561 0
 3449 00c0 3046     		mov	r0, r6
 3450 00c2 FFF7FEFF 		bl	sync_window
 3451              	.LVL494:
 3452 00c6 F8B9     		cbnz	r0, .L338
1559:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->wflag = 1;
 3453              		.loc 1 1559 0 discriminator 2
 3454 00c8 08F10108 		add	r8, r8, #1
ARM GAS  /tmp/ccqUXb8n.s 			page 173


 3455              	.LVL495:
 3456 00cc 336B     		ldr	r3, [r6, #48]
 3457 00ce 0133     		adds	r3, r3, #1
 3458 00d0 3363     		str	r3, [r6, #48]
 3459 00d2 F0E7     		b	.L328
 3460              	.L343:
1563:Middlewares/Third_Party/FatFs/src/ff.c **** #else
 3461              		.loc 1 1563 0
 3462 00d4 336B     		ldr	r3, [r6, #48]
 3463 00d6 A3EB0803 		sub	r3, r3, r8
 3464 00da 3363     		str	r3, [r6, #48]
 3465              	.LVL496:
 3466              	.L326:
1569:Middlewares/Third_Party/FatFs/src/ff.c **** 				dp->sect = clust2sect(fs, clst);
 3467              		.loc 1 1569 0
 3468 00dc C4F81890 		str	r9, [r4, #24]
1570:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 3469              		.loc 1 1570 0
 3470 00e0 4946     		mov	r1, r9
 3471 00e2 3046     		mov	r0, r6
 3472 00e4 FFF7FEFF 		bl	clust2sect
 3473              	.LVL497:
 3474 00e8 E061     		str	r0, [r4, #28]
 3475 00ea A1E7     		b	.L324
 3476              	.LVL498:
 3477              	.L330:
1531:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3478              		.loc 1 1531 0
 3479 00ec 0420     		movs	r0, #4
 3480              	.LVL499:
 3481 00ee A5E7     		b	.L323
 3482              	.LVL500:
 3483              	.L331:
 3484 00f0 0420     		movs	r0, #4
 3485              	.LVL501:
 3486 00f2 A3E7     		b	.L323
 3487              	.LVL502:
 3488              	.L332:
1544:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 3489              		.loc 1 1544 0
 3490 00f4 0220     		movs	r0, #2
 3491              	.LVL503:
 3492 00f6 A1E7     		b	.L323
 3493              	.LVL504:
 3494              	.L333:
1545:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 3495              		.loc 1 1545 0
 3496 00f8 0120     		movs	r0, #1
 3497              	.LVL505:
 3498 00fa 9FE7     		b	.L323
 3499              	.LVL506:
 3500              	.L334:
1552:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 3501              		.loc 1 1552 0
 3502 00fc 0720     		movs	r0, #7
 3503              	.LVL507:
 3504 00fe 9DE7     		b	.L323
ARM GAS  /tmp/ccqUXb8n.s 			page 174


 3505              	.LVL508:
 3506              	.L335:
1553:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 3507              		.loc 1 1553 0
 3508 0100 0220     		movs	r0, #2
 3509              	.LVL509:
 3510 0102 9BE7     		b	.L323
 3511              	.LVL510:
 3512              	.L336:
1554:Middlewares/Third_Party/FatFs/src/ff.c **** 					/* Clean-up the stretched table */
 3513              		.loc 1 1554 0
 3514 0104 0120     		movs	r0, #1
 3515              	.LVL511:
 3516 0106 99E7     		b	.L323
 3517              	.LVL512:
 3518              	.L338:
1561:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 3519              		.loc 1 1561 0
 3520 0108 0120     		movs	r0, #1
 3521 010a 97E7     		b	.L323
 3522              		.cfi_endproc
 3523              	.LFE166:
 3525              		.section	.text.dir_find,"ax",%progbits
 3526              		.align	1
 3527              		.syntax unified
 3528              		.thumb
 3529              		.thumb_func
 3530              		.fpu fpv5-sp-d16
 3532              	dir_find:
 3533              	.LFB171:
2213:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 3534              		.loc 1 2213 0
 3535              		.cfi_startproc
 3536              		@ args = 0, pretend = 0, frame = 0
 3537              		@ frame_needed = 0, uses_anonymous_args = 0
 3538              	.LVL513:
 3539 0000 70B5     		push	{r4, r5, r6, lr}
 3540              	.LCFI36:
 3541              		.cfi_def_cfa_offset 16
 3542              		.cfi_offset 4, -16
 3543              		.cfi_offset 5, -12
 3544              		.cfi_offset 6, -8
 3545              		.cfi_offset 14, -4
 3546 0002 0446     		mov	r4, r0
2215:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE c;
 3547              		.loc 1 2215 0
 3548 0004 0668     		ldr	r6, [r0]
 3549              	.LVL514:
2221:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK) return res;
 3550              		.loc 1 2221 0
 3551 0006 0021     		movs	r1, #0
 3552 0008 FFF7FEFF 		bl	dir_sdi
 3553              	.LVL515:
2222:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 3554              		.loc 1 2222 0
 3555 000c 0546     		mov	r5, r0
 3556 000e 40B1     		cbz	r0, .L347
ARM GAS  /tmp/ccqUXb8n.s 			page 175


 3557              	.LVL516:
 3558              	.L345:
2281:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3559              		.loc 1 2281 0
 3560 0010 2846     		mov	r0, r5
 3561 0012 70BD     		pop	{r4, r5, r6, pc}
 3562              	.LVL517:
 3563              	.L346:
2277:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (res == FR_OK);
 3564              		.loc 1 2277 0
 3565 0014 0021     		movs	r1, #0
 3566 0016 2046     		mov	r0, r4
 3567 0018 FFF7FEFF 		bl	dir_next
 3568              	.LVL518:
2278:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3569              		.loc 1 2278 0
 3570 001c 0546     		mov	r5, r0
 3571 001e 0028     		cmp	r0, #0
 3572 0020 F6D1     		bne	.L345
 3573              	.L347:
2248:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) break;
 3574              		.loc 1 2248 0
 3575 0022 E169     		ldr	r1, [r4, #28]
 3576 0024 3046     		mov	r0, r6
 3577              	.LVL519:
 3578 0026 FFF7FEFF 		bl	move_window
 3579              	.LVL520:
2249:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = dp->dir[DIR_Name];
 3580              		.loc 1 2249 0
 3581 002a 0546     		mov	r5, r0
 3582 002c 0028     		cmp	r0, #0
 3583 002e EFD1     		bne	.L345
2250:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 3584              		.loc 1 2250 0
 3585 0030 206A     		ldr	r0, [r4, #32]
 3586              	.LVL521:
 3587 0032 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 3588              	.LVL522:
2251:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
 3589              		.loc 1 2251 0
 3590 0034 7BB1     		cbz	r3, .L348
2274:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry
 3591              		.loc 1 2274 0
 3592 0036 C37A     		ldrb	r3, [r0, #11]	@ zero_extendqisi2
 3593              	.LVL523:
 3594 0038 03F03F03 		and	r3, r3, #63
 3595 003c A371     		strb	r3, [r4, #6]
 3596              	.LVL524:
2275:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 3597              		.loc 1 2275 0
 3598 003e C37A     		ldrb	r3, [r0, #11]	@ zero_extendqisi2
 3599 0040 13F0080F 		tst	r3, #8
 3600 0044 E6D1     		bne	.L346
2275:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 3601              		.loc 1 2275 0 is_stmt 0 discriminator 1
 3602 0046 0B22     		movs	r2, #11
 3603 0048 04F12401 		add	r1, r4, #36
ARM GAS  /tmp/ccqUXb8n.s 			page 176


 3604 004c FFF7FEFF 		bl	mem_cmp
 3605              	.LVL525:
 3606 0050 0028     		cmp	r0, #0
 3607 0052 DFD1     		bne	.L346
 3608 0054 DCE7     		b	.L345
 3609              	.LVL526:
 3610              	.L348:
2251:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
 3611              		.loc 1 2251 0 is_stmt 1
 3612 0056 0425     		movs	r5, #4
 3613 0058 DAE7     		b	.L345
 3614              		.cfi_endproc
 3615              	.LFE171:
 3617              		.section	.text.follow_path,"ax",%progbits
 3618              		.align	1
 3619              		.syntax unified
 3620              		.thumb
 3621              		.thumb_func
 3622              		.fpu fpv5-sp-d16
 3624              	follow_path:
 3625              	.LFB176:
2817:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 3626              		.loc 1 2817 0
 3627              		.cfi_startproc
 3628              		@ args = 0, pretend = 0, frame = 8
 3629              		@ frame_needed = 0, uses_anonymous_args = 0
 3630              	.LVL527:
 3631 0000 30B5     		push	{r4, r5, lr}
 3632              	.LCFI37:
 3633              		.cfi_def_cfa_offset 12
 3634              		.cfi_offset 4, -12
 3635              		.cfi_offset 5, -8
 3636              		.cfi_offset 14, -4
 3637 0002 83B0     		sub	sp, sp, #12
 3638              	.LCFI38:
 3639              		.cfi_def_cfa_offset 24
 3640 0004 0446     		mov	r4, r0
 3641 0006 0191     		str	r1, [sp, #4]
 3642              	.LVL528:
2821:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3643              		.loc 1 2821 0
 3644 0008 0568     		ldr	r5, [r0]
 3645              	.LVL529:
2830:Middlewares/Third_Party/FatFs/src/ff.c **** 		obj->sclust = 0;					/* Start from root directory */
 3646              		.loc 1 2830 0
 3647 000a 01E0     		b	.L351
 3648              	.L352:
2830:Middlewares/Third_Party/FatFs/src/ff.c **** 		obj->sclust = 0;					/* Start from root directory */
 3649              		.loc 1 2830 0 is_stmt 0 discriminator 2
 3650 000c 0133     		adds	r3, r3, #1
 3651 000e 0193     		str	r3, [sp, #4]
 3652              	.L351:
2830:Middlewares/Third_Party/FatFs/src/ff.c **** 		obj->sclust = 0;					/* Start from root directory */
 3653              		.loc 1 2830 0 discriminator 1
 3654 0010 019B     		ldr	r3, [sp, #4]
 3655 0012 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3656 0014 5C2A     		cmp	r2, #92
ARM GAS  /tmp/ccqUXb8n.s 			page 177


 3657 0016 18BF     		it	ne
 3658 0018 2F2A     		cmpne	r2, #47
 3659 001a F7D0     		beq	.L352
2831:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 3660              		.loc 1 2831 0 is_stmt 1
 3661 001c 0022     		movs	r2, #0
 3662 001e A260     		str	r2, [r4, #8]
2850:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->fn[NSFLAG] = NS_NONAME;
 3663              		.loc 1 2850 0
 3664 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3665 0022 1F2B     		cmp	r3, #31
 3666 0024 1ED9     		bls	.L359
 3667              	.LVL530:
 3668              	.L353:
2856:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
 3669              		.loc 1 2856 0
 3670 0026 01A9     		add	r1, sp, #4
 3671 0028 2046     		mov	r0, r4
 3672 002a FFF7FEFF 		bl	create_name
 3673              	.LVL531:
2857:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = dir_find(dp);				/* Find an object with the segment name */
 3674              		.loc 1 2857 0
 3675 002e 0346     		mov	r3, r0
 3676 0030 00BB     		cbnz	r0, .L354
2858:Middlewares/Third_Party/FatFs/src/ff.c **** 			ns = dp->fn[NSFLAG];
 3677              		.loc 1 2858 0
 3678 0032 2046     		mov	r0, r4
 3679              	.LVL532:
 3680 0034 FFF7FEFF 		bl	dir_find
 3681              	.LVL533:
2859:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) {				/* Failed to find the object */
 3682              		.loc 1 2859 0
 3683 0038 94F82F20 		ldrb	r2, [r4, #47]	@ zero_extendqisi2
 3684              	.LVL534:
2860:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_NO_FILE) {	/* Object is not found */
 3685              		.loc 1 2860 0
 3686 003c 0346     		mov	r3, r0
 3687 003e E0B9     		cbnz	r0, .L360
2872:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Get into the sub-directory */
 3688              		.loc 1 2872 0
 3689 0040 12F0040F 		tst	r2, #4
 3690 0044 16D1     		bne	.L354
2874:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_NO_PATH; break;
 3691              		.loc 1 2874 0
 3692 0046 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 3693 0048 13F0100F 		tst	r3, #16
 3694 004c 1CD0     		beq	.L357
2888:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 3695              		.loc 1 2888 0
 3696 004e 05F13401 		add	r1, r5, #52
 3697 0052 6369     		ldr	r3, [r4, #20]
 3698 0054 C3F30803 		ubfx	r3, r3, #0, #9
 3699 0058 1944     		add	r1, r1, r3
 3700 005a 2846     		mov	r0, r5
 3701              	.LVL535:
 3702 005c FFF7FEFF 		bl	ld_clust
 3703              	.LVL536:
ARM GAS  /tmp/ccqUXb8n.s 			page 178


 3704 0060 A060     		str	r0, [r4, #8]
2856:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
 3705              		.loc 1 2856 0
 3706 0062 E0E7     		b	.L353
 3707              	.LVL537:
 3708              	.L359:
2851:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = dir_sdi(dp, 0);
 3709              		.loc 1 2851 0
 3710 0064 8023     		movs	r3, #128
 3711 0066 84F82F30 		strb	r3, [r4, #47]
2852:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3712              		.loc 1 2852 0
 3713 006a 1146     		mov	r1, r2
 3714              	.LVL538:
 3715 006c 2046     		mov	r0, r4
 3716              	.LVL539:
 3717 006e FFF7FEFF 		bl	dir_sdi
 3718              	.LVL540:
 3719 0072 0346     		mov	r3, r0
 3720              	.LVL541:
 3721              	.L354:
2894:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3722              		.loc 1 2894 0
 3723 0074 1846     		mov	r0, r3
 3724 0076 03B0     		add	sp, sp, #12
 3725              	.LCFI39:
 3726              		.cfi_remember_state
 3727              		.cfi_def_cfa_offset 12
 3728              		@ sp needed
 3729 0078 30BD     		pop	{r4, r5, pc}
 3730              	.LVL542:
 3731              	.L360:
 3732              	.LCFI40:
 3733              		.cfi_restore_state
2861:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 3734              		.loc 1 2861 0
 3735 007a 0428     		cmp	r0, #4
 3736 007c FAD1     		bne	.L354
2867:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 3737              		.loc 1 2867 0
 3738 007e 12F0040F 		tst	r2, #4
 3739 0082 F7D1     		bne	.L354
 3740 0084 0523     		movs	r3, #5
 3741 0086 F5E7     		b	.L354
 3742              	.L357:
2875:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 3743              		.loc 1 2875 0
 3744 0088 0523     		movs	r3, #5
 3745 008a F3E7     		b	.L354
 3746              		.cfi_endproc
 3747              	.LFE176:
 3749              		.section	.text.dir_alloc,"ax",%progbits
 3750              		.align	1
 3751              		.syntax unified
 3752              		.thumb
 3753              		.thumb_func
 3754              		.fpu fpv5-sp-d16
ARM GAS  /tmp/ccqUXb8n.s 			page 179


 3756              	dir_alloc:
 3757              	.LFB167:
1593:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 3758              		.loc 1 1593 0
 3759              		.cfi_startproc
 3760              		@ args = 0, pretend = 0, frame = 0
 3761              		@ frame_needed = 0, uses_anonymous_args = 0
 3762              	.LVL543:
 3763 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3764              	.LCFI41:
 3765              		.cfi_def_cfa_offset 24
 3766              		.cfi_offset 3, -24
 3767              		.cfi_offset 4, -20
 3768              		.cfi_offset 5, -16
 3769              		.cfi_offset 6, -12
 3770              		.cfi_offset 7, -8
 3771              		.cfi_offset 14, -4
 3772 0002 0446     		mov	r4, r0
 3773 0004 0F46     		mov	r7, r1
1596:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3774              		.loc 1 1596 0
 3775 0006 0668     		ldr	r6, [r0]
 3776              	.LVL544:
1599:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 3777              		.loc 1 1599 0
 3778 0008 0021     		movs	r1, #0
 3779              	.LVL545:
 3780 000a FFF7FEFF 		bl	dir_sdi
 3781              	.LVL546:
1600:Middlewares/Third_Party/FatFs/src/ff.c **** 		n = 0;
 3782              		.loc 1 1600 0
 3783 000e 0246     		mov	r2, r0
 3784 0010 B8B9     		cbnz	r0, .L362
1601:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
 3785              		.loc 1 1601 0
 3786 0012 0025     		movs	r5, #0
 3787 0014 06E0     		b	.L364
 3788              	.LVL547:
 3789              	.L366:
1612:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 3790              		.loc 1 1612 0
 3791 0016 0025     		movs	r5, #0
 3792              	.LVL548:
 3793              	.L363:
1614:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 3794              		.loc 1 1614 0
 3795 0018 0121     		movs	r1, #1
 3796 001a 2046     		mov	r0, r4
 3797              	.LVL549:
 3798 001c FFF7FEFF 		bl	dir_next
 3799              	.LVL550:
1615:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 3800              		.loc 1 1615 0
 3801 0020 0246     		mov	r2, r0
 3802 0022 70B9     		cbnz	r0, .L362
 3803              	.LVL551:
 3804              	.L364:
ARM GAS  /tmp/ccqUXb8n.s 			page 180


1603:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
 3805              		.loc 1 1603 0
 3806 0024 E169     		ldr	r1, [r4, #28]
 3807 0026 3046     		mov	r0, r6
 3808              	.LVL552:
 3809 0028 FFF7FEFF 		bl	move_window
 3810              	.LVL553:
1604:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 3811              		.loc 1 1604 0
 3812 002c 0246     		mov	r2, r0
 3813 002e 40B9     		cbnz	r0, .L362
1608:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 3814              		.loc 1 1608 0
 3815 0030 236A     		ldr	r3, [r4, #32]
 3816 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3817 0034 002B     		cmp	r3, #0
 3818 0036 18BF     		it	ne
 3819 0038 E52B     		cmpne	r3, #229
 3820 003a ECD1     		bne	.L366
1610:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
 3821              		.loc 1 1610 0
 3822 003c 0135     		adds	r5, r5, #1
 3823              	.LVL554:
 3824 003e BD42     		cmp	r5, r7
 3825 0040 EAD1     		bne	.L363
 3826              	.LVL555:
 3827              	.L362:
1618:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
 3828              		.loc 1 1618 0
 3829 0042 042A     		cmp	r2, #4
 3830 0044 01D0     		beq	.L369
 3831              	.LVL556:
 3832              	.L365:
1620:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3833              		.loc 1 1620 0
 3834 0046 1046     		mov	r0, r2
 3835 0048 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3836              	.LVL557:
 3837              	.L369:
1618:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
 3838              		.loc 1 1618 0
 3839 004a 0722     		movs	r2, #7
 3840              	.LVL558:
 3841 004c FBE7     		b	.L365
 3842              		.cfi_endproc
 3843              	.LFE167:
 3845              		.section	.text.dir_register,"ax",%progbits
 3846              		.align	1
 3847              		.syntax unified
 3848              		.thumb
 3849              		.thumb_func
 3850              		.fpu fpv5-sp-d16
 3852              	dir_register:
 3853              	.LFB172:
2295:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 3854              		.loc 1 2295 0
 3855              		.cfi_startproc
ARM GAS  /tmp/ccqUXb8n.s 			page 181


 3856              		@ args = 0, pretend = 0, frame = 0
 3857              		@ frame_needed = 0, uses_anonymous_args = 0
 3858              	.LVL559:
 3859 0000 70B5     		push	{r4, r5, r6, lr}
 3860              	.LCFI42:
 3861              		.cfi_def_cfa_offset 16
 3862              		.cfi_offset 4, -16
 3863              		.cfi_offset 5, -12
 3864              		.cfi_offset 6, -8
 3865              		.cfi_offset 14, -4
 3866 0002 0446     		mov	r4, r0
2297:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
 3867              		.loc 1 2297 0
 3868 0004 0668     		ldr	r6, [r0]
 3869              	.LVL560:
2366:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3870              		.loc 1 2366 0
 3871 0006 0121     		movs	r1, #1
 3872 0008 FFF7FEFF 		bl	dir_alloc
 3873              	.LVL561:
2371:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = move_window(fs, dp->sect);
 3874              		.loc 1 2371 0
 3875 000c 0546     		mov	r5, r0
 3876 000e 08B1     		cbz	r0, .L373
 3877              	.LVL562:
 3878              	.L371:
2384:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3879              		.loc 1 2384 0
 3880 0010 2846     		mov	r0, r5
 3881 0012 70BD     		pop	{r4, r5, r6, pc}
 3882              	.LVL563:
 3883              	.L373:
2372:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
 3884              		.loc 1 2372 0
 3885 0014 E169     		ldr	r1, [r4, #28]
 3886 0016 3046     		mov	r0, r6
 3887              	.LVL564:
 3888 0018 FFF7FEFF 		bl	move_window
 3889              	.LVL565:
2373:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 3890              		.loc 1 2373 0
 3891 001c 0546     		mov	r5, r0
 3892 001e 0028     		cmp	r0, #0
 3893 0020 F6D1     		bne	.L371
2374:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 3894              		.loc 1 2374 0
 3895 0022 2022     		movs	r2, #32
 3896 0024 0021     		movs	r1, #0
 3897 0026 206A     		ldr	r0, [r4, #32]
 3898              	.LVL566:
 3899 0028 FFF7FEFF 		bl	mem_set
 3900              	.LVL567:
2375:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0
 3901              		.loc 1 2375 0
 3902 002c 0B22     		movs	r2, #11
 3903 002e 04F12401 		add	r1, r4, #36
 3904 0032 206A     		ldr	r0, [r4, #32]
ARM GAS  /tmp/ccqUXb8n.s 			page 182


 3905 0034 FFF7FEFF 		bl	mem_cpy
 3906              	.LVL568:
2379:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 3907              		.loc 1 2379 0
 3908 0038 0123     		movs	r3, #1
 3909 003a F370     		strb	r3, [r6, #3]
 3910 003c E8E7     		b	.L371
 3911              		.cfi_endproc
 3912              	.LFE172:
 3914              		.section	.text.dir_read,"ax",%progbits
 3915              		.align	1
 3916              		.syntax unified
 3917              		.thumb
 3918              		.thumb_func
 3919              		.fpu fpv5-sp-d16
 3921              	dir_read:
 3922              	.LFB170:
2135:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res = FR_NO_FILE;
 3923              		.loc 1 2135 0
 3924              		.cfi_startproc
 3925              		@ args = 0, pretend = 0, frame = 0
 3926              		@ frame_needed = 0, uses_anonymous_args = 0
 3927              	.LVL569:
 3928 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3929              	.LCFI43:
 3930              		.cfi_def_cfa_offset 24
 3931              		.cfi_offset 3, -24
 3932              		.cfi_offset 4, -20
 3933              		.cfi_offset 5, -16
 3934              		.cfi_offset 6, -12
 3935              		.cfi_offset 7, -8
 3936              		.cfi_offset 14, -4
 3937 0002 0446     		mov	r4, r0
 3938 0004 0E46     		mov	r6, r1
 3939              	.LVL570:
2137:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE a, c;
 3940              		.loc 1 2137 0
 3941 0006 0568     		ldr	r5, [r0]
 3942              	.LVL571:
2136:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs = dp->obj.fs;
 3943              		.loc 1 2136 0
 3944 0008 0427     		movs	r7, #4
2143:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = move_window(fs, dp->sect);
 3945              		.loc 1 2143 0
 3946 000a 05E0     		b	.L375
 3947              	.LVL572:
 3948              	.L377:
2193:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) break;
 3949              		.loc 1 2193 0
 3950 000c 0021     		movs	r1, #0
 3951 000e 2046     		mov	r0, r4
 3952              	.LVL573:
 3953 0010 FFF7FEFF 		bl	dir_next
 3954              	.LVL574:
2194:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 3955              		.loc 1 2194 0
 3956 0014 0746     		mov	r7, r0
ARM GAS  /tmp/ccqUXb8n.s 			page 183


 3957 0016 E8B9     		cbnz	r0, .L376
 3958              	.LVL575:
 3959              	.L375:
2143:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = move_window(fs, dp->sect);
 3960              		.loc 1 2143 0
 3961 0018 E169     		ldr	r1, [r4, #28]
 3962 001a D9B1     		cbz	r1, .L376
2144:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) break;
 3963              		.loc 1 2144 0
 3964 001c 2846     		mov	r0, r5
 3965 001e FFF7FEFF 		bl	move_window
 3966              	.LVL576:
2145:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = dp->dir[DIR_Name];	/* Test for the entry type */
 3967              		.loc 1 2145 0
 3968 0022 0746     		mov	r7, r0
 3969 0024 B0B9     		cbnz	r0, .L376
2146:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == 0) {
 3970              		.loc 1 2146 0
 3971 0026 236A     		ldr	r3, [r4, #32]
 3972 0028 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3973              	.LVL577:
2147:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = FR_NO_FILE; break; /* Reached to end of the directory */
 3974              		.loc 1 2147 0
 3975 002a 92B1     		cbz	r2, .L380
2167:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
 3976              		.loc 1 2167 0
 3977 002c DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 3978 002e 03F03F03 		and	r3, r3, #63
 3979              	.LVL578:
 3980 0032 A371     		strb	r3, [r4, #6]
2188:Middlewares/Third_Party/FatFs/src/ff.c **** 				break;
 3981              		.loc 1 2188 0
 3982 0034 E52A     		cmp	r2, #229
 3983 0036 18BF     		it	ne
 3984 0038 2E2A     		cmpne	r2, #46
 3985 003a E7D0     		beq	.L377
2188:Middlewares/Third_Party/FatFs/src/ff.c **** 				break;
 3986              		.loc 1 2188 0 is_stmt 0 discriminator 1
 3987 003c 0F2B     		cmp	r3, #15
 3988 003e E5D0     		beq	.L377
2188:Middlewares/Third_Party/FatFs/src/ff.c **** 				break;
 3989              		.loc 1 2188 0 discriminator 2
 3990 0040 23F02003 		bic	r3, r3, #32
 3991              	.LVL579:
 3992 0044 082B     		cmp	r3, #8
 3993 0046 14BF     		ite	ne
 3994 0048 0023     		movne	r3, #0
 3995 004a 0123     		moveq	r3, #1
 3996 004c B342     		cmp	r3, r6
 3997 004e DDD1     		bne	.L377
 3998 0050 00E0     		b	.L376
 3999              	.LVL580:
 4000              	.L380:
2148:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 4001              		.loc 1 2148 0 is_stmt 1
 4002 0052 0427     		movs	r7, #4
 4003              	.LVL581:
ARM GAS  /tmp/ccqUXb8n.s 			page 184


 4004              	.L376:
2197:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
 4005              		.loc 1 2197 0
 4006 0054 0FB1     		cbz	r7, .L379
2197:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
 4007              		.loc 1 2197 0 is_stmt 0 discriminator 1
 4008 0056 0023     		movs	r3, #0
 4009 0058 E361     		str	r3, [r4, #28]
 4010              	.L379:
2199:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4011              		.loc 1 2199 0 is_stmt 1
 4012 005a 3846     		mov	r0, r7
 4013 005c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4014              		.cfi_endproc
 4015              	.LFE170:
 4017              		.section	.text.unlock_fs,"ax",%progbits
 4018              		.align	1
 4019              		.syntax unified
 4020              		.thumb
 4021              		.thumb_func
 4022              		.fpu fpv5-sp-d16
 4024              	unlock_fs:
 4025              	.LFB150:
 755:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 4026              		.loc 1 755 0
 4027              		.cfi_startproc
 4028              		@ args = 0, pretend = 0, frame = 0
 4029              		@ frame_needed = 0, uses_anonymous_args = 0
 4030              	.LVL582:
 4031 0000 08B5     		push	{r3, lr}
 4032              	.LCFI44:
 4033              		.cfi_def_cfa_offset 8
 4034              		.cfi_offset 3, -8
 4035              		.cfi_offset 14, -4
 756:Middlewares/Third_Party/FatFs/src/ff.c **** 		ff_rel_grant(fs->sobj);
 4036              		.loc 1 756 0
 4037 0002 0246     		mov	r2, r0
 4038 0004 B1F10C03 		subs	r3, r1, #12
 4039 0008 18BF     		it	ne
 4040 000a 0123     		movne	r3, #1
 4041 000c 0028     		cmp	r0, #0
 4042 000e 14BF     		ite	ne
 4043 0010 1846     		movne	r0, r3
 4044 0012 0020     		moveq	r0, #0
 4045              	.LVL583:
 4046 0014 48B1     		cbz	r0, .L382
 756:Middlewares/Third_Party/FatFs/src/ff.c **** 		ff_rel_grant(fs->sobj);
 4047              		.loc 1 756 0 is_stmt 0 discriminator 1
 4048 0016 B1F10F03 		subs	r3, r1, #15
 4049 001a 18BF     		it	ne
 4050 001c 0123     		movne	r3, #1
 4051 001e 0B29     		cmp	r1, #11
 4052 0020 03D0     		beq	.L382
 4053 0022 13B1     		cbz	r3, .L382
 757:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 4054              		.loc 1 757 0 is_stmt 1
 4055 0024 D068     		ldr	r0, [r2, #12]
ARM GAS  /tmp/ccqUXb8n.s 			page 185


 4056 0026 FFF7FEFF 		bl	ff_rel_grant
 4057              	.LVL584:
 4058              	.L382:
 759:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4059              		.loc 1 759 0
 4060 002a 08BD     		pop	{r3, pc}
 4061              		.cfi_endproc
 4062              	.LFE150:
 4064              		.section	.text.sync_fs,"ax",%progbits
 4065              		.align	1
 4066              		.syntax unified
 4067              		.thumb
 4068              		.thumb_func
 4069              		.fpu fpv5-sp-d16
 4071              	sync_fs:
 4072              	.LFB158:
 947:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 4073              		.loc 1 947 0
 4074              		.cfi_startproc
 4075              		@ args = 0, pretend = 0, frame = 0
 4076              		@ frame_needed = 0, uses_anonymous_args = 0
 4077              	.LVL585:
 4078 0000 70B5     		push	{r4, r5, r6, lr}
 4079              	.LCFI45:
 4080              		.cfi_def_cfa_offset 16
 4081              		.cfi_offset 4, -16
 4082              		.cfi_offset 5, -12
 4083              		.cfi_offset 6, -8
 4084              		.cfi_offset 14, -4
 4085 0002 0446     		mov	r4, r0
 951:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 4086              		.loc 1 951 0
 4087 0004 FFF7FEFF 		bl	sync_window
 4088              	.LVL586:
 952:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Update FSInfo sector if needed */
 4089              		.loc 1 952 0
 4090 0008 0546     		mov	r5, r0
 4091 000a 48B9     		cbnz	r0, .L386
 954:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Create FSInfo structure */
 4092              		.loc 1 954 0
 4093 000c 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 4094 000e 032B     		cmp	r3, #3
 4095 0010 08D0     		beq	.L390
 4096              	.LVL587:
 4097              	.L387:
 968:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 4098              		.loc 1 968 0
 4099 0012 0022     		movs	r2, #0
 4100 0014 1146     		mov	r1, r2
 4101 0016 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 4102 0018 FFF7FEFF 		bl	disk_ioctl
 4103              	.LVL588:
 4104 001c 00B1     		cbz	r0, .L386
 4105 001e 0125     		movs	r5, #1
 4106              	.L386:
 4107              	.LVL589:
 972:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  /tmp/ccqUXb8n.s 			page 186


 4108              		.loc 1 972 0
 4109 0020 2846     		mov	r0, r5
 4110 0022 70BD     		pop	{r4, r5, r6, pc}
 4111              	.LVL590:
 4112              	.L390:
 954:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Create FSInfo structure */
 4113              		.loc 1 954 0 discriminator 1
 4114 0024 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 4115 0026 012B     		cmp	r3, #1
 4116 0028 F3D1     		bne	.L387
 956:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(fs->win + BS_55AA, 0xAA55);
 4117              		.loc 1 956 0
 4118 002a 04F13406 		add	r6, r4, #52
 4119 002e 4FF40072 		mov	r2, #512
 4120 0032 0021     		movs	r1, #0
 4121 0034 3046     		mov	r0, r6
 4122              	.LVL591:
 4123 0036 FFF7FEFF 		bl	mem_set
 4124              	.LVL592:
 957:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 4125              		.loc 1 957 0
 4126 003a 4AF65521 		movw	r1, #43605
 4127 003e 04F23220 		addw	r0, r4, #562
 4128 0042 FFF7FEFF 		bl	st_word
 4129              	.LVL593:
 958:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 4130              		.loc 1 958 0
 4131 0046 0F49     		ldr	r1, .L391
 4132 0048 3046     		mov	r0, r6
 4133 004a FFF7FEFF 		bl	st_dword
 4134              	.LVL594:
 959:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 4135              		.loc 1 959 0
 4136 004e 0E49     		ldr	r1, .L391+4
 4137 0050 04F50670 		add	r0, r4, #536
 4138 0054 FFF7FEFF 		bl	st_dword
 4139              	.LVL595:
 960:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 4140              		.loc 1 960 0
 4141 0058 6169     		ldr	r1, [r4, #20]
 4142 005a 04F50770 		add	r0, r4, #540
 4143 005e FFF7FEFF 		bl	st_dword
 4144              	.LVL596:
 961:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Write it into the FSInfo sector */
 4145              		.loc 1 961 0
 4146 0062 2169     		ldr	r1, [r4, #16]
 4147 0064 04F50870 		add	r0, r4, #544
 4148 0068 FFF7FEFF 		bl	st_dword
 4149              	.LVL597:
 963:Middlewares/Third_Party/FatFs/src/ff.c **** 			disk_write(fs->drv, fs->win, fs->winsect, 1);
 4150              		.loc 1 963 0
 4151 006c 226A     		ldr	r2, [r4, #32]
 4152 006e 0132     		adds	r2, r2, #1
 4153 0070 2263     		str	r2, [r4, #48]
 964:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->fsi_flag = 0;
 4154              		.loc 1 964 0
 4155 0072 0123     		movs	r3, #1
ARM GAS  /tmp/ccqUXb8n.s 			page 187


 4156 0074 3146     		mov	r1, r6
 4157 0076 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 4158 0078 FFF7FEFF 		bl	disk_write
 4159              	.LVL598:
 965:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 4160              		.loc 1 965 0
 4161 007c 0023     		movs	r3, #0
 4162 007e 2371     		strb	r3, [r4, #4]
 4163 0080 C7E7     		b	.L387
 4164              	.L392:
 4165 0082 00BF     		.align	2
 4166              	.L391:
 4167 0084 52526141 		.word	1096897106
 4168 0088 72724161 		.word	1631679090
 4169              		.cfi_endproc
 4170              	.LFE158:
 4172              		.section	.text.f_mount,"ax",%progbits
 4173              		.align	1
 4174              		.global	f_mount
 4175              		.syntax unified
 4176              		.thumb
 4177              		.thumb_func
 4178              		.fpu fpv5-sp-d16
 4180              	f_mount:
 4181              	.LFB181:
3254:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *cfs;
 4182              		.loc 1 3254 0
 4183              		.cfi_startproc
 4184              		@ args = 0, pretend = 0, frame = 16
 4185              		@ frame_needed = 0, uses_anonymous_args = 0
 4186              	.LVL599:
 4187 0000 70B5     		push	{r4, r5, r6, lr}
 4188              	.LCFI46:
 4189              		.cfi_def_cfa_offset 16
 4190              		.cfi_offset 4, -16
 4191              		.cfi_offset 5, -12
 4192              		.cfi_offset 6, -8
 4193              		.cfi_offset 14, -4
 4194 0002 84B0     		sub	sp, sp, #16
 4195              	.LCFI47:
 4196              		.cfi_def_cfa_offset 32
 4197 0004 0190     		str	r0, [sp, #4]
 4198 0006 0091     		str	r1, [sp]
 4199 0008 1446     		mov	r4, r2
3258:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4200              		.loc 1 3258 0
 4201 000a 04A8     		add	r0, sp, #16
 4202              	.LVL600:
 4203 000c 40F8041D 		str	r1, [r0, #-4]!
3262:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 4204              		.loc 1 3262 0
 4205 0010 FFF7FEFF 		bl	get_ldnumber
 4206              	.LVL601:
3263:Middlewares/Third_Party/FatFs/src/ff.c **** 	cfs = FatFs[vol];					/* Pointer to fs object */
 4207              		.loc 1 3263 0
 4208 0014 061E     		subs	r6, r0, #0
 4209 0016 31DB     		blt	.L397
ARM GAS  /tmp/ccqUXb8n.s 			page 188


3264:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4210              		.loc 1 3264 0
 4211 0018 1B4B     		ldr	r3, .L403
 4212 001a 53F82650 		ldr	r5, [r3, r6, lsl #2]
 4213              	.LVL602:
3266:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
 4214              		.loc 1 3266 0
 4215 001e 45B1     		cbz	r5, .L395
3268:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 4216              		.loc 1 3268 0
 4217 0020 2846     		mov	r0, r5
 4218              	.LVL603:
 4219 0022 FFF7FEFF 		bl	clear_lock
 4220              	.LVL604:
3271:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 4221              		.loc 1 3271 0
 4222 0026 E868     		ldr	r0, [r5, #12]
 4223 0028 FFF7FEFF 		bl	ff_del_syncobj
 4224              	.LVL605:
 4225 002c 40B3     		cbz	r0, .L398
3273:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 4226              		.loc 1 3273 0
 4227 002e 0023     		movs	r3, #0
 4228 0030 2B70     		strb	r3, [r5]
 4229              	.L395:
3276:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->fs_type = 0;				/* Clear new fs object */
 4230              		.loc 1 3276 0
 4231 0032 019B     		ldr	r3, [sp, #4]
 4232 0034 3BB1     		cbz	r3, .L396
3277:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_REENTRANT						/* Create sync object for the new volume */
 4233              		.loc 1 3277 0
 4234 0036 0022     		movs	r2, #0
 4235 0038 1A70     		strb	r2, [r3]
3279:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 4236              		.loc 1 3279 0
 4237 003a 0199     		ldr	r1, [sp, #4]
 4238 003c 0C31     		adds	r1, r1, #12
 4239 003e F0B2     		uxtb	r0, r6
 4240 0040 FFF7FEFF 		bl	ff_cre_syncobj
 4241              	.LVL606:
 4242 0044 F0B1     		cbz	r0, .L399
 4243              	.L396:
3282:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4244              		.loc 1 3282 0
 4245 0046 019B     		ldr	r3, [sp, #4]
 4246 0048 0F4A     		ldr	r2, .L403
 4247 004a 42F82630 		str	r3, [r2, r6, lsl #2]
3284:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4248              		.loc 1 3284 0
 4249 004e 14F1FF34 		adds	r4, r4, #-1
 4250 0052 18BF     		it	ne
 4251 0054 0124     		movne	r4, #1
 4252 0056 002B     		cmp	r3, #0
 4253 0058 08BF     		it	eq
 4254 005a 0124     		moveq	r4, #1
 4255 005c 1CB1     		cbz	r4, .L402
 4256 005e 0024     		movs	r4, #0
ARM GAS  /tmp/ccqUXb8n.s 			page 189


 4257              	.LVL607:
 4258              	.L394:
3288:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4259              		.loc 1 3288 0
 4260 0060 2046     		mov	r0, r4
 4261 0062 04B0     		add	sp, sp, #16
 4262              	.LCFI48:
 4263              		.cfi_remember_state
 4264              		.cfi_def_cfa_offset 16
 4265              		@ sp needed
 4266 0064 70BD     		pop	{r4, r5, r6, pc}
 4267              	.LVL608:
 4268              	.L402:
 4269              	.LCFI49:
 4270              		.cfi_restore_state
3286:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
 4271              		.loc 1 3286 0
 4272 0066 0022     		movs	r2, #0
 4273 0068 01A9     		add	r1, sp, #4
 4274 006a 6846     		mov	r0, sp
 4275 006c FFF7FEFF 		bl	find_volume
 4276              	.LVL609:
 4277 0070 0446     		mov	r4, r0
 4278              	.LVL610:
3287:Middlewares/Third_Party/FatFs/src/ff.c **** }
 4279              		.loc 1 3287 0
 4280 0072 0146     		mov	r1, r0
 4281 0074 0198     		ldr	r0, [sp, #4]
 4282              	.LVL611:
 4283 0076 FFF7FEFF 		bl	unlock_fs
 4284              	.LVL612:
 4285 007a F1E7     		b	.L394
 4286              	.LVL613:
 4287              	.L397:
3263:Middlewares/Third_Party/FatFs/src/ff.c **** 	cfs = FatFs[vol];					/* Pointer to fs object */
 4288              		.loc 1 3263 0
 4289 007c 0B24     		movs	r4, #11
 4290 007e EFE7     		b	.L394
 4291              	.LVL614:
 4292              	.L398:
3271:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 4293              		.loc 1 3271 0
 4294 0080 0224     		movs	r4, #2
 4295 0082 EDE7     		b	.L394
 4296              	.L399:
3279:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 4297              		.loc 1 3279 0
 4298 0084 0224     		movs	r4, #2
 4299 0086 EBE7     		b	.L394
 4300              	.L404:
 4301              		.align	2
 4302              	.L403:
 4303 0088 00000000 		.word	.LANCHOR2
 4304              		.cfi_endproc
 4305              	.LFE181:
 4307              		.section	.text.f_open,"ax",%progbits
 4308              		.align	1
ARM GAS  /tmp/ccqUXb8n.s 			page 190


 4309              		.global	f_open
 4310              		.syntax unified
 4311              		.thumb
 4312              		.thumb_func
 4313              		.fpu fpv5-sp-d16
 4315              	f_open:
 4316              	.LFB182:
3302:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 4317              		.loc 1 3302 0
 4318              		.cfi_startproc
 4319              		@ args = 0, pretend = 0, frame = 64
 4320              		@ frame_needed = 0, uses_anonymous_args = 0
 4321              	.LVL615:
 4322 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 4323              	.LCFI50:
 4324              		.cfi_def_cfa_offset 28
 4325              		.cfi_offset 4, -28
 4326              		.cfi_offset 5, -24
 4327              		.cfi_offset 6, -20
 4328              		.cfi_offset 7, -16
 4329              		.cfi_offset 8, -12
 4330              		.cfi_offset 9, -8
 4331              		.cfi_offset 14, -4
 4332 0004 91B0     		sub	sp, sp, #68
 4333              	.LCFI51:
 4334              		.cfi_def_cfa_offset 96
 4335 0006 0191     		str	r1, [sp, #4]
3313:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4336              		.loc 1 3313 0
 4337 0008 0028     		cmp	r0, #0
 4338 000a 00F01981 		beq	.L422
 4339 000e 0546     		mov	r5, r0
 4340 0010 1646     		mov	r6, r2
3316:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&path, &fs, mode);
 4341              		.loc 1 3316 0
 4342 0012 02F03F07 		and	r7, r2, #63
 4343              	.LVL616:
3317:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 4344              		.loc 1 3317 0
 4345 0016 3A46     		mov	r2, r7
 4346 0018 03A9     		add	r1, sp, #12
 4347              	.LVL617:
 4348 001a 01A8     		add	r0, sp, #4
 4349              	.LVL618:
 4350 001c FFF7FEFF 		bl	find_volume
 4351              	.LVL619:
3318:Middlewares/Third_Party/FatFs/src/ff.c **** 		dj.obj.fs = fs;
 4352              		.loc 1 3318 0
 4353 0020 0446     		mov	r4, r0
 4354 0022 50B1     		cbz	r0, .L435
 4355              	.LVL620:
 4356              	.L407:
3488:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4357              		.loc 1 3488 0
 4358 0024 0CB1     		cbz	r4, .L421
 4359              	.LVL621:
 4360              	.L420:
ARM GAS  /tmp/ccqUXb8n.s 			page 191


3488:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4361              		.loc 1 3488 0 is_stmt 0 discriminator 1
 4362 0026 0023     		movs	r3, #0
 4363 0028 2B60     		str	r3, [r5]
 4364              	.L421:
3490:Middlewares/Third_Party/FatFs/src/ff.c **** }
 4365              		.loc 1 3490 0 is_stmt 1
 4366 002a 2146     		mov	r1, r4
 4367 002c 0398     		ldr	r0, [sp, #12]
 4368 002e FFF7FEFF 		bl	unlock_fs
 4369              	.LVL622:
 4370              	.L406:
3491:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4371              		.loc 1 3491 0
 4372 0032 2046     		mov	r0, r4
 4373 0034 11B0     		add	sp, sp, #68
 4374              	.LCFI52:
 4375              		.cfi_remember_state
 4376              		.cfi_def_cfa_offset 28
 4377              		@ sp needed
 4378 0036 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 4379              	.LVL623:
 4380              	.L435:
 4381              	.LCFI53:
 4382              		.cfi_restore_state
3319:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
 4383              		.loc 1 3319 0
 4384 003a 039B     		ldr	r3, [sp, #12]
 4385 003c 0493     		str	r3, [sp, #16]
3321:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY	/* R/W configuration */
 4386              		.loc 1 3321 0
 4387 003e 0199     		ldr	r1, [sp, #4]
 4388 0040 04A8     		add	r0, sp, #16
 4389              	.LVL624:
 4390 0042 FFF7FEFF 		bl	follow_path
 4391              	.LVL625:
3323:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 4392              		.loc 1 3323 0
 4393 0046 0446     		mov	r4, r0
 4394 0048 60B9     		cbnz	r0, .L408
3324:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_INVALID_NAME;
 4395              		.loc 1 3324 0
 4396 004a 9DF93F30 		ldrsb	r3, [sp, #63]
 4397 004e 002B     		cmp	r3, #0
 4398 0050 51DB     		blt	.L423
3329:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 4399              		.loc 1 3329 0
 4400 0052 37F00103 		bics	r3, r7, #1
 4401 0056 14BF     		ite	ne
 4402 0058 0121     		movne	r1, #1
 4403 005a 0021     		moveq	r1, #0
 4404 005c 04A8     		add	r0, sp, #16
 4405              	.LVL626:
 4406 005e FFF7FEFF 		bl	chk_lock
 4407              	.LVL627:
 4408 0062 0446     		mov	r4, r0
 4409              	.LVL628:
ARM GAS  /tmp/ccqUXb8n.s 			page 192


 4410              	.L408:
3334:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) {					/* No file, create new */
 4411              		.loc 1 3334 0
 4412 0064 16F01C0F 		tst	r6, #28
 4413 0068 5BD0     		beq	.L409
3335:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 4414              		.loc 1 3335 0
 4415 006a 002C     		cmp	r4, #0
 4416 006c 4FD0     		beq	.L410
3336:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
 4417              		.loc 1 3336 0
 4418 006e 042C     		cmp	r4, #4
 4419 0070 43D0     		beq	.L436
 4420              	.LVL629:
 4421              	.L411:
3343:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 4422              		.loc 1 3343 0
 4423 0072 47F00807 		orr	r7, r7, #8
 4424              	.LVL630:
 4425              	.L412:
3352:Middlewares/Third_Party/FatFs/src/ff.c **** 				dw = GET_FATTIME();
 4426              		.loc 1 3352 0
 4427 0076 002C     		cmp	r4, #0
 4428 0078 62D1     		bne	.L413
3352:Middlewares/Third_Party/FatFs/src/ff.c **** 				dw = GET_FATTIME();
 4429              		.loc 1 3352 0 is_stmt 0 discriminator 1
 4430 007a 17F0080F 		tst	r7, #8
 4431 007e 5FD0     		beq	.L413
3353:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 4432              		.loc 1 3353 0 is_stmt 1
 4433 0080 FFF7FEFF 		bl	get_fattime
 4434              	.LVL631:
 4435 0084 0646     		mov	r6, r0
 4436              	.LVL632:
3381:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 4437              		.loc 1 3381 0
 4438 0086 0146     		mov	r1, r0
 4439 0088 0C98     		ldr	r0, [sp, #48]
 4440              	.LVL633:
 4441 008a 0E30     		adds	r0, r0, #14
 4442 008c FFF7FEFF 		bl	st_dword
 4443              	.LVL634:
3382:Middlewares/Third_Party/FatFs/src/ff.c **** 					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 4444              		.loc 1 3382 0
 4445 0090 3146     		mov	r1, r6
 4446 0092 0C98     		ldr	r0, [sp, #48]
 4447 0094 1630     		adds	r0, r0, #22
 4448 0096 FFF7FEFF 		bl	st_dword
 4449              	.LVL635:
3383:Middlewares/Third_Party/FatFs/src/ff.c **** 					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 4450              		.loc 1 3383 0
 4451 009a 0C9B     		ldr	r3, [sp, #48]
 4452 009c 2022     		movs	r2, #32
 4453 009e DA72     		strb	r2, [r3, #11]
3384:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 4454              		.loc 1 3384 0
 4455 00a0 039E     		ldr	r6, [sp, #12]
ARM GAS  /tmp/ccqUXb8n.s 			page 193


 4456              	.LVL636:
 4457 00a2 DDF83080 		ldr	r8, [sp, #48]
 4458 00a6 4146     		mov	r1, r8
 4459 00a8 3046     		mov	r0, r6
 4460 00aa FFF7FEFF 		bl	ld_clust
 4461              	.LVL637:
 4462 00ae 8146     		mov	r9, r0
 4463              	.LVL638:
3385:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(dj.dir + DIR_FileSize, 0);
 4464              		.loc 1 3385 0
 4465 00b0 0022     		movs	r2, #0
 4466 00b2 4146     		mov	r1, r8
 4467 00b4 3046     		mov	r0, r6
 4468              	.LVL639:
 4469 00b6 FFF7FEFF 		bl	st_clust
 4470              	.LVL640:
3386:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->wflag = 1;
 4471              		.loc 1 3386 0
 4472 00ba 0021     		movs	r1, #0
 4473 00bc 0C98     		ldr	r0, [sp, #48]
 4474 00be 1C30     		adds	r0, r0, #28
 4475 00c0 FFF7FEFF 		bl	st_dword
 4476              	.LVL641:
3387:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4477              		.loc 1 3387 0
 4478 00c4 039B     		ldr	r3, [sp, #12]
 4479 00c6 0122     		movs	r2, #1
 4480 00c8 DA70     		strb	r2, [r3, #3]
3389:Middlewares/Third_Party/FatFs/src/ff.c **** 						dw = fs->winsect;
 4481              		.loc 1 3389 0
 4482 00ca B9F1000F 		cmp	r9, #0
 4483 00ce 37D0     		beq	.L413
3390:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = remove_chain(&dj.obj, cl, 0);
 4484              		.loc 1 3390 0
 4485 00d0 039B     		ldr	r3, [sp, #12]
 4486 00d2 1E6B     		ldr	r6, [r3, #48]
 4487              	.LVL642:
3391:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (res == FR_OK) {
 4488              		.loc 1 3391 0
 4489 00d4 0022     		movs	r2, #0
 4490 00d6 4946     		mov	r1, r9
 4491 00d8 04A8     		add	r0, sp, #16
 4492 00da FFF7FEFF 		bl	remove_chain
 4493              	.LVL643:
3392:Middlewares/Third_Party/FatFs/src/ff.c **** 							res = move_window(fs, dw);
 4494              		.loc 1 3392 0
 4495 00de 0446     		mov	r4, r0
 4496 00e0 70BB     		cbnz	r0, .L413
3393:Middlewares/Third_Party/FatFs/src/ff.c **** 							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 4497              		.loc 1 3393 0
 4498 00e2 3146     		mov	r1, r6
 4499 00e4 0398     		ldr	r0, [sp, #12]
 4500              	.LVL644:
 4501 00e6 FFF7FEFF 		bl	move_window
 4502              	.LVL645:
 4503 00ea 0446     		mov	r4, r0
 4504              	.LVL646:
ARM GAS  /tmp/ccqUXb8n.s 			page 194


3394:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
 4505              		.loc 1 3394 0
 4506 00ec 09F1FF33 		add	r3, r9, #-1
 4507 00f0 039A     		ldr	r2, [sp, #12]
 4508 00f2 1361     		str	r3, [r2, #16]
 4509 00f4 24E0     		b	.L413
 4510              	.LVL647:
 4511              	.L423:
3325:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 4512              		.loc 1 3325 0
 4513 00f6 0624     		movs	r4, #6
 4514 00f8 B4E7     		b	.L408
 4515              	.LVL648:
 4516              	.L436:
3338:Middlewares/Third_Party/FatFs/src/ff.c **** #else
 4517              		.loc 1 3338 0
 4518 00fa FFF7FEFF 		bl	enq_lock
 4519              	.LVL649:
 4520 00fe 08B9     		cbnz	r0, .L437
 4521 0100 1224     		movs	r4, #18
 4522              	.LVL650:
 4523 0102 B6E7     		b	.L411
 4524              	.LVL651:
 4525              	.L437:
3338:Middlewares/Third_Party/FatFs/src/ff.c **** #else
 4526              		.loc 1 3338 0 is_stmt 0 discriminator 1
 4527 0104 04A8     		add	r0, sp, #16
 4528 0106 FFF7FEFF 		bl	dir_register
 4529              	.LVL652:
 4530 010a 0446     		mov	r4, r0
 4531              	.LVL653:
 4532 010c B1E7     		b	.L411
 4533              	.LVL654:
 4534              	.L410:
3346:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = FR_DENIED;
 4535              		.loc 1 3346 0 is_stmt 1
 4536 010e 9DF81630 		ldrb	r3, [sp, #22]	@ zero_extendqisi2
 4537 0112 13F0110F 		tst	r3, #17
 4538 0116 12D1     		bne	.L425
3349:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 4539              		.loc 1 3349 0
 4540 0118 16F0040F 		tst	r6, #4
 4541 011c ABD0     		beq	.L412
 4542 011e 0824     		movs	r4, #8
 4543              	.LVL655:
 4544 0120 0EE0     		b	.L413
 4545              	.LVL656:
 4546              	.L409:
3401:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 4547              		.loc 1 3401 0
 4548 0122 6CB9     		cbnz	r4, .L413
3402:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = FR_NO_FILE;
 4549              		.loc 1 3402 0
 4550 0124 9DF81630 		ldrb	r3, [sp, #22]	@ zero_extendqisi2
 4551 0128 13F0100F 		tst	r3, #16
 4552 012c 4ED1     		bne	.L427
3405:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = FR_DENIED;
ARM GAS  /tmp/ccqUXb8n.s 			page 195


 4553              		.loc 1 3405 0
 4554 012e 16F0020F 		tst	r6, #2
 4555 0132 05D0     		beq	.L413
3405:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = FR_DENIED;
 4556              		.loc 1 3405 0 is_stmt 0 discriminator 1
 4557 0134 13F0010F 		tst	r3, #1
 4558 0138 02D0     		beq	.L413
3406:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 4559              		.loc 1 3406 0 is_stmt 1
 4560 013a 0724     		movs	r4, #7
 4561              	.LVL657:
 4562 013c 16E0     		b	.L414
 4563              	.LVL658:
 4564              	.L425:
3347:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {
 4565              		.loc 1 3347 0
 4566 013e 0724     		movs	r4, #7
 4567              	.LVL659:
 4568              	.L413:
3411:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 4569              		.loc 1 3411 0
 4570 0140 A4B9     		cbnz	r4, .L414
3412:Middlewares/Third_Party/FatFs/src/ff.c **** 				mode |= FA_MODIFIED;
 4571              		.loc 1 3412 0
 4572 0142 17F0080F 		tst	r7, #8
 4573 0146 01D0     		beq	.L415
3413:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 4574              		.loc 1 3413 0
 4575 0148 47F04007 		orr	r7, r7, #64
 4576              	.LVL660:
 4577              	.L415:
3414:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->dir_ptr = dj.dir;
 4578              		.loc 1 3414 0
 4579 014c 039B     		ldr	r3, [sp, #12]
 4580 014e 1B6B     		ldr	r3, [r3, #48]
 4581 0150 6B62     		str	r3, [r5, #36]
3415:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
 4582              		.loc 1 3415 0
 4583 0152 0C9B     		ldr	r3, [sp, #48]
 4584 0154 AB62     		str	r3, [r5, #40]
3417:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!fp->obj.lockid) res = FR_INT_ERR;
 4585              		.loc 1 3417 0
 4586 0156 37F00103 		bics	r3, r7, #1
 4587 015a 14BF     		ite	ne
 4588 015c 0121     		movne	r1, #1
 4589 015e 0021     		moveq	r1, #0
 4590 0160 04A8     		add	r0, sp, #16
 4591 0162 FFF7FEFF 		bl	inc_lock
 4592              	.LVL661:
 4593 0166 2861     		str	r0, [r5, #16]
3418:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 4594              		.loc 1 3418 0
 4595 0168 0028     		cmp	r0, #0
 4596 016a 67D0     		beq	.L429
 4597              	.LVL662:
 4598              	.L414:
3433:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
ARM GAS  /tmp/ccqUXb8n.s 			page 196


 4599              		.loc 1 3433 0
 4600 016c 002C     		cmp	r4, #0
 4601 016e 7FF459AF 		bne	.L407
3445:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 4602              		.loc 1 3445 0
 4603 0172 039E     		ldr	r6, [sp, #12]
 4604 0174 DDF83080 		ldr	r8, [sp, #48]
 4605 0178 4146     		mov	r1, r8
 4606 017a 3046     		mov	r0, r6
 4607 017c FFF7FEFF 		bl	ld_clust
 4608              	.LVL663:
 4609 0180 A860     		str	r0, [r5, #8]
3446:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 4610              		.loc 1 3446 0
 4611 0182 08F11C00 		add	r0, r8, #28
 4612 0186 FFF7FEFF 		bl	ld_dword
 4613              	.LVL664:
 4614 018a E860     		str	r0, [r5, #12]
3449:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 4615              		.loc 1 3449 0
 4616 018c 0021     		movs	r1, #0
 4617 018e E962     		str	r1, [r5, #44]
3451:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->obj.id = fs->id;
 4618              		.loc 1 3451 0
 4619 0190 2E60     		str	r6, [r5]
3452:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->flag = mode;		/* Set file access mode */
 4620              		.loc 1 3452 0
 4621 0192 F388     		ldrh	r3, [r6, #6]
 4622 0194 AB80     		strh	r3, [r5, #4]	@ movhi
3453:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->err = 0;			/* Clear error flag */
 4623              		.loc 1 3453 0
 4624 0196 2F75     		strb	r7, [r5, #20]
3454:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->sect = 0;			/* Invalidate current data sector */
 4625              		.loc 1 3454 0
 4626 0198 6975     		strb	r1, [r5, #21]
3455:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->fptr = 0;			/* Set file pointer top of the file */
 4627              		.loc 1 3455 0
 4628 019a 2962     		str	r1, [r5, #32]
3456:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
 4629              		.loc 1 3456 0
 4630 019c A961     		str	r1, [r5, #24]
3459:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 4631              		.loc 1 3459 0
 4632 019e 05F13006 		add	r6, r5, #48
 4633 01a2 4FF40072 		mov	r2, #512
 4634 01a6 3046     		mov	r0, r6
 4635 01a8 FFF7FEFF 		bl	mem_set
 4636              	.LVL665:
3461:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 4637              		.loc 1 3461 0
 4638 01ac 17F0200F 		tst	r7, #32
 4639 01b0 3FF438AF 		beq	.L407
3461:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 4640              		.loc 1 3461 0 is_stmt 0 discriminator 1
 4641 01b4 EF68     		ldr	r7, [r5, #12]
 4642              	.LVL666:
 4643 01b6 002F     		cmp	r7, #0
ARM GAS  /tmp/ccqUXb8n.s 			page 197


 4644 01b8 3FF434AF 		beq	.L407
3462:Middlewares/Third_Party/FatFs/src/ff.c **** 				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 4645              		.loc 1 3462 0 is_stmt 1
 4646 01bc AF61     		str	r7, [r5, #24]
3463:Middlewares/Third_Party/FatFs/src/ff.c **** 				clst = fp->obj.sclust;				/* Follow the cluster chain */
 4647              		.loc 1 3463 0
 4648 01be 039B     		ldr	r3, [sp, #12]
 4649 01c0 B3F80A80 		ldrh	r8, [r3, #10]
 4650 01c4 4FEA4828 		lsl	r8, r8, #9
 4651              	.LVL667:
3464:Middlewares/Third_Party/FatFs/src/ff.c **** 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 4652              		.loc 1 3464 0
 4653 01c8 A968     		ldr	r1, [r5, #8]
 4654              	.LVL668:
3465:Middlewares/Third_Party/FatFs/src/ff.c **** 					clst = get_fat(&fp->obj, clst);
 4655              		.loc 1 3465 0
 4656 01ca 06E0     		b	.L416
 4657              	.LVL669:
 4658              	.L427:
3403:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {
 4659              		.loc 1 3403 0
 4660 01cc 0424     		movs	r4, #4
 4661              	.LVL670:
 4662 01ce CDE7     		b	.L414
 4663              	.LVL671:
 4664              	.L417:
3468:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 4665              		.loc 1 3468 0
 4666 01d0 B1F1FF3F 		cmp	r1, #-1
 4667 01d4 11D0     		beq	.L438
 4668              	.LVL672:
 4669              	.L418:
3465:Middlewares/Third_Party/FatFs/src/ff.c **** 					clst = get_fat(&fp->obj, clst);
 4670              		.loc 1 3465 0 discriminator 2
 4671 01d6 A7EB0807 		sub	r7, r7, r8
 4672              	.LVL673:
 4673              	.L416:
3465:Middlewares/Third_Party/FatFs/src/ff.c **** 					clst = get_fat(&fp->obj, clst);
 4674              		.loc 1 3465 0 is_stmt 0 discriminator 1
 4675 01da 4745     		cmp	r7, r8
 4676 01dc 94BF     		ite	ls
 4677 01de 0023     		movls	r3, #0
 4678 01e0 0123     		movhi	r3, #1
 4679 01e2 002C     		cmp	r4, #0
 4680 01e4 18BF     		it	ne
 4681 01e6 0023     		movne	r3, #0
 4682 01e8 4BB1     		cbz	r3, .L439
3466:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst <= 1) res = FR_INT_ERR;
 4683              		.loc 1 3466 0 is_stmt 1
 4684 01ea 2846     		mov	r0, r5
 4685 01ec FFF7FEFF 		bl	get_fat
 4686              	.LVL674:
 4687 01f0 0146     		mov	r1, r0
 4688              	.LVL675:
3467:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 4689              		.loc 1 3467 0
 4690 01f2 0128     		cmp	r0, #1
ARM GAS  /tmp/ccqUXb8n.s 			page 198


 4691 01f4 ECD8     		bhi	.L417
 4692 01f6 0224     		movs	r4, #2
 4693              	.LVL676:
 4694 01f8 EAE7     		b	.L417
 4695              	.LVL677:
 4696              	.L438:
3468:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 4697              		.loc 1 3468 0
 4698 01fa 0124     		movs	r4, #1
 4699              	.LVL678:
 4700 01fc EBE7     		b	.L418
 4701              	.LVL679:
 4702              	.L439:
3470:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 4703              		.loc 1 3470 0
 4704 01fe E961     		str	r1, [r5, #28]
3471:Middlewares/Third_Party/FatFs/src/ff.c **** 					if ((sc = clust2sect(fs, clst)) == 0) {
 4705              		.loc 1 3471 0
 4706 0200 002C     		cmp	r4, #0
 4707 0202 7FF40FAF 		bne	.L407
3471:Middlewares/Third_Party/FatFs/src/ff.c **** 					if ((sc = clust2sect(fs, clst)) == 0) {
 4708              		.loc 1 3471 0 is_stmt 0 discriminator 1
 4709 0206 C7F30803 		ubfx	r3, r7, #0, #9
 4710 020a 002B     		cmp	r3, #0
 4711 020c 3FF40AAF 		beq	.L407
3472:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = FR_INT_ERR;
 4712              		.loc 1 3472 0 is_stmt 1
 4713 0210 DDF80C80 		ldr	r8, [sp, #12]
 4714              	.LVL680:
 4715 0214 4046     		mov	r0, r8
 4716 0216 FFF7FEFF 		bl	clust2sect
 4717              	.LVL681:
 4718 021a 08B9     		cbnz	r0, .L440
3473:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else {
 4719              		.loc 1 3473 0
 4720 021c 0224     		movs	r4, #2
 4721              	.LVL682:
 4722 021e 02E7     		b	.L420
 4723              	.LVL683:
 4724              	.L440:
3475:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_TINY
 4725              		.loc 1 3475 0
 4726 0220 00EB5722 		add	r2, r0, r7, lsr #9
 4727 0224 2A62     		str	r2, [r5, #32]
3477:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 4728              		.loc 1 3477 0
 4729 0226 0123     		movs	r3, #1
 4730 0228 3146     		mov	r1, r6
 4731 022a 98F80100 		ldrb	r0, [r8, #1]	@ zero_extendqisi2
 4732              	.LVL684:
 4733 022e FFF7FEFF 		bl	disk_read
 4734              	.LVL685:
 4735 0232 0028     		cmp	r0, #0
 4736 0234 3FF4F6AE 		beq	.L407
 4737 0238 0124     		movs	r4, #1
 4738              	.LVL686:
 4739 023a F4E6     		b	.L420
ARM GAS  /tmp/ccqUXb8n.s 			page 199


 4740              	.LVL687:
 4741              	.L429:
3418:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 4742              		.loc 1 3418 0
 4743 023c 0224     		movs	r4, #2
 4744              	.LVL688:
 4745 023e F1E6     		b	.L407
 4746              	.LVL689:
 4747              	.L422:
3313:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4748              		.loc 1 3313 0
 4749 0240 0924     		movs	r4, #9
 4750 0242 F6E6     		b	.L406
 4751              		.cfi_endproc
 4752              	.LFE182:
 4754              		.section	.text.f_read,"ax",%progbits
 4755              		.align	1
 4756              		.global	f_read
 4757              		.syntax unified
 4758              		.thumb
 4759              		.thumb_func
 4760              		.fpu fpv5-sp-d16
 4762              	f_read:
 4763              	.LFB183:
3506:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 4764              		.loc 1 3506 0
 4765              		.cfi_startproc
 4766              		@ args = 0, pretend = 0, frame = 16
 4767              		@ frame_needed = 0, uses_anonymous_args = 0
 4768              	.LVL690:
 4769 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4770              	.LCFI54:
 4771              		.cfi_def_cfa_offset 36
 4772              		.cfi_offset 4, -36
 4773              		.cfi_offset 5, -32
 4774              		.cfi_offset 6, -28
 4775              		.cfi_offset 7, -24
 4776              		.cfi_offset 8, -20
 4777              		.cfi_offset 9, -16
 4778              		.cfi_offset 10, -12
 4779              		.cfi_offset 11, -8
 4780              		.cfi_offset 14, -4
 4781 0004 85B0     		sub	sp, sp, #20
 4782              	.LCFI55:
 4783              		.cfi_def_cfa_offset 56
 4784 0006 0446     		mov	r4, r0
 4785 0008 0F46     		mov	r7, r1
 4786 000a 1646     		mov	r6, r2
 4787 000c 9946     		mov	r9, r3
 4788              	.LVL691:
3515:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 4789              		.loc 1 3515 0
 4790 000e 0023     		movs	r3, #0
 4791              	.LVL692:
 4792 0010 C9F80030 		str	r3, [r9]
3516:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 4793              		.loc 1 3516 0
ARM GAS  /tmp/ccqUXb8n.s 			page 200


 4794 0014 0190     		str	r0, [sp, #4]
 4795 0016 03A9     		add	r1, sp, #12
 4796              	.LVL693:
 4797 0018 FFF7FEFF 		bl	validate
 4798              	.LVL694:
3517:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 4799              		.loc 1 3517 0
 4800 001c 0090     		str	r0, [sp]
 4801 001e 70B9     		cbnz	r0, .L442
3517:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 4802              		.loc 1 3517 0 is_stmt 0 discriminator 2
 4803 0020 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 4804 0022 0093     		str	r3, [sp]
 4805              	.LVL695:
 4806 0024 5BB9     		cbnz	r3, .L442
3518:Middlewares/Third_Party/FatFs/src/ff.c **** 	remain = fp->obj.objsize - fp->fptr;
 4807              		.loc 1 3518 0 is_stmt 1
 4808 0026 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 4809              	.LVL696:
 4810 0028 13F0010F 		tst	r3, #1
 4811 002c 0FD0     		beq	.L468
3519:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 4812              		.loc 1 3519 0
 4813 002e E568     		ldr	r5, [r4, #12]
 4814 0030 A369     		ldr	r3, [r4, #24]
 4815 0032 ED1A     		subs	r5, r5, r3
 4816              	.LVL697:
3520:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4817              		.loc 1 3520 0
 4818 0034 B542     		cmp	r5, r6
 4819 0036 C0F08280 		bcc	.L447
 4820 003a 3546     		mov	r5, r6
 4821              	.LVL698:
 4822 003c 7FE0     		b	.L447
 4823              	.LVL699:
 4824              	.L442:
3517:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 4825              		.loc 1 3517 0 discriminator 3
 4826 003e 0099     		ldr	r1, [sp]
 4827 0040 0398     		ldr	r0, [sp, #12]
 4828 0042 FFF7FEFF 		bl	unlock_fs
 4829              	.LVL700:
 4830              	.L444:
3590:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4831              		.loc 1 3590 0
 4832 0046 0098     		ldr	r0, [sp]
 4833 0048 05B0     		add	sp, sp, #20
 4834              	.LCFI56:
 4835              		.cfi_remember_state
 4836              		.cfi_def_cfa_offset 36
 4837              		@ sp needed
 4838 004a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4839              	.LVL701:
 4840              	.L468:
 4841              	.LCFI57:
 4842              		.cfi_restore_state
3518:Middlewares/Third_Party/FatFs/src/ff.c **** 	remain = fp->obj.objsize - fp->fptr;
ARM GAS  /tmp/ccqUXb8n.s 			page 201


 4843              		.loc 1 3518 0 discriminator 1
 4844 004e 0721     		movs	r1, #7
 4845 0050 0398     		ldr	r0, [sp, #12]
 4846 0052 FFF7FEFF 		bl	unlock_fs
 4847              	.LVL702:
 4848 0056 0723     		movs	r3, #7
 4849 0058 0093     		str	r3, [sp]
 4850              	.LVL703:
 4851 005a F4E7     		b	.L444
 4852              	.LVL704:
 4853              	.L450:
3531:Middlewares/Third_Party/FatFs/src/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 4854              		.loc 1 3531 0
 4855 005c E36A     		ldr	r3, [r4, #44]
 4856 005e 1BB1     		cbz	r3, .L452
3532:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else
 4857              		.loc 1 3532 0
 4858 0060 2046     		mov	r0, r4
 4859 0062 FFF7FEFF 		bl	clmt_clust
 4860              	.LVL705:
 4861 0066 7BE0     		b	.L451
 4862              	.LVL706:
 4863              	.L452:
3536:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 4864              		.loc 1 3536 0
 4865 0068 E169     		ldr	r1, [r4, #28]
 4866 006a 0198     		ldr	r0, [sp, #4]
 4867 006c FFF7FEFF 		bl	get_fat
 4868              	.LVL707:
 4869 0070 76E0     		b	.L451
 4870              	.L472:
3539:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 4871              		.loc 1 3539 0 discriminator 1
 4872 0072 4FF00208 		mov	r8, #2
 4873 0076 84F81580 		strb	r8, [r4, #21]
 4874 007a 4146     		mov	r1, r8
 4875 007c 0398     		ldr	r0, [sp, #12]
 4876              	.LVL708:
 4877 007e FFF7FEFF 		bl	unlock_fs
 4878              	.LVL709:
 4879 0082 CDF80080 		str	r8, [sp]
 4880              	.LVL710:
 4881 0086 DEE7     		b	.L444
 4882              	.LVL711:
 4883              	.L473:
3540:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->clust = clst;				/* Update current cluster */
 4884              		.loc 1 3540 0 discriminator 1
 4885 0088 4FF00108 		mov	r8, #1
 4886 008c 84F81580 		strb	r8, [r4, #21]
 4887 0090 4146     		mov	r1, r8
 4888 0092 0398     		ldr	r0, [sp, #12]
 4889              	.LVL712:
 4890 0094 FFF7FEFF 		bl	unlock_fs
 4891              	.LVL713:
 4892 0098 CDF80080 		str	r8, [sp]
 4893              	.LVL714:
 4894 009c D3E7     		b	.L444
ARM GAS  /tmp/ccqUXb8n.s 			page 202


 4895              	.LVL715:
 4896              	.L474:
3544:Middlewares/Third_Party/FatFs/src/ff.c **** 			sect += csect;
 4897              		.loc 1 3544 0 discriminator 1
 4898 009e 4FF00208 		mov	r8, #2
 4899 00a2 84F81580 		strb	r8, [r4, #21]
 4900 00a6 4146     		mov	r1, r8
 4901 00a8 5846     		mov	r0, fp
 4902              	.LVL716:
 4903 00aa FFF7FEFF 		bl	unlock_fs
 4904              	.LVL717:
 4905 00ae CDF80080 		str	r8, [sp]
 4906              	.LVL718:
 4907 00b2 C8E7     		b	.L444
 4908              	.LVL719:
 4909              	.L475:
3551:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it 
 4910              		.loc 1 3551 0 discriminator 1
 4911 00b4 4FF00108 		mov	r8, #1
 4912              	.LVL720:
 4913 00b8 84F81580 		strb	r8, [r4, #21]
 4914 00bc 4146     		mov	r1, r8
 4915 00be 0398     		ldr	r0, [sp, #12]
 4916 00c0 FFF7FEFF 		bl	unlock_fs
 4917              	.LVL721:
 4918 00c4 CDF80080 		str	r8, [sp]
 4919              	.LVL722:
 4920 00c8 BDE7     		b	.L444
 4921              	.LVL723:
 4922              	.L476:
3558:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 4923              		.loc 1 3558 0 discriminator 1
 4924 00ca 206A     		ldr	r0, [r4, #32]
 4925 00cc A0EB0A00 		sub	r0, r0, r10
 4926 00d0 4045     		cmp	r0, r8
 4927 00d2 6DD2     		bcs	.L459
3559:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 4928              		.loc 1 3559 0
 4929 00d4 4FF40072 		mov	r2, #512
 4930 00d8 04F13001 		add	r1, r4, #48
 4931 00dc 07EB4020 		add	r0, r7, r0, lsl #9
 4932 00e0 FFF7FEFF 		bl	mem_cpy
 4933              	.LVL724:
 4934 00e4 64E0     		b	.L459
 4935              	.L456:
3567:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
 4936              		.loc 1 3567 0
 4937 00e6 226A     		ldr	r2, [r4, #32]
 4938 00e8 5245     		cmp	r2, r10
 4939 00ea 0DD0     		beq	.L461
3569:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 4940              		.loc 1 3569 0
 4941 00ec 94F91430 		ldrsb	r3, [r4, #20]
 4942 00f0 002B     		cmp	r3, #0
 4943 00f2 60DB     		blt	.L469
 4944              	.L462:
3574:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
ARM GAS  /tmp/ccqUXb8n.s 			page 203


 4945              		.loc 1 3574 0
 4946 00f4 0123     		movs	r3, #1
 4947 00f6 5246     		mov	r2, r10
 4948 00f8 04F13001 		add	r1, r4, #48
 4949 00fc 0398     		ldr	r0, [sp, #12]
 4950 00fe 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 4951 0100 FFF7FEFF 		bl	disk_read
 4952              	.LVL725:
 4953 0104 0028     		cmp	r0, #0
 4954 0106 6ED1     		bne	.L470
 4955              	.L461:
3577:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 4956              		.loc 1 3577 0
 4957 0108 C4F820A0 		str	r10, [r4, #32]
 4958              	.LVL726:
 4959              	.L448:
3579:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 4960              		.loc 1 3579 0
 4961 010c A369     		ldr	r3, [r4, #24]
 4962 010e C3F30803 		ubfx	r3, r3, #0, #9
 4963 0112 C3F50076 		rsb	r6, r3, #512
 4964              	.LVL727:
3580:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_TINY
 4965              		.loc 1 3580 0
 4966 0116 B542     		cmp	r5, r6
 4967 0118 00D2     		bcs	.L464
 4968 011a 2E46     		mov	r6, r5
 4969              	.LVL728:
 4970              	.L464:
3585:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 4971              		.loc 1 3585 0
 4972 011c 04F13001 		add	r1, r4, #48
 4973 0120 3246     		mov	r2, r6
 4974 0122 1944     		add	r1, r1, r3
 4975 0124 3846     		mov	r0, r7
 4976 0126 FFF7FEFF 		bl	mem_cpy
 4977              	.LVL729:
 4978              	.L460:
3523:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 4979              		.loc 1 3523 0
 4980 012a 3744     		add	r7, r7, r6
 4981              	.LVL730:
 4982 012c A369     		ldr	r3, [r4, #24]
 4983 012e 3344     		add	r3, r3, r6
 4984 0130 A361     		str	r3, [r4, #24]
 4985 0132 D9F80030 		ldr	r3, [r9]
 4986 0136 3344     		add	r3, r3, r6
 4987 0138 C9F80030 		str	r3, [r9]
 4988 013c AD1B     		subs	r5, r5, r6
 4989              	.LVL731:
 4990              	.L447:
3522:Middlewares/Third_Party/FatFs/src/ff.c **** 		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 4991              		.loc 1 3522 0
 4992 013e 002D     		cmp	r5, #0
 4993 0140 5CD0     		beq	.L471
3524:Middlewares/Third_Party/FatFs/src/ff.c **** 			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 4994              		.loc 1 3524 0
ARM GAS  /tmp/ccqUXb8n.s 			page 204


 4995 0142 A169     		ldr	r1, [r4, #24]
 4996 0144 C1F30803 		ubfx	r3, r1, #0, #9
 4997 0148 002B     		cmp	r3, #0
 4998 014a DFD1     		bne	.L448
3525:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (csect == 0) {					/* On the cluster boundary? */
 4999              		.loc 1 3525 0
 5000 014c 039B     		ldr	r3, [sp, #12]
 5001 014e 5E89     		ldrh	r6, [r3, #10]
 5002 0150 013E     		subs	r6, r6, #1
 5003              	.LVL732:
3526:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fp->fptr == 0) {			/* On the top of the file? */
 5004              		.loc 1 3526 0
 5005 0152 16EA5126 		ands	r6, r6, r1, lsr #9
 5006              	.LVL733:
 5007 0156 09D1     		bne	.L449
3527:Middlewares/Third_Party/FatFs/src/ff.c **** 					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 5008              		.loc 1 3527 0
 5009 0158 0029     		cmp	r1, #0
 5010 015a 7FF47FAF 		bne	.L450
3528:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {						/* Middle or end of the file */
 5011              		.loc 1 3528 0
 5012 015e A068     		ldr	r0, [r4, #8]
 5013              	.LVL734:
 5014              	.L451:
3539:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 5015              		.loc 1 3539 0
 5016 0160 0128     		cmp	r0, #1
 5017 0162 86D9     		bls	.L472
3540:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->clust = clst;				/* Update current cluster */
 5018              		.loc 1 3540 0
 5019 0164 B0F1FF3F 		cmp	r0, #-1
 5020 0168 8ED0     		beq	.L473
3541:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 5021              		.loc 1 3541 0
 5022 016a E061     		str	r0, [r4, #28]
 5023              	.LVL735:
 5024              	.L449:
3543:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!sect) ABORT(fs, FR_INT_ERR);
 5025              		.loc 1 3543 0
 5026 016c DDF80CB0 		ldr	fp, [sp, #12]
 5027 0170 E169     		ldr	r1, [r4, #28]
 5028 0172 5846     		mov	r0, fp
 5029 0174 FFF7FEFF 		bl	clust2sect
 5030              	.LVL736:
3544:Middlewares/Third_Party/FatFs/src/ff.c **** 			sect += csect;
 5031              		.loc 1 3544 0
 5032 0178 8246     		mov	r10, r0
 5033 017a 0028     		cmp	r0, #0
 5034 017c 8FD0     		beq	.L474
3545:Middlewares/Third_Party/FatFs/src/ff.c **** 			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 5035              		.loc 1 3545 0
 5036 017e B244     		add	r10, r10, r6
 5037              	.LVL737:
3547:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 5038              		.loc 1 3547 0
 5039 0180 5FEA5528 		lsrs	r8, r5, #9
 5040              	.LVL738:
ARM GAS  /tmp/ccqUXb8n.s 			page 205


 5041 0184 AFD0     		beq	.L456
3548:Middlewares/Third_Party/FatFs/src/ff.c **** 					cc = fs->csize - csect;
 5042              		.loc 1 3548 0
 5043 0186 06EB0803 		add	r3, r6, r8
 5044 018a BBF80A20 		ldrh	r2, [fp, #10]
 5045 018e 9342     		cmp	r3, r2
 5046 0190 01D9     		bls	.L457
3549:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 5047              		.loc 1 3549 0
 5048 0192 A2EB0608 		sub	r8, r2, r6
 5049              	.LVL739:
 5050              	.L457:
3551:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it 
 5051              		.loc 1 3551 0
 5052 0196 4346     		mov	r3, r8
 5053 0198 5246     		mov	r2, r10
 5054 019a 3946     		mov	r1, r7
 5055 019c 9BF80100 		ldrb	r0, [fp, #1]	@ zero_extendqisi2
 5056 01a0 FFF7FEFF 		bl	disk_read
 5057              	.LVL740:
 5058 01a4 0028     		cmp	r0, #0
 5059 01a6 85D1     		bne	.L475
3558:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 5060              		.loc 1 3558 0
 5061 01a8 94F91430 		ldrsb	r3, [r4, #20]
 5062 01ac 002B     		cmp	r3, #0
 5063 01ae 8CDB     		blt	.L476
 5064              	.L459:
3563:Middlewares/Third_Party/FatFs/src/ff.c **** 				continue;
 5065              		.loc 1 3563 0
 5066 01b0 4FEA4826 		lsl	r6, r8, #9
 5067              	.LVL741:
3564:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 5068              		.loc 1 3564 0
 5069 01b4 B9E7     		b	.L460
 5070              	.LVL742:
 5071              	.L469:
3570:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->flag &= (BYTE)~FA_DIRTY;
 5072              		.loc 1 3570 0
 5073 01b6 0123     		movs	r3, #1
 5074 01b8 04F13001 		add	r1, r4, #48
 5075 01bc 9BF80100 		ldrb	r0, [fp, #1]	@ zero_extendqisi2
 5076 01c0 FFF7FEFF 		bl	disk_write
 5077              	.LVL743:
 5078 01c4 20B9     		cbnz	r0, .L477
3571:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 5079              		.loc 1 3571 0
 5080 01c6 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 5081 01c8 03F07F03 		and	r3, r3, #127
 5082 01cc 2375     		strb	r3, [r4, #20]
 5083 01ce 91E7     		b	.L462
 5084              	.L477:
3570:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->flag &= (BYTE)~FA_DIRTY;
 5085              		.loc 1 3570 0 discriminator 1
 5086 01d0 4FF00108 		mov	r8, #1
 5087              	.LVL744:
 5088 01d4 84F81580 		strb	r8, [r4, #21]
ARM GAS  /tmp/ccqUXb8n.s 			page 206


 5089 01d8 4146     		mov	r1, r8
 5090 01da 0398     		ldr	r0, [sp, #12]
 5091 01dc FFF7FEFF 		bl	unlock_fs
 5092              	.LVL745:
 5093 01e0 CDF80080 		str	r8, [sp]
 5094              	.LVL746:
 5095 01e4 2FE7     		b	.L444
 5096              	.LVL747:
 5097              	.L470:
3574:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 5098              		.loc 1 3574 0 discriminator 1
 5099 01e6 4FF00108 		mov	r8, #1
 5100              	.LVL748:
 5101 01ea 84F81580 		strb	r8, [r4, #21]
 5102 01ee 4146     		mov	r1, r8
 5103 01f0 0398     		ldr	r0, [sp, #12]
 5104 01f2 FFF7FEFF 		bl	unlock_fs
 5105              	.LVL749:
 5106 01f6 CDF80080 		str	r8, [sp]
 5107              	.LVL750:
 5108 01fa 24E7     		b	.L444
 5109              	.LVL751:
 5110              	.L471:
3589:Middlewares/Third_Party/FatFs/src/ff.c **** }
 5111              		.loc 1 3589 0
 5112 01fc 0021     		movs	r1, #0
 5113 01fe 0398     		ldr	r0, [sp, #12]
 5114 0200 FFF7FEFF 		bl	unlock_fs
 5115              	.LVL752:
 5116 0204 1FE7     		b	.L444
 5117              		.cfi_endproc
 5118              	.LFE183:
 5120              		.section	.text.f_write,"ax",%progbits
 5121              		.align	1
 5122              		.global	f_write
 5123              		.syntax unified
 5124              		.thumb
 5125              		.thumb_func
 5126              		.fpu fpv5-sp-d16
 5128              	f_write:
 5129              	.LFB184:
3606:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 5130              		.loc 1 3606 0
 5131              		.cfi_startproc
 5132              		@ args = 0, pretend = 0, frame = 16
 5133              		@ frame_needed = 0, uses_anonymous_args = 0
 5134              	.LVL753:
 5135 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 5136              	.LCFI58:
 5137              		.cfi_def_cfa_offset 36
 5138              		.cfi_offset 4, -36
 5139              		.cfi_offset 5, -32
 5140              		.cfi_offset 6, -28
 5141              		.cfi_offset 7, -24
 5142              		.cfi_offset 8, -20
 5143              		.cfi_offset 9, -16
 5144              		.cfi_offset 10, -12
ARM GAS  /tmp/ccqUXb8n.s 			page 207


 5145              		.cfi_offset 11, -8
 5146              		.cfi_offset 14, -4
 5147 0004 85B0     		sub	sp, sp, #20
 5148              	.LCFI59:
 5149              		.cfi_def_cfa_offset 56
 5150 0006 0446     		mov	r4, r0
 5151 0008 8846     		mov	r8, r1
 5152 000a 1646     		mov	r6, r2
 5153 000c 9946     		mov	r9, r3
 5154              	.LVL754:
3614:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 5155              		.loc 1 3614 0
 5156 000e 0023     		movs	r3, #0
 5157              	.LVL755:
 5158 0010 C9F80030 		str	r3, [r9]
3615:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 5159              		.loc 1 3615 0
 5160 0014 0190     		str	r0, [sp, #4]
 5161 0016 03A9     		add	r1, sp, #12
 5162              	.LVL756:
 5163 0018 FFF7FEFF 		bl	validate
 5164              	.LVL757:
3616:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 5165              		.loc 1 3616 0
 5166 001c 0090     		str	r0, [sp]
 5167 001e 60B9     		cbnz	r0, .L479
3616:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 5168              		.loc 1 3616 0 is_stmt 0 discriminator 2
 5169 0020 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 5170 0022 0093     		str	r3, [sp]
 5171              	.LVL758:
 5172 0024 4BB9     		cbnz	r3, .L479
3617:Middlewares/Third_Party/FatFs/src/ff.c **** 
 5173              		.loc 1 3617 0 is_stmt 1
 5174 0026 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 5175              	.LVL759:
 5176 0028 13F0020F 		tst	r3, #2
 5177 002c 0DD0     		beq	.L506
3620:Middlewares/Third_Party/FatFs/src/ff.c **** 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 5178              		.loc 1 3620 0
 5179 002e A369     		ldr	r3, [r4, #24]
 5180 0030 F342     		cmn	r3, r6
 5181 0032 C0F0CA80 		bcc	.L484
3621:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 5182              		.loc 1 3621 0
 5183 0036 DE43     		mvns	r6, r3
 5184              	.LVL760:
 5185 0038 C7E0     		b	.L484
 5186              	.LVL761:
 5187              	.L479:
3616:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 5188              		.loc 1 3616 0 discriminator 3
 5189 003a 0099     		ldr	r1, [sp]
 5190 003c 0398     		ldr	r0, [sp, #12]
 5191 003e FFF7FEFF 		bl	unlock_fs
 5192              	.LVL762:
 5193              	.L481:
ARM GAS  /tmp/ccqUXb8n.s 			page 208


3712:Middlewares/Third_Party/FatFs/src/ff.c **** 
 5194              		.loc 1 3712 0
 5195 0042 0098     		ldr	r0, [sp]
 5196 0044 05B0     		add	sp, sp, #20
 5197              	.LCFI60:
 5198              		.cfi_remember_state
 5199              		.cfi_def_cfa_offset 36
 5200              		@ sp needed
 5201 0046 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 5202              	.LVL763:
 5203              	.L506:
 5204              	.LCFI61:
 5205              		.cfi_restore_state
3617:Middlewares/Third_Party/FatFs/src/ff.c **** 
 5206              		.loc 1 3617 0 discriminator 1
 5207 004a 0721     		movs	r1, #7
 5208 004c 0398     		ldr	r0, [sp, #12]
 5209 004e FFF7FEFF 		bl	unlock_fs
 5210              	.LVL764:
 5211 0052 0723     		movs	r3, #7
 5212 0054 0093     		str	r3, [sp]
 5213              	.LVL765:
 5214 0056 F4E7     		b	.L481
 5215              	.LVL766:
 5216              	.L487:
3636:Middlewares/Third_Party/FatFs/src/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 5217              		.loc 1 3636 0
 5218 0058 E36A     		ldr	r3, [r4, #44]
 5219 005a A3B3     		cbz	r3, .L489
3637:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else
 5220              		.loc 1 3637 0
 5221 005c 2046     		mov	r0, r4
 5222 005e FFF7FEFF 		bl	clmt_clust
 5223              	.LVL767:
 5224              	.L488:
3644:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst == 1) ABORT(fs, FR_INT_ERR);
 5225              		.loc 1 3644 0
 5226 0062 0028     		cmp	r0, #0
 5227 0064 00F0DE80 		beq	.L490
3645:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 5228              		.loc 1 3645 0
 5229 0068 0128     		cmp	r0, #1
 5230 006a 31D0     		beq	.L507
3646:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->clust = clst;			/* Update current cluster */
 5231              		.loc 1 3646 0
 5232 006c B0F1FF3F 		cmp	r0, #-1
 5233 0070 39D0     		beq	.L508
3647:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 5234              		.loc 1 3647 0
 5235 0072 E061     		str	r0, [r4, #28]
3648:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 5236              		.loc 1 3648 0
 5237 0074 A368     		ldr	r3, [r4, #8]
 5238 0076 03B9     		cbnz	r3, .L486
3648:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 5239              		.loc 1 3648 0 is_stmt 0 discriminator 1
 5240 0078 A060     		str	r0, [r4, #8]
ARM GAS  /tmp/ccqUXb8n.s 			page 209


 5241              	.LVL768:
 5242              	.L486:
3653:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 5243              		.loc 1 3653 0 is_stmt 1
 5244 007a 94F91430 		ldrsb	r3, [r4, #20]
 5245 007e 002B     		cmp	r3, #0
 5246 0080 3CDB     		blt	.L509
 5247              	.L493:
3658:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!sect) ABORT(fs, FR_INT_ERR);
 5248              		.loc 1 3658 0
 5249 0082 DDF80CB0 		ldr	fp, [sp, #12]
 5250 0086 E169     		ldr	r1, [r4, #28]
 5251 0088 5846     		mov	r0, fp
 5252 008a FFF7FEFF 		bl	clust2sect
 5253              	.LVL769:
3659:Middlewares/Third_Party/FatFs/src/ff.c **** 			sect += csect;
 5254              		.loc 1 3659 0
 5255 008e 8246     		mov	r10, r0
 5256 0090 0028     		cmp	r0, #0
 5257 0092 4CD0     		beq	.L510
3660:Middlewares/Third_Party/FatFs/src/ff.c **** 			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 5258              		.loc 1 3660 0
 5259 0094 BA44     		add	r10, r10, r7
 5260              	.LVL770:
3662:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 5261              		.loc 1 3662 0
 5262 0096 750A     		lsrs	r5, r6, #9
 5263              	.LVL771:
 5264 0098 6CD0     		beq	.L496
3663:Middlewares/Third_Party/FatFs/src/ff.c **** 					cc = fs->csize - csect;
 5265              		.loc 1 3663 0
 5266 009a 7B19     		adds	r3, r7, r5
 5267 009c BBF80A20 		ldrh	r2, [fp, #10]
 5268 00a0 9342     		cmp	r3, r2
 5269 00a2 00D9     		bls	.L497
3664:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 5270              		.loc 1 3664 0
 5271 00a4 D51B     		subs	r5, r2, r7
 5272              	.LVL772:
 5273              	.L497:
3666:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_MINIMIZE <= 2
 5274              		.loc 1 3666 0
 5275 00a6 2B46     		mov	r3, r5
 5276 00a8 5246     		mov	r2, r10
 5277 00aa 4146     		mov	r1, r8
 5278 00ac 9BF80100 		ldrb	r0, [fp, #1]	@ zero_extendqisi2
 5279 00b0 FFF7FEFF 		bl	disk_write
 5280              	.LVL773:
 5281 00b4 0028     		cmp	r0, #0
 5282 00b6 45D1     		bne	.L511
3674:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 5283              		.loc 1 3674 0
 5284 00b8 216A     		ldr	r1, [r4, #32]
 5285 00ba A1EB0A01 		sub	r1, r1, r10
 5286 00be A942     		cmp	r1, r5
 5287 00c0 4BD3     		bcc	.L512
 5288              	.L499:
ARM GAS  /tmp/ccqUXb8n.s 			page 210


3680:Middlewares/Third_Party/FatFs/src/ff.c **** 				continue;
 5289              		.loc 1 3680 0
 5290 00c2 6D02     		lsls	r5, r5, #9
 5291              	.LVL774:
3681:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 5292              		.loc 1 3681 0
 5293 00c4 72E0     		b	.L500
 5294              	.LVL775:
 5295              	.L489:
3641:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 5296              		.loc 1 3641 0
 5297 00c6 E169     		ldr	r1, [r4, #28]
 5298 00c8 0198     		ldr	r0, [sp, #4]
 5299 00ca FFF7FEFF 		bl	create_chain
 5300              	.LVL776:
 5301 00ce C8E7     		b	.L488
 5302              	.L507:
3645:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 5303              		.loc 1 3645 0 discriminator 1
 5304 00d0 4FF0020A 		mov	r10, #2
 5305 00d4 84F815A0 		strb	r10, [r4, #21]
 5306 00d8 5146     		mov	r1, r10
 5307 00da 0398     		ldr	r0, [sp, #12]
 5308              	.LVL777:
 5309 00dc FFF7FEFF 		bl	unlock_fs
 5310              	.LVL778:
 5311 00e0 CDF800A0 		str	r10, [sp]
 5312              	.LVL779:
 5313 00e4 ADE7     		b	.L481
 5314              	.LVL780:
 5315              	.L508:
3646:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->clust = clst;			/* Update current cluster */
 5316              		.loc 1 3646 0 discriminator 1
 5317 00e6 4FF0010A 		mov	r10, #1
 5318 00ea 84F815A0 		strb	r10, [r4, #21]
 5319 00ee 5146     		mov	r1, r10
 5320 00f0 0398     		ldr	r0, [sp, #12]
 5321              	.LVL781:
 5322 00f2 FFF7FEFF 		bl	unlock_fs
 5323              	.LVL782:
 5324 00f6 CDF800A0 		str	r10, [sp]
 5325              	.LVL783:
 5326 00fa A2E7     		b	.L481
 5327              	.LVL784:
 5328              	.L509:
3654:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
 5329              		.loc 1 3654 0
 5330 00fc 0123     		movs	r3, #1
 5331 00fe 226A     		ldr	r2, [r4, #32]
 5332 0100 04F13001 		add	r1, r4, #48
 5333 0104 0398     		ldr	r0, [sp, #12]
 5334 0106 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 5335 0108 FFF7FEFF 		bl	disk_write
 5336              	.LVL785:
 5337 010c 20B9     		cbnz	r0, .L513
3655:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 5338              		.loc 1 3655 0
ARM GAS  /tmp/ccqUXb8n.s 			page 211


 5339 010e 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 5340 0110 03F07F03 		and	r3, r3, #127
 5341 0114 2375     		strb	r3, [r4, #20]
 5342 0116 B4E7     		b	.L493
 5343              	.L513:
3654:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
 5344              		.loc 1 3654 0 discriminator 1
 5345 0118 4FF0010A 		mov	r10, #1
 5346 011c 84F815A0 		strb	r10, [r4, #21]
 5347 0120 5146     		mov	r1, r10
 5348 0122 0398     		ldr	r0, [sp, #12]
 5349 0124 FFF7FEFF 		bl	unlock_fs
 5350              	.LVL786:
 5351 0128 CDF800A0 		str	r10, [sp]
 5352              	.LVL787:
 5353 012c 89E7     		b	.L481
 5354              	.LVL788:
 5355              	.L510:
3659:Middlewares/Third_Party/FatFs/src/ff.c **** 			sect += csect;
 5356              		.loc 1 3659 0 discriminator 1
 5357 012e 4FF0020A 		mov	r10, #2
 5358 0132 84F815A0 		strb	r10, [r4, #21]
 5359 0136 5146     		mov	r1, r10
 5360 0138 5846     		mov	r0, fp
 5361              	.LVL789:
 5362 013a FFF7FEFF 		bl	unlock_fs
 5363              	.LVL790:
 5364 013e CDF800A0 		str	r10, [sp]
 5365              	.LVL791:
 5366 0142 7EE7     		b	.L481
 5367              	.LVL792:
 5368              	.L511:
3666:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_MINIMIZE <= 2
 5369              		.loc 1 3666 0 discriminator 1
 5370 0144 4FF0010A 		mov	r10, #1
 5371              	.LVL793:
 5372 0148 84F815A0 		strb	r10, [r4, #21]
 5373 014c 5146     		mov	r1, r10
 5374 014e 0398     		ldr	r0, [sp, #12]
 5375 0150 FFF7FEFF 		bl	unlock_fs
 5376              	.LVL794:
 5377 0154 CDF800A0 		str	r10, [sp]
 5378              	.LVL795:
 5379 0158 73E7     		b	.L481
 5380              	.LVL796:
 5381              	.L512:
3675:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->flag &= (BYTE)~FA_DIRTY;
 5382              		.loc 1 3675 0
 5383 015a 4FF40072 		mov	r2, #512
 5384 015e 08EB4121 		add	r1, r8, r1, lsl #9
 5385 0162 04F13000 		add	r0, r4, #48
 5386 0166 FFF7FEFF 		bl	mem_cpy
 5387              	.LVL797:
3676:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 5388              		.loc 1 3676 0
 5389 016a 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 5390 016c 03F07F03 		and	r3, r3, #127
ARM GAS  /tmp/ccqUXb8n.s 			page 212


 5391 0170 2375     		strb	r3, [r4, #20]
 5392 0172 A6E7     		b	.L499
 5393              	.L496:
3689:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->fptr < fp->obj.objsize &&
 5394              		.loc 1 3689 0
 5395 0174 236A     		ldr	r3, [r4, #32]
 5396 0176 5345     		cmp	r3, r10
 5397 0178 03D0     		beq	.L501
3690:Middlewares/Third_Party/FatFs/src/ff.c **** 				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 5398              		.loc 1 3690 0 discriminator 1
 5399 017a A269     		ldr	r2, [r4, #24]
 5400 017c E368     		ldr	r3, [r4, #12]
3689:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->fptr < fp->obj.objsize &&
 5401              		.loc 1 3689 0 discriminator 1
 5402 017e 9A42     		cmp	r2, r3
 5403 0180 3BD3     		bcc	.L514
 5404              	.L501:
3695:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 5405              		.loc 1 3695 0
 5406 0182 C4F820A0 		str	r10, [r4, #32]
 5407              	.LVL798:
 5408              	.L485:
3697:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 5409              		.loc 1 3697 0
 5410 0186 A369     		ldr	r3, [r4, #24]
 5411 0188 C3F30803 		ubfx	r3, r3, #0, #9
 5412 018c C3F50075 		rsb	r5, r3, #512
 5413              	.LVL799:
3698:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_TINY
 5414              		.loc 1 3698 0
 5415 0190 AE42     		cmp	r6, r5
 5416 0192 00D2     		bcs	.L502
 5417 0194 3546     		mov	r5, r6
 5418              	.LVL800:
 5419              	.L502:
3704:Middlewares/Third_Party/FatFs/src/ff.c **** 		fp->flag |= FA_DIRTY;
 5420              		.loc 1 3704 0
 5421 0196 04F13000 		add	r0, r4, #48
 5422 019a 2A46     		mov	r2, r5
 5423 019c 4146     		mov	r1, r8
 5424 019e 1844     		add	r0, r0, r3
 5425 01a0 FFF7FEFF 		bl	mem_cpy
 5426              	.LVL801:
3705:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 5427              		.loc 1 3705 0
 5428 01a4 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 5429 01a6 63F07F03 		orn	r3, r3, #127
 5430 01aa 2375     		strb	r3, [r4, #20]
 5431              	.L500:
3625:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 5432              		.loc 1 3625 0
 5433 01ac A844     		add	r8, r8, r5
 5434              	.LVL802:
 5435 01ae A369     		ldr	r3, [r4, #24]
 5436 01b0 2B44     		add	r3, r3, r5
 5437 01b2 A361     		str	r3, [r4, #24]
 5438 01b4 E268     		ldr	r2, [r4, #12]
ARM GAS  /tmp/ccqUXb8n.s 			page 213


 5439 01b6 9342     		cmp	r3, r2
 5440 01b8 38BF     		it	cc
 5441 01ba 1346     		movcc	r3, r2
 5442 01bc E360     		str	r3, [r4, #12]
 5443 01be D9F80030 		ldr	r3, [r9]
 5444 01c2 2B44     		add	r3, r3, r5
 5445 01c4 C9F80030 		str	r3, [r9]
 5446 01c8 761B     		subs	r6, r6, r5
 5447              	.LVL803:
 5448              	.L484:
3624:Middlewares/Third_Party/FatFs/src/ff.c **** 		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->
 5449              		.loc 1 3624 0
 5450 01ca 5EB3     		cbz	r6, .L490
3626:Middlewares/Third_Party/FatFs/src/ff.c **** 			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 5451              		.loc 1 3626 0
 5452 01cc A169     		ldr	r1, [r4, #24]
 5453 01ce C1F30803 		ubfx	r3, r1, #0, #9
 5454 01d2 002B     		cmp	r3, #0
 5455 01d4 D7D1     		bne	.L485
3627:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (csect == 0) {				/* On the cluster boundary? */
 5456              		.loc 1 3627 0
 5457 01d6 039B     		ldr	r3, [sp, #12]
 5458 01d8 5F89     		ldrh	r7, [r3, #10]
 5459 01da 013F     		subs	r7, r7, #1
 5460              	.LVL804:
3628:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fp->fptr == 0) {		/* On the top of the file? */
 5461              		.loc 1 3628 0
 5462 01dc 17EA5127 		ands	r7, r7, r1, lsr #9
 5463              	.LVL805:
 5464 01e0 7FF44BAF 		bne	.L486
3629:Middlewares/Third_Party/FatFs/src/ff.c **** 					clst = fp->obj.sclust;	/* Follow from the origin */
 5465              		.loc 1 3629 0
 5466 01e4 0029     		cmp	r1, #0
 5467 01e6 7FF437AF 		bne	.L487
3630:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 0) {		/* If no cluster is allocated, */
 5468              		.loc 1 3630 0
 5469 01ea A068     		ldr	r0, [r4, #8]
 5470              	.LVL806:
3631:Middlewares/Third_Party/FatFs/src/ff.c **** 						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 5471              		.loc 1 3631 0
 5472 01ec 0028     		cmp	r0, #0
 5473 01ee 7FF438AF 		bne	.L488
3632:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 5474              		.loc 1 3632 0
 5475 01f2 0198     		ldr	r0, [sp, #4]
 5476              	.LVL807:
 5477 01f4 FFF7FEFF 		bl	create_chain
 5478              	.LVL808:
 5479 01f8 33E7     		b	.L488
 5480              	.LVL809:
 5481              	.L514:
3691:Middlewares/Third_Party/FatFs/src/ff.c **** 					ABORT(fs, FR_DISK_ERR);
 5482              		.loc 1 3691 0
 5483 01fa 0123     		movs	r3, #1
 5484 01fc 5246     		mov	r2, r10
 5485 01fe 04F13001 		add	r1, r4, #48
 5486 0202 9BF80100 		ldrb	r0, [fp, #1]	@ zero_extendqisi2
ARM GAS  /tmp/ccqUXb8n.s 			page 214


 5487 0206 FFF7FEFF 		bl	disk_read
 5488              	.LVL810:
3690:Middlewares/Third_Party/FatFs/src/ff.c **** 				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 5489              		.loc 1 3690 0
 5490 020a 0028     		cmp	r0, #0
 5491 020c B9D0     		beq	.L501
3692:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 5492              		.loc 1 3692 0
 5493 020e 4FF0010A 		mov	r10, #1
 5494              	.LVL811:
 5495 0212 84F815A0 		strb	r10, [r4, #21]
 5496 0216 5146     		mov	r1, r10
 5497 0218 0398     		ldr	r0, [sp, #12]
 5498 021a FFF7FEFF 		bl	unlock_fs
 5499              	.LVL812:
 5500 021e CDF800A0 		str	r10, [sp]
 5501              	.LVL813:
 5502 0222 0EE7     		b	.L481
 5503              	.LVL814:
 5504              	.L490:
3709:Middlewares/Third_Party/FatFs/src/ff.c **** 
 5505              		.loc 1 3709 0
 5506 0224 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 5507 0226 43F04003 		orr	r3, r3, #64
 5508 022a 2375     		strb	r3, [r4, #20]
3711:Middlewares/Third_Party/FatFs/src/ff.c **** }
 5509              		.loc 1 3711 0
 5510 022c 0021     		movs	r1, #0
 5511 022e 0398     		ldr	r0, [sp, #12]
 5512 0230 FFF7FEFF 		bl	unlock_fs
 5513              	.LVL815:
 5514 0234 05E7     		b	.L481
 5515              		.cfi_endproc
 5516              	.LFE184:
 5518              		.section	.text.putc_bfd,"ax",%progbits
 5519              		.align	1
 5520              		.syntax unified
 5521              		.thumb
 5522              		.thumb_func
 5523              		.fpu fpv5-sp-d16
 5525              	putc_bfd:
 5526              	.LFB199:
5910:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT bw;
 5527              		.loc 1 5910 0
 5528              		.cfi_startproc
 5529              		@ args = 0, pretend = 0, frame = 8
 5530              		@ frame_needed = 0, uses_anonymous_args = 0
 5531              	.LVL816:
 5532 0000 70B5     		push	{r4, r5, r6, lr}
 5533              	.LCFI62:
 5534              		.cfi_def_cfa_offset 16
 5535              		.cfi_offset 4, -16
 5536              		.cfi_offset 5, -12
 5537              		.cfi_offset 6, -8
 5538              		.cfi_offset 14, -4
 5539 0002 82B0     		sub	sp, sp, #8
 5540              	.LCFI63:
ARM GAS  /tmp/ccqUXb8n.s 			page 215


 5541              		.cfi_def_cfa_offset 24
 5542 0004 0446     		mov	r4, r0
 5543 0006 0D46     		mov	r5, r1
5915:Middlewares/Third_Party/FatFs/src/ff.c **** 		putc_bfd(pb, '\r');
 5544              		.loc 1 5915 0
 5545 0008 0A29     		cmp	r1, #10
 5546 000a 0DD0     		beq	.L522
 5547              	.LVL817:
 5548              	.L516:
5919:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (i < 0) return;
 5549              		.loc 1 5919 0
 5550 000c 6368     		ldr	r3, [r4, #4]
 5551              	.LVL818:
5920:Middlewares/Third_Party/FatFs/src/ff.c **** 
 5552              		.loc 1 5920 0
 5553 000e 002B     		cmp	r3, #0
 5554 0010 08DB     		blt	.L515
5949:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 5555              		.loc 1 5949 0
 5556 0012 5E1C     		adds	r6, r3, #1
 5557              	.LVL819:
 5558 0014 2344     		add	r3, r3, r4
 5559 0016 1D73     		strb	r5, [r3, #12]
5952:Middlewares/Third_Party/FatFs/src/ff.c **** 		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 5560              		.loc 1 5952 0
 5561 0018 3C2E     		cmp	r6, #60
 5562 001a 09DC     		bgt	.L523
 5563              	.LVL820:
 5564              	.L518:
5956:Middlewares/Third_Party/FatFs/src/ff.c **** 	pb->nchr++;
 5565              		.loc 1 5956 0
 5566 001c 6660     		str	r6, [r4, #4]
5957:Middlewares/Third_Party/FatFs/src/ff.c **** }
 5567              		.loc 1 5957 0
 5568 001e A368     		ldr	r3, [r4, #8]
 5569 0020 0133     		adds	r3, r3, #1
 5570 0022 A360     		str	r3, [r4, #8]
 5571              	.LVL821:
 5572              	.L515:
5958:Middlewares/Third_Party/FatFs/src/ff.c **** 
 5573              		.loc 1 5958 0
 5574 0024 02B0     		add	sp, sp, #8
 5575              	.LCFI64:
 5576              		.cfi_remember_state
 5577              		.cfi_def_cfa_offset 16
 5578              		@ sp needed
 5579 0026 70BD     		pop	{r4, r5, r6, pc}
 5580              	.LVL822:
 5581              	.L522:
 5582              	.LCFI65:
 5583              		.cfi_restore_state
5916:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 5584              		.loc 1 5916 0
 5585 0028 0D21     		movs	r1, #13
 5586              	.LVL823:
 5587 002a FFF7E9FF 		bl	putc_bfd
 5588              	.LVL824:
ARM GAS  /tmp/ccqUXb8n.s 			page 216


 5589 002e EDE7     		b	.L516
 5590              	.LVL825:
 5591              	.L523:
5953:Middlewares/Third_Party/FatFs/src/ff.c **** 		i = (bw == (UINT)i) ? 0 : -1;
 5592              		.loc 1 5953 0
 5593 0030 01AB     		add	r3, sp, #4
 5594 0032 3246     		mov	r2, r6
 5595 0034 04F10C01 		add	r1, r4, #12
 5596 0038 2068     		ldr	r0, [r4]
 5597 003a FFF7FEFF 		bl	f_write
 5598              	.LVL826:
5954:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 5599              		.loc 1 5954 0
 5600 003e 019B     		ldr	r3, [sp, #4]
 5601 0040 9E42     		cmp	r6, r3
 5602 0042 02D0     		beq	.L524
 5603 0044 4FF0FF36 		mov	r6, #-1
 5604              	.LVL827:
 5605 0048 E8E7     		b	.L518
 5606              	.LVL828:
 5607              	.L524:
 5608 004a 0026     		movs	r6, #0
 5609              	.LVL829:
 5610 004c E6E7     		b	.L518
 5611              		.cfi_endproc
 5612              	.LFE199:
 5614              		.section	.text.putc_flush,"ax",%progbits
 5615              		.align	1
 5616              		.syntax unified
 5617              		.thumb
 5618              		.thumb_func
 5619              		.fpu fpv5-sp-d16
 5621              	putc_flush:
 5622              	.LFB200:
5965:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT nw;
 5623              		.loc 1 5965 0
 5624              		.cfi_startproc
 5625              		@ args = 0, pretend = 0, frame = 8
 5626              		@ frame_needed = 0, uses_anonymous_args = 0
 5627              	.LVL830:
5968:Middlewares/Third_Party/FatFs/src/ff.c **** 		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 5628              		.loc 1 5968 0
 5629 0000 4268     		ldr	r2, [r0, #4]
 5630 0002 002A     		cmp	r2, #0
 5631 0004 10DB     		blt	.L527
5965:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT nw;
 5632              		.loc 1 5965 0
 5633 0006 10B5     		push	{r4, lr}
 5634              	.LCFI66:
 5635              		.cfi_def_cfa_offset 8
 5636              		.cfi_offset 4, -8
 5637              		.cfi_offset 14, -4
 5638 0008 82B0     		sub	sp, sp, #8
 5639              	.LCFI67:
 5640              		.cfi_def_cfa_offset 16
 5641 000a 0446     		mov	r4, r0
5969:Middlewares/Third_Party/FatFs/src/ff.c **** 		&& (UINT)pb->idx == nw) return pb->nchr;
ARM GAS  /tmp/ccqUXb8n.s 			page 217


 5642              		.loc 1 5969 0
 5643 000c 01AB     		add	r3, sp, #4
 5644 000e 00F10C01 		add	r1, r0, #12
 5645 0012 0068     		ldr	r0, [r0]
 5646              	.LVL831:
 5647 0014 FFF7FEFF 		bl	f_write
 5648              	.LVL832:
 5649 0018 48B9     		cbnz	r0, .L528
5970:Middlewares/Third_Party/FatFs/src/ff.c **** 	return EOF;
 5650              		.loc 1 5970 0
 5651 001a 6268     		ldr	r2, [r4, #4]
 5652 001c 019B     		ldr	r3, [sp, #4]
 5653 001e 9A42     		cmp	r2, r3
 5654 0020 08D1     		bne	.L529
5970:Middlewares/Third_Party/FatFs/src/ff.c **** 	return EOF;
 5655              		.loc 1 5970 0 is_stmt 0 discriminator 1
 5656 0022 A068     		ldr	r0, [r4, #8]
 5657              	.L525:
5972:Middlewares/Third_Party/FatFs/src/ff.c **** 
 5658              		.loc 1 5972 0 is_stmt 1
 5659 0024 02B0     		add	sp, sp, #8
 5660              	.LCFI68:
 5661              		.cfi_def_cfa_offset 8
 5662              		@ sp needed
 5663 0026 10BD     		pop	{r4, pc}
 5664              	.LVL833:
 5665              	.L527:
 5666              	.LCFI69:
 5667              		.cfi_def_cfa_offset 0
 5668              		.cfi_restore 4
 5669              		.cfi_restore 14
5971:Middlewares/Third_Party/FatFs/src/ff.c **** }
 5670              		.loc 1 5971 0
 5671 0028 4FF0FF30 		mov	r0, #-1
 5672              	.LVL834:
5972:Middlewares/Third_Party/FatFs/src/ff.c **** 
 5673              		.loc 1 5972 0
 5674 002c 7047     		bx	lr
 5675              	.LVL835:
 5676              	.L528:
 5677              	.LCFI70:
 5678              		.cfi_def_cfa_offset 16
 5679              		.cfi_offset 4, -8
 5680              		.cfi_offset 14, -4
5971:Middlewares/Third_Party/FatFs/src/ff.c **** }
 5681              		.loc 1 5971 0
 5682 002e 4FF0FF30 		mov	r0, #-1
 5683 0032 F7E7     		b	.L525
 5684              	.L529:
 5685 0034 4FF0FF30 		mov	r0, #-1
 5686 0038 F4E7     		b	.L525
 5687              		.cfi_endproc
 5688              	.LFE200:
 5690              		.section	.text.f_sync,"ax",%progbits
 5691              		.align	1
 5692              		.global	f_sync
 5693              		.syntax unified
ARM GAS  /tmp/ccqUXb8n.s 			page 218


 5694              		.thumb
 5695              		.thumb_func
 5696              		.fpu fpv5-sp-d16
 5698              	f_sync:
 5699              	.LFB185:
3724:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 5700              		.loc 1 3724 0
 5701              		.cfi_startproc
 5702              		@ args = 0, pretend = 0, frame = 8
 5703              		@ frame_needed = 0, uses_anonymous_args = 0
 5704              	.LVL836:
 5705 0000 70B5     		push	{r4, r5, r6, lr}
 5706              	.LCFI71:
 5707              		.cfi_def_cfa_offset 16
 5708              		.cfi_offset 4, -16
 5709              		.cfi_offset 5, -12
 5710              		.cfi_offset 6, -8
 5711              		.cfi_offset 14, -4
 5712 0002 82B0     		sub	sp, sp, #8
 5713              	.LCFI72:
 5714              		.cfi_def_cfa_offset 24
 5715 0004 0546     		mov	r5, r0
3734:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 5716              		.loc 1 3734 0
 5717 0006 01A9     		add	r1, sp, #4
 5718 0008 FFF7FEFF 		bl	validate
 5719              	.LVL837:
3735:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 5720              		.loc 1 3735 0
 5721 000c 0446     		mov	r4, r0
 5722 000e 78B9     		cbnz	r0, .L535
3736:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_TINY
 5723              		.loc 1 3736 0
 5724 0010 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 5725 0012 13F0400F 		tst	r3, #64
 5726 0016 0BD0     		beq	.L535
3738:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 5727              		.loc 1 3738 0
 5728 0018 13F0800F 		tst	r3, #128
 5729 001c 0FD1     		bne	.L540
 5730              	.LVL838:
 5731              	.L536:
3744:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 5732              		.loc 1 3744 0
 5733 001e FFF7FEFF 		bl	get_fattime
 5734              	.LVL839:
 5735 0022 0646     		mov	r6, r0
 5736              	.LVL840:
3774:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK) {
 5737              		.loc 1 3774 0
 5738 0024 696A     		ldr	r1, [r5, #36]
 5739 0026 0198     		ldr	r0, [sp, #4]
 5740              	.LVL841:
 5741 0028 FFF7FEFF 		bl	move_window
 5742              	.LVL842:
3775:Middlewares/Third_Party/FatFs/src/ff.c **** 					dir = fp->dir_ptr;
 5743              		.loc 1 3775 0
ARM GAS  /tmp/ccqUXb8n.s 			page 219


 5744 002c 0446     		mov	r4, r0
 5745 002e D0B1     		cbz	r0, .L541
 5746              	.LVL843:
 5747              	.L535:
3790:Middlewares/Third_Party/FatFs/src/ff.c **** }
 5748              		.loc 1 3790 0
 5749 0030 2146     		mov	r1, r4
 5750 0032 0198     		ldr	r0, [sp, #4]
 5751 0034 FFF7FEFF 		bl	unlock_fs
 5752              	.LVL844:
 5753              	.L538:
3791:Middlewares/Third_Party/FatFs/src/ff.c **** 
 5754              		.loc 1 3791 0
 5755 0038 2046     		mov	r0, r4
 5756 003a 02B0     		add	sp, sp, #8
 5757              	.LCFI73:
 5758              		.cfi_remember_state
 5759              		.cfi_def_cfa_offset 16
 5760              		@ sp needed
 5761 003c 70BD     		pop	{r4, r5, r6, pc}
 5762              	.LVL845:
 5763              	.L540:
 5764              	.LCFI74:
 5765              		.cfi_restore_state
3739:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
 5766              		.loc 1 3739 0
 5767 003e 0123     		movs	r3, #1
 5768 0040 2A6A     		ldr	r2, [r5, #32]
 5769 0042 05F13001 		add	r1, r5, #48
 5770 0046 0198     		ldr	r0, [sp, #4]
 5771              	.LVL846:
 5772 0048 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 5773 004a FFF7FEFF 		bl	disk_write
 5774              	.LVL847:
 5775 004e 20B9     		cbnz	r0, .L542
3740:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 5776              		.loc 1 3740 0
 5777 0050 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 5778 0052 03F07F03 		and	r3, r3, #127
 5779 0056 2B75     		strb	r3, [r5, #20]
 5780 0058 E1E7     		b	.L536
 5781              	.L542:
3739:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
 5782              		.loc 1 3739 0 discriminator 1
 5783 005a 0121     		movs	r1, #1
 5784 005c 0198     		ldr	r0, [sp, #4]
 5785 005e FFF7FEFF 		bl	unlock_fs
 5786              	.LVL848:
 5787 0062 0124     		movs	r4, #1
 5788 0064 E8E7     		b	.L538
 5789              	.LVL849:
 5790              	.L541:
3776:Middlewares/Third_Party/FatFs/src/ff.c **** 					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 5791              		.loc 1 3776 0
 5792 0066 AC6A     		ldr	r4, [r5, #40]
 5793              	.LVL850:
3777:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
ARM GAS  /tmp/ccqUXb8n.s 			page 220


 5794              		.loc 1 3777 0
 5795 0068 E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 5796 006a 43F02003 		orr	r3, r3, #32
 5797 006e E372     		strb	r3, [r4, #11]
3778:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 5798              		.loc 1 3778 0
 5799 0070 AA68     		ldr	r2, [r5, #8]
 5800 0072 2146     		mov	r1, r4
 5801 0074 2868     		ldr	r0, [r5]
 5802              	.LVL851:
 5803 0076 FFF7FEFF 		bl	st_clust
 5804              	.LVL852:
3779:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 5805              		.loc 1 3779 0
 5806 007a E968     		ldr	r1, [r5, #12]
 5807 007c 04F11C00 		add	r0, r4, #28
 5808 0080 FFF7FEFF 		bl	st_dword
 5809              	.LVL853:
3780:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_word(dir + DIR_LstAccDate, 0);
 5810              		.loc 1 3780 0
 5811 0084 3146     		mov	r1, r6
 5812 0086 04F11600 		add	r0, r4, #22
 5813 008a FFF7FEFF 		bl	st_dword
 5814              	.LVL854:
3781:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->wflag = 1;
 5815              		.loc 1 3781 0
 5816 008e 0021     		movs	r1, #0
 5817 0090 04F11200 		add	r0, r4, #18
 5818 0094 FFF7FEFF 		bl	st_word
 5819              	.LVL855:
3782:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = sync_fs(fs);					/* Restore it to the directory */
 5820              		.loc 1 3782 0
 5821 0098 019B     		ldr	r3, [sp, #4]
 5822 009a 0122     		movs	r2, #1
 5823 009c DA70     		strb	r2, [r3, #3]
3783:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->flag &= (BYTE)~FA_MODIFIED;
 5824              		.loc 1 3783 0
 5825 009e 0198     		ldr	r0, [sp, #4]
 5826 00a0 FFF7FEFF 		bl	sync_fs
 5827              	.LVL856:
 5828 00a4 0446     		mov	r4, r0
 5829              	.LVL857:
3784:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 5830              		.loc 1 3784 0
 5831 00a6 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 5832 00a8 23F04003 		bic	r3, r3, #64
 5833 00ac 2B75     		strb	r3, [r5, #20]
 5834 00ae BFE7     		b	.L535
 5835              		.cfi_endproc
 5836              	.LFE185:
 5838              		.section	.text.f_close,"ax",%progbits
 5839              		.align	1
 5840              		.global	f_close
 5841              		.syntax unified
 5842              		.thumb
 5843              		.thumb_func
 5844              		.fpu fpv5-sp-d16
ARM GAS  /tmp/ccqUXb8n.s 			page 221


 5846              	f_close:
 5847              	.LFB186:
3805:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 5848              		.loc 1 3805 0
 5849              		.cfi_startproc
 5850              		@ args = 0, pretend = 0, frame = 8
 5851              		@ frame_needed = 0, uses_anonymous_args = 0
 5852              	.LVL858:
 5853 0000 30B5     		push	{r4, r5, lr}
 5854              	.LCFI75:
 5855              		.cfi_def_cfa_offset 12
 5856              		.cfi_offset 4, -12
 5857              		.cfi_offset 5, -8
 5858              		.cfi_offset 14, -4
 5859 0002 83B0     		sub	sp, sp, #12
 5860              	.LCFI76:
 5861              		.cfi_def_cfa_offset 24
 5862 0004 0546     		mov	r5, r0
3810:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK)
 5863              		.loc 1 3810 0
 5864 0006 FFF7FEFF 		bl	f_sync
 5865              	.LVL859:
3811:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 5866              		.loc 1 3811 0
 5867 000a 0446     		mov	r4, r0
 5868 000c 10B1     		cbz	r0, .L547
 5869              	.LVL860:
 5870              	.L544:
3829:Middlewares/Third_Party/FatFs/src/ff.c **** 
 5871              		.loc 1 3829 0
 5872 000e 2046     		mov	r0, r4
 5873 0010 03B0     		add	sp, sp, #12
 5874              	.LCFI77:
 5875              		.cfi_remember_state
 5876              		.cfi_def_cfa_offset 12
 5877              		@ sp needed
 5878 0012 30BD     		pop	{r4, r5, pc}
 5879              	.LVL861:
 5880              	.L547:
 5881              	.LCFI78:
 5882              		.cfi_restore_state
3814:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
 5883              		.loc 1 3814 0
 5884 0014 01A9     		add	r1, sp, #4
 5885 0016 2846     		mov	r0, r5
 5886              	.LVL862:
 5887 0018 FFF7FEFF 		bl	validate
 5888              	.LVL863:
3815:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
 5889              		.loc 1 3815 0
 5890 001c 0446     		mov	r4, r0
 5891 001e 0028     		cmp	r0, #0
 5892 0020 F5D1     		bne	.L544
3817:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK)
 5893              		.loc 1 3817 0
 5894 0022 2869     		ldr	r0, [r5, #16]
 5895              	.LVL864:
ARM GAS  /tmp/ccqUXb8n.s 			page 222


 5896 0024 FFF7FEFF 		bl	dec_lock
 5897              	.LVL865:
3818:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 5898              		.loc 1 3818 0
 5899 0028 0446     		mov	r4, r0
 5900 002a 08B9     		cbnz	r0, .L545
3821:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 5901              		.loc 1 3821 0
 5902 002c 0023     		movs	r3, #0
 5903 002e 2B60     		str	r3, [r5]
 5904              	.L545:
3824:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 5905              		.loc 1 3824 0
 5906 0030 0021     		movs	r1, #0
 5907 0032 0198     		ldr	r0, [sp, #4]
 5908              	.LVL866:
 5909 0034 FFF7FEFF 		bl	unlock_fs
 5910              	.LVL867:
 5911 0038 E9E7     		b	.L544
 5912              		.cfi_endproc
 5913              	.LFE186:
 5915              		.section	.text.f_lseek,"ax",%progbits
 5916              		.align	1
 5917              		.global	f_lseek
 5918              		.syntax unified
 5919              		.thumb
 5920              		.thumb_func
 5921              		.fpu fpv5-sp-d16
 5923              	f_lseek:
 5924              	.LFB187:
3994:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 5925              		.loc 1 3994 0
 5926              		.cfi_startproc
 5927              		@ args = 0, pretend = 0, frame = 16
 5928              		@ frame_needed = 0, uses_anonymous_args = 0
 5929              	.LVL868:
 5930 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 5931              	.LCFI79:
 5932              		.cfi_def_cfa_offset 36
 5933              		.cfi_offset 4, -36
 5934              		.cfi_offset 5, -32
 5935              		.cfi_offset 6, -28
 5936              		.cfi_offset 7, -24
 5937              		.cfi_offset 8, -20
 5938              		.cfi_offset 9, -16
 5939              		.cfi_offset 10, -12
 5940              		.cfi_offset 11, -8
 5941              		.cfi_offset 14, -4
 5942 0004 85B0     		sub	sp, sp, #20
 5943              	.LCFI80:
 5944              		.cfi_def_cfa_offset 56
 5945 0006 0446     		mov	r4, r0
 5946 0008 0E46     		mov	r6, r1
4003:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) res = (FRESULT)fp->err;
 5947              		.loc 1 4003 0
 5948 000a 0190     		str	r0, [sp, #4]
 5949 000c 03A9     		add	r1, sp, #12
ARM GAS  /tmp/ccqUXb8n.s 			page 223


 5950              	.LVL869:
 5951 000e FFF7FEFF 		bl	validate
 5952              	.LVL870:
4004:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT && !_FS_READONLY
 5953              		.loc 1 4004 0
 5954 0012 0546     		mov	r5, r0
 5955 0014 00B9     		cbnz	r0, .L549
4004:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT && !_FS_READONLY
 5956              		.loc 1 4004 0 is_stmt 0 discriminator 1
 5957 0016 657D     		ldrb	r5, [r4, #21]	@ zero_extendqisi2
 5958              	.LVL871:
 5959              	.L549:
4010:Middlewares/Third_Party/FatFs/src/ff.c **** 
 5960              		.loc 1 4010 0 is_stmt 1
 5961 0018 ADB9     		cbnz	r5, .L594
4013:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 5962              		.loc 1 4013 0
 5963 001a E36A     		ldr	r3, [r4, #44]
 5964 001c 002B     		cmp	r3, #0
 5965 001e 00F0A880 		beq	.L552
4014:Middlewares/Third_Party/FatFs/src/ff.c **** 			tbl = fp->cltbl;
 5966              		.loc 1 4014 0
 5967 0022 B6F1FF3F 		cmp	r6, #-1
 5968 0026 13D0     		beq	.L595
4040:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->fptr = ofs;				/* Set file pointer */
 5969              		.loc 1 4040 0
 5970 0028 E768     		ldr	r7, [r4, #12]
 5971 002a B742     		cmp	r7, r6
 5972 002c 00D3     		bcc	.L561
 5973 002e 3746     		mov	r7, r6
 5974              	.L561:
 5975              	.LVL872:
4041:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ofs) {
 5976              		.loc 1 4041 0
 5977 0030 A761     		str	r7, [r4, #24]
4042:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->clust = clmt_clust(fp, ofs - 1);
 5978              		.loc 1 4042 0
 5979 0032 002F     		cmp	r7, #0
 5980 0034 51D1     		bne	.L596
 5981              	.LVL873:
 5982              	.L560:
4141:Middlewares/Third_Party/FatFs/src/ff.c **** }
 5983              		.loc 1 4141 0
 5984 0036 2946     		mov	r1, r5
 5985 0038 0398     		ldr	r0, [sp, #12]
 5986 003a FFF7FEFF 		bl	unlock_fs
 5987              	.LVL874:
 5988              	.L551:
4142:Middlewares/Third_Party/FatFs/src/ff.c **** 
 5989              		.loc 1 4142 0
 5990 003e 2846     		mov	r0, r5
 5991 0040 05B0     		add	sp, sp, #20
 5992              	.LCFI81:
 5993              		.cfi_remember_state
 5994              		.cfi_def_cfa_offset 36
 5995              		@ sp needed
 5996 0042 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
ARM GAS  /tmp/ccqUXb8n.s 			page 224


 5997              	.LVL875:
 5998              	.L594:
 5999              	.LCFI82:
 6000              		.cfi_restore_state
4010:Middlewares/Third_Party/FatFs/src/ff.c **** 
 6001              		.loc 1 4010 0 discriminator 1
 6002 0046 2946     		mov	r1, r5
 6003 0048 0398     		ldr	r0, [sp, #12]
 6004 004a FFF7FEFF 		bl	unlock_fs
 6005              	.LVL876:
 6006 004e F6E7     		b	.L551
 6007              	.L595:
 6008              	.LVL877:
4016:Middlewares/Third_Party/FatFs/src/ff.c **** 			cl = fp->obj.sclust;		/* Origin of the chain */
 6009              		.loc 1 4016 0
 6010 0050 03F1040B 		add	fp, r3, #4
 6011              	.LVL878:
 6012 0054 D3F800A0 		ldr	r10, [r3]
 6013              	.LVL879:
4017:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (cl) {
 6014              		.loc 1 4017 0
 6015 0058 D4F80890 		ldr	r9, [r4, #8]
 6016              	.LVL880:
4018:Middlewares/Third_Party/FatFs/src/ff.c **** 				do {
 6017              		.loc 1 4018 0
 6018 005c B9F1000F 		cmp	r9, #0
 6019 0060 2FD0     		beq	.L586
4016:Middlewares/Third_Party/FatFs/src/ff.c **** 			cl = fp->obj.sclust;		/* Origin of the chain */
 6020              		.loc 1 4016 0
 6021 0062 4FF00208 		mov	r8, #2
 6022              	.LVL881:
 6023              	.L559:
4021:Middlewares/Third_Party/FatFs/src/ff.c **** 					do {
 6024              		.loc 1 4021 0
 6025 0066 08F10208 		add	r8, r8, #2
 6026              	.LVL882:
 6027 006a 4E46     		mov	r6, r9
 6028 006c 0027     		movs	r7, #0
 6029              	.LVL883:
 6030              	.L557:
4023:Middlewares/Third_Party/FatFs/src/ff.c **** 						cl = get_fat(&fp->obj, cl);
 6031              		.loc 1 4023 0
 6032 006e 0137     		adds	r7, r7, #1
 6033              	.LVL884:
4024:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 6034              		.loc 1 4024 0
 6035 0070 3146     		mov	r1, r6
 6036 0072 0198     		ldr	r0, [sp, #4]
 6037 0074 FFF7FEFF 		bl	get_fat
 6038              	.LVL885:
4025:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 6039              		.loc 1 4025 0
 6040 0078 0128     		cmp	r0, #1
 6041 007a 14D9     		bls	.L597
4026:Middlewares/Third_Party/FatFs/src/ff.c **** 					} while (cl == pcl + 1);
 6042              		.loc 1 4026 0
 6043 007c B0F1FF3F 		cmp	r0, #-1
ARM GAS  /tmp/ccqUXb8n.s 			page 225


 6044 0080 18D0     		beq	.L598
4027:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 6045              		.loc 1 4027 0
 6046 0082 731C     		adds	r3, r6, #1
4024:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 6047              		.loc 1 4024 0
 6048 0084 0646     		mov	r6, r0
 6049              	.LVL886:
4027:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 6050              		.loc 1 4027 0
 6051 0086 8342     		cmp	r3, r0
 6052 0088 F1D0     		beq	.L557
4028:Middlewares/Third_Party/FatFs/src/ff.c **** 						*tbl++ = ncl; *tbl++ = tcl;
 6053              		.loc 1 4028 0
 6054 008a C245     		cmp	r10, r8
 6055 008c 05D3     		bcc	.L558
 6056              	.LVL887:
4029:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 6057              		.loc 1 4029 0
 6058 008e 5B46     		mov	r3, fp
 6059              	.LVL888:
 6060 0090 43F8087B 		str	r7, [r3], #8
 6061              	.LVL889:
 6062 0094 CBF80490 		str	r9, [fp, #4]
 6063 0098 9B46     		mov	fp, r3
 6064              	.LVL890:
 6065              	.L558:
4031:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 6066              		.loc 1 4031 0
 6067 009a 039B     		ldr	r3, [sp, #12]
 6068 009c 9B69     		ldr	r3, [r3, #24]
 6069 009e 8342     		cmp	r3, r0
 6070 00a0 11D9     		bls	.L554
4024:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 6071              		.loc 1 4024 0
 6072 00a2 8146     		mov	r9, r0
 6073              	.LVL891:
 6074 00a4 DFE7     		b	.L559
 6075              	.LVL892:
 6076              	.L597:
4025:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 6077              		.loc 1 4025 0 discriminator 1
 6078 00a6 0225     		movs	r5, #2
 6079              	.LVL893:
 6080 00a8 6575     		strb	r5, [r4, #21]
 6081 00aa 2946     		mov	r1, r5
 6082 00ac 0398     		ldr	r0, [sp, #12]
 6083              	.LVL894:
 6084 00ae FFF7FEFF 		bl	unlock_fs
 6085              	.LVL895:
 6086 00b2 C4E7     		b	.L551
 6087              	.LVL896:
 6088              	.L598:
4026:Middlewares/Third_Party/FatFs/src/ff.c **** 					} while (cl == pcl + 1);
 6089              		.loc 1 4026 0 discriminator 1
 6090 00b4 0125     		movs	r5, #1
 6091              	.LVL897:
ARM GAS  /tmp/ccqUXb8n.s 			page 226


 6092 00b6 6575     		strb	r5, [r4, #21]
 6093 00b8 2946     		mov	r1, r5
 6094 00ba 0398     		ldr	r0, [sp, #12]
 6095              	.LVL898:
 6096 00bc FFF7FEFF 		bl	unlock_fs
 6097              	.LVL899:
 6098 00c0 BDE7     		b	.L551
 6099              	.LVL900:
 6100              	.L586:
4016:Middlewares/Third_Party/FatFs/src/ff.c **** 			cl = fp->obj.sclust;		/* Origin of the chain */
 6101              		.loc 1 4016 0
 6102 00c2 4FF00208 		mov	r8, #2
 6103              	.LVL901:
 6104              	.L554:
4033:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ulen <= tlen) {
 6105              		.loc 1 4033 0
 6106 00c6 E36A     		ldr	r3, [r4, #44]
 6107 00c8 C3F80080 		str	r8, [r3]
4034:Middlewares/Third_Party/FatFs/src/ff.c **** 				*tbl = 0;		/* Terminate table */
 6108              		.loc 1 4034 0
 6109 00cc D045     		cmp	r8, r10
 6110 00ce 00F21881 		bhi	.L588
4035:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
 6111              		.loc 1 4035 0
 6112 00d2 0023     		movs	r3, #0
 6113 00d4 CBF80030 		str	r3, [fp]
 6114 00d8 ADE7     		b	.L560
 6115              	.LVL902:
 6116              	.L596:
4043:Middlewares/Third_Party/FatFs/src/ff.c **** 				dsc = clust2sect(fs, fp->clust);
 6117              		.loc 1 4043 0
 6118 00da 07F1FF39 		add	r9, r7, #-1
 6119 00de 4946     		mov	r1, r9
 6120 00e0 2046     		mov	r0, r4
 6121 00e2 FFF7FEFF 		bl	clmt_clust
 6122              	.LVL903:
 6123 00e6 0146     		mov	r1, r0
 6124 00e8 E061     		str	r0, [r4, #28]
4044:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (!dsc) ABORT(fs, FR_INT_ERR);
 6125              		.loc 1 4044 0
 6126 00ea DDF80C80 		ldr	r8, [sp, #12]
 6127 00ee 4046     		mov	r0, r8
 6128 00f0 FFF7FEFF 		bl	clust2sect
 6129              	.LVL904:
4045:Middlewares/Third_Party/FatFs/src/ff.c **** 				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 6130              		.loc 1 4045 0
 6131 00f4 D8B1     		cbz	r0, .L599
4046:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 6132              		.loc 1 4046 0
 6133 00f6 B8F80A60 		ldrh	r6, [r8, #10]
 6134 00fa 013E     		subs	r6, r6, #1
 6135 00fc 06EA5926 		and	r6, r6, r9, lsr #9
 6136 0100 0644     		add	r6, r6, r0
 6137              	.LVL905:
4047:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_TINY
 6138              		.loc 1 4047 0
 6139 0102 C7F30807 		ubfx	r7, r7, #0, #9
ARM GAS  /tmp/ccqUXb8n.s 			page 227


 6140              	.LVL906:
 6141 0106 002F     		cmp	r7, #0
 6142 0108 95D0     		beq	.L560
4047:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_TINY
 6143              		.loc 1 4047 0 is_stmt 0 discriminator 1
 6144 010a 226A     		ldr	r2, [r4, #32]
 6145 010c B242     		cmp	r2, r6
 6146 010e 92D0     		beq	.L560
4050:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 6147              		.loc 1 4050 0 is_stmt 1
 6148 0110 94F91430 		ldrsb	r3, [r4, #20]
 6149 0114 002B     		cmp	r3, #0
 6150 0116 11DB     		blt	.L600
 6151              	.L563:
4055:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 6152              		.loc 1 4055 0
 6153 0118 0123     		movs	r3, #1
 6154 011a 3246     		mov	r2, r6
 6155 011c 04F13001 		add	r1, r4, #48
 6156 0120 0398     		ldr	r0, [sp, #12]
 6157 0122 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 6158 0124 FFF7FEFF 		bl	disk_read
 6159              	.LVL907:
 6160 0128 E0B9     		cbnz	r0, .L601
4057:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 6161              		.loc 1 4057 0
 6162 012a 2662     		str	r6, [r4, #32]
 6163 012c 83E7     		b	.L560
 6164              	.LVL908:
 6165              	.L599:
4045:Middlewares/Third_Party/FatFs/src/ff.c **** 				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 6166              		.loc 1 4045 0 discriminator 1
 6167 012e 0225     		movs	r5, #2
 6168              	.LVL909:
 6169 0130 6575     		strb	r5, [r4, #21]
 6170 0132 2946     		mov	r1, r5
 6171 0134 4046     		mov	r0, r8
 6172              	.LVL910:
 6173 0136 FFF7FEFF 		bl	unlock_fs
 6174              	.LVL911:
 6175 013a 80E7     		b	.L551
 6176              	.LVL912:
 6177              	.L600:
4051:Middlewares/Third_Party/FatFs/src/ff.c **** 						fp->flag &= (BYTE)~FA_DIRTY;
 6178              		.loc 1 4051 0
 6179 013c 0123     		movs	r3, #1
 6180 013e 04F13001 		add	r1, r4, #48
 6181 0142 98F80100 		ldrb	r0, [r8, #1]	@ zero_extendqisi2
 6182 0146 FFF7FEFF 		bl	disk_write
 6183              	.LVL913:
 6184 014a 20B9     		cbnz	r0, .L602
4052:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 6185              		.loc 1 4052 0
 6186 014c 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 6187 014e 03F07F03 		and	r3, r3, #127
 6188 0152 2375     		strb	r3, [r4, #20]
 6189 0154 E0E7     		b	.L563
ARM GAS  /tmp/ccqUXb8n.s 			page 228


 6190              	.L602:
4051:Middlewares/Third_Party/FatFs/src/ff.c **** 						fp->flag &= (BYTE)~FA_DIRTY;
 6191              		.loc 1 4051 0 discriminator 1
 6192 0156 0125     		movs	r5, #1
 6193              	.LVL914:
 6194 0158 6575     		strb	r5, [r4, #21]
 6195 015a 2946     		mov	r1, r5
 6196 015c 0398     		ldr	r0, [sp, #12]
 6197 015e FFF7FEFF 		bl	unlock_fs
 6198              	.LVL915:
 6199 0162 6CE7     		b	.L551
 6200              	.LVL916:
 6201              	.L601:
4055:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 6202              		.loc 1 4055 0 discriminator 1
 6203 0164 0125     		movs	r5, #1
 6204              	.LVL917:
 6205 0166 6575     		strb	r5, [r4, #21]
 6206 0168 2946     		mov	r1, r5
 6207 016a 0398     		ldr	r0, [sp, #12]
 6208 016c FFF7FEFF 		bl	unlock_fs
 6209              	.LVL918:
 6210 0170 65E7     		b	.L551
 6211              	.LVL919:
 6212              	.L552:
4069:Middlewares/Third_Party/FatFs/src/ff.c **** 			ofs = fp->obj.objsize;
 6213              		.loc 1 4069 0
 6214 0172 E368     		ldr	r3, [r4, #12]
 6215 0174 B342     		cmp	r3, r6
 6216 0176 04D2     		bcs	.L566
4069:Middlewares/Third_Party/FatFs/src/ff.c **** 			ofs = fp->obj.objsize;
 6217              		.loc 1 4069 0 is_stmt 0 discriminator 1
 6218 0178 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
 6219 017a 12F0020F 		tst	r2, #2
 6220 017e 00D1     		bne	.L566
4070:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 6221              		.loc 1 4070 0 is_stmt 1
 6222 0180 1E46     		mov	r6, r3
 6223              	.LVL920:
 6224              	.L566:
4072:Middlewares/Third_Party/FatFs/src/ff.c **** 		fp->fptr = nsect = 0;
 6225              		.loc 1 4072 0
 6226 0182 A369     		ldr	r3, [r4, #24]
 6227              	.LVL921:
4073:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ofs) {
 6228              		.loc 1 4073 0
 6229 0184 0022     		movs	r2, #0
 6230 0186 A261     		str	r2, [r4, #24]
4074:Middlewares/Third_Party/FatFs/src/ff.c **** 			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 6231              		.loc 1 4074 0
 6232 0188 002E     		cmp	r6, #0
 6233 018a 7BD0     		beq	.L590
4075:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ifptr > 0 &&
 6234              		.loc 1 4075 0
 6235 018c 039A     		ldr	r2, [sp, #12]
 6236 018e B2F80A80 		ldrh	r8, [r2, #10]
 6237 0192 4FEA4828 		lsl	r8, r8, #9
ARM GAS  /tmp/ccqUXb8n.s 			page 229


 6238              	.LVL922:
4076:Middlewares/Third_Party/FatFs/src/ff.c **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 6239              		.loc 1 4076 0
 6240 0196 73B1     		cbz	r3, .L568
4077:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 6241              		.loc 1 4077 0 discriminator 1
 6242 0198 721E     		subs	r2, r6, #1
 6243 019a B2FBF8F2 		udiv	r2, r2, r8
 6244 019e 013B     		subs	r3, r3, #1
 6245              	.LVL923:
 6246 01a0 B3FBF8F1 		udiv	r1, r3, r8
4076:Middlewares/Third_Party/FatFs/src/ff.c **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 6247              		.loc 1 4076 0 discriminator 1
 6248 01a4 8A42     		cmp	r2, r1
 6249 01a6 06D3     		bcc	.L568
4078:Middlewares/Third_Party/FatFs/src/ff.c **** 				ofs -= fp->fptr;
 6250              		.loc 1 4078 0
 6251 01a8 C8F10002 		rsb	r2, r8, #0
 6252 01ac 1340     		ands	r3, r3, r2
 6253              	.LVL924:
 6254 01ae A361     		str	r3, [r4, #24]
4079:Middlewares/Third_Party/FatFs/src/ff.c **** 				clst = fp->clust;
 6255              		.loc 1 4079 0
 6256 01b0 F61A     		subs	r6, r6, r3
 6257              	.LVL925:
4080:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {									/* When seek to back cluster, */
 6258              		.loc 1 4080 0
 6259 01b2 E769     		ldr	r7, [r4, #28]
 6260              	.LVL926:
 6261 01b4 02E0     		b	.L569
 6262              	.LVL927:
 6263              	.L568:
4082:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
 6264              		.loc 1 4082 0
 6265 01b6 A768     		ldr	r7, [r4, #8]
 6266              	.LVL928:
4084:Middlewares/Third_Party/FatFs/src/ff.c **** 					clst = create_chain(&fp->obj, 0);
 6267              		.loc 1 4084 0
 6268 01b8 17B1     		cbz	r7, .L603
 6269              	.L570:
4091:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 6270              		.loc 1 4091 0
 6271 01ba E761     		str	r7, [r4, #28]
 6272              	.L569:
4093:Middlewares/Third_Party/FatFs/src/ff.c **** 				while (ofs > bcs) {						/* Cluster following loop */
 6273              		.loc 1 4093 0
 6274 01bc 4FBB     		cbnz	r7, .L573
 6275 01be 62E0     		b	.L567
 6276              	.L603:
4085:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 1) ABORT(fs, FR_INT_ERR);
 6277              		.loc 1 4085 0
 6278 01c0 0021     		movs	r1, #0
 6279 01c2 2046     		mov	r0, r4
 6280 01c4 FFF7FEFF 		bl	create_chain
 6281              	.LVL929:
 6282 01c8 0746     		mov	r7, r0
 6283              	.LVL930:
ARM GAS  /tmp/ccqUXb8n.s 			page 230


4086:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 6284              		.loc 1 4086 0
 6285 01ca 0128     		cmp	r0, #1
 6286 01cc 04D0     		beq	.L604
4087:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->obj.sclust = clst;
 6287              		.loc 1 4087 0
 6288 01ce B0F1FF3F 		cmp	r0, #-1
 6289 01d2 08D0     		beq	.L605
4088:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 6290              		.loc 1 4088 0
 6291 01d4 A060     		str	r0, [r4, #8]
 6292 01d6 F0E7     		b	.L570
 6293              	.L604:
4086:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 6294              		.loc 1 4086 0 discriminator 1
 6295 01d8 0225     		movs	r5, #2
 6296              	.LVL931:
 6297 01da 6575     		strb	r5, [r4, #21]
 6298 01dc 2946     		mov	r1, r5
 6299 01de 0398     		ldr	r0, [sp, #12]
 6300              	.LVL932:
 6301 01e0 FFF7FEFF 		bl	unlock_fs
 6302              	.LVL933:
 6303 01e4 2BE7     		b	.L551
 6304              	.LVL934:
 6305              	.L605:
4087:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->obj.sclust = clst;
 6306              		.loc 1 4087 0 discriminator 1
 6307 01e6 0125     		movs	r5, #1
 6308              	.LVL935:
 6309 01e8 6575     		strb	r5, [r4, #21]
 6310 01ea 2946     		mov	r1, r5
 6311 01ec 0398     		ldr	r0, [sp, #12]
 6312              	.LVL936:
 6313 01ee FFF7FEFF 		bl	unlock_fs
 6314              	.LVL937:
 6315 01f2 24E7     		b	.L551
 6316              	.LVL938:
 6317              	.L574:
4109:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 6318              		.loc 1 4109 0
 6319 01f4 3946     		mov	r1, r7
 6320 01f6 0198     		ldr	r0, [sp, #4]
 6321 01f8 FFF7FEFF 		bl	get_fat
 6322              	.LVL939:
 6323 01fc 0746     		mov	r7, r0
 6324              	.LVL940:
 6325              	.L576:
4111:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 6326              		.loc 1 4111 0
 6327 01fe B7F1FF3F 		cmp	r7, #-1
 6328 0202 2AD0     		beq	.L606
4112:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->clust = clst;
 6329              		.loc 1 4112 0
 6330 0204 012F     		cmp	r7, #1
 6331 0206 2FD9     		bls	.L578
4112:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->clust = clst;
ARM GAS  /tmp/ccqUXb8n.s 			page 231


 6332              		.loc 1 4112 0 is_stmt 0 discriminator 2
 6333 0208 039B     		ldr	r3, [sp, #12]
 6334 020a 9B69     		ldr	r3, [r3, #24]
 6335 020c BB42     		cmp	r3, r7
 6336 020e 2BD9     		bls	.L578
4113:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 6337              		.loc 1 4113 0 is_stmt 1
 6338 0210 E761     		str	r7, [r4, #28]
 6339              	.LVL941:
 6340              	.L573:
4094:Middlewares/Third_Party/FatFs/src/ff.c **** 					ofs -= bcs; fp->fptr += bcs;
 6341              		.loc 1 4094 0
 6342 0212 4645     		cmp	r6, r8
 6343 0214 10D9     		bls	.L575
4095:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
 6344              		.loc 1 4095 0
 6345 0216 A6EB0806 		sub	r6, r6, r8
 6346              	.LVL942:
 6347 021a A369     		ldr	r3, [r4, #24]
 6348 021c 4344     		add	r3, r3, r8
 6349 021e A361     		str	r3, [r4, #24]
4097:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize t
 6350              		.loc 1 4097 0
 6351 0220 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 6352 0222 13F0020F 		tst	r3, #2
 6353 0226 E5D0     		beq	.L574
4102:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (clst == 0) {				/* Clip file size in case of disk full */
 6354              		.loc 1 4102 0
 6355 0228 3946     		mov	r1, r7
 6356 022a 0198     		ldr	r0, [sp, #4]
 6357 022c FFF7FEFF 		bl	create_chain
 6358              	.LVL943:
4103:Middlewares/Third_Party/FatFs/src/ff.c **** 							ofs = 0; break;
 6359              		.loc 1 4103 0
 6360 0230 0746     		mov	r7, r0
 6361 0232 0028     		cmp	r0, #0
 6362 0234 E3D1     		bne	.L576
4104:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
 6363              		.loc 1 4104 0
 6364 0236 0026     		movs	r6, #0
 6365              	.LVL944:
 6366              	.L575:
4115:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (ofs % SS(fs)) {
 6367              		.loc 1 4115 0
 6368 0238 A369     		ldr	r3, [r4, #24]
 6369 023a 3344     		add	r3, r3, r6
 6370 023c A361     		str	r3, [r4, #24]
4116:Middlewares/Third_Party/FatFs/src/ff.c **** 					nsect = clust2sect(fs, clst);	/* Current sector */
 6371              		.loc 1 4116 0
 6372 023e C6F30803 		ubfx	r3, r6, #0, #9
 6373 0242 002B     		cmp	r3, #0
 6374 0244 40D0     		beq	.L592
4117:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (!nsect) ABORT(fs, FR_INT_ERR);
 6375              		.loc 1 4117 0
 6376 0246 DDF80C80 		ldr	r8, [sp, #12]
 6377              	.LVL945:
 6378 024a 3946     		mov	r1, r7
ARM GAS  /tmp/ccqUXb8n.s 			page 232


 6379 024c 4046     		mov	r0, r8
 6380 024e FFF7FEFF 		bl	clust2sect
 6381              	.LVL946:
4118:Middlewares/Third_Party/FatFs/src/ff.c **** 					nsect += (DWORD)(ofs / SS(fs));
 6382              		.loc 1 4118 0
 6383 0252 80B1     		cbz	r0, .L607
4119:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 6384              		.loc 1 4119 0
 6385 0254 00EB5627 		add	r7, r0, r6, lsr #9
 6386              	.LVL947:
 6387 0258 15E0     		b	.L567
 6388              	.LVL948:
 6389              	.L606:
4111:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 6390              		.loc 1 4111 0 discriminator 1
 6391 025a 0125     		movs	r5, #1
 6392              	.LVL949:
 6393 025c 6575     		strb	r5, [r4, #21]
 6394 025e 2946     		mov	r1, r5
 6395 0260 0398     		ldr	r0, [sp, #12]
 6396              	.LVL950:
 6397 0262 FFF7FEFF 		bl	unlock_fs
 6398              	.LVL951:
 6399 0266 EAE6     		b	.L551
 6400              	.LVL952:
 6401              	.L578:
4112:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->clust = clst;
 6402              		.loc 1 4112 0 discriminator 3
 6403 0268 0225     		movs	r5, #2
 6404              	.LVL953:
 6405 026a 6575     		strb	r5, [r4, #21]
 6406 026c 2946     		mov	r1, r5
 6407 026e 0398     		ldr	r0, [sp, #12]
 6408              	.LVL954:
 6409 0270 FFF7FEFF 		bl	unlock_fs
 6410              	.LVL955:
 6411 0274 E3E6     		b	.L551
 6412              	.LVL956:
 6413              	.L607:
4118:Middlewares/Third_Party/FatFs/src/ff.c **** 					nsect += (DWORD)(ofs / SS(fs));
 6414              		.loc 1 4118 0 discriminator 1
 6415 0276 0225     		movs	r5, #2
 6416              	.LVL957:
 6417 0278 6575     		strb	r5, [r4, #21]
 6418 027a 2946     		mov	r1, r5
 6419 027c 4046     		mov	r0, r8
 6420              	.LVL958:
 6421 027e FFF7FEFF 		bl	unlock_fs
 6422              	.LVL959:
 6423 0282 DCE6     		b	.L551
 6424              	.LVL960:
 6425              	.L590:
4073:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ofs) {
 6426              		.loc 1 4073 0
 6427 0284 0027     		movs	r7, #0
 6428              	.LVL961:
 6429              	.L567:
ARM GAS  /tmp/ccqUXb8n.s 			page 233


4123:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->obj.objsize = fp->fptr;
 6430              		.loc 1 4123 0
 6431 0286 A369     		ldr	r3, [r4, #24]
 6432 0288 E268     		ldr	r2, [r4, #12]
 6433 028a 9342     		cmp	r3, r2
 6434 028c 04D9     		bls	.L582
4124:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->flag |= FA_MODIFIED;
 6435              		.loc 1 4124 0
 6436 028e E360     		str	r3, [r4, #12]
4125:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 6437              		.loc 1 4125 0
 6438 0290 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
 6439 0292 42F04002 		orr	r2, r2, #64
 6440 0296 2275     		strb	r2, [r4, #20]
 6441              	.L582:
4127:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_TINY
 6442              		.loc 1 4127 0
 6443 0298 C3F30803 		ubfx	r3, r3, #0, #9
 6444 029c 002B     		cmp	r3, #0
 6445 029e 3FF4CAAE 		beq	.L560
4127:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_TINY
 6446              		.loc 1 4127 0 is_stmt 0 discriminator 1
 6447 02a2 226A     		ldr	r2, [r4, #32]
 6448 02a4 BA42     		cmp	r2, r7
 6449 02a6 3FF4C6AE 		beq	.L560
4130:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 6450              		.loc 1 4130 0 is_stmt 1
 6451 02aa 94F91430 		ldrsb	r3, [r4, #20]
 6452 02ae 002B     		cmp	r3, #0
 6453 02b0 0CDB     		blt	.L608
 6454              	.L583:
4135:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 6455              		.loc 1 4135 0
 6456 02b2 0123     		movs	r3, #1
 6457 02b4 3A46     		mov	r2, r7
 6458 02b6 04F13001 		add	r1, r4, #48
 6459 02ba 0398     		ldr	r0, [sp, #12]
 6460 02bc 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 6461 02be FFF7FEFF 		bl	disk_read
 6462              	.LVL962:
 6463 02c2 B8B9     		cbnz	r0, .L609
4137:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 6464              		.loc 1 4137 0
 6465 02c4 2762     		str	r7, [r4, #32]
 6466 02c6 B6E6     		b	.L560
 6467              	.LVL963:
 6468              	.L592:
4073:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ofs) {
 6469              		.loc 1 4073 0
 6470 02c8 0027     		movs	r7, #0
 6471              	.LVL964:
 6472 02ca DCE7     		b	.L567
 6473              	.LVL965:
 6474              	.L608:
4131:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
 6475              		.loc 1 4131 0
 6476 02cc 0123     		movs	r3, #1
ARM GAS  /tmp/ccqUXb8n.s 			page 234


 6477 02ce 04F13001 		add	r1, r4, #48
 6478 02d2 0398     		ldr	r0, [sp, #12]
 6479 02d4 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 6480 02d6 FFF7FEFF 		bl	disk_write
 6481              	.LVL966:
 6482 02da 20B9     		cbnz	r0, .L610
4132:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 6483              		.loc 1 4132 0
 6484 02dc 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 6485 02de 03F07F03 		and	r3, r3, #127
 6486 02e2 2375     		strb	r3, [r4, #20]
 6487 02e4 E5E7     		b	.L583
 6488              	.L610:
4131:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
 6489              		.loc 1 4131 0 discriminator 1
 6490 02e6 0125     		movs	r5, #1
 6491              	.LVL967:
 6492 02e8 6575     		strb	r5, [r4, #21]
 6493 02ea 2946     		mov	r1, r5
 6494 02ec 0398     		ldr	r0, [sp, #12]
 6495 02ee FFF7FEFF 		bl	unlock_fs
 6496              	.LVL968:
 6497 02f2 A4E6     		b	.L551
 6498              	.LVL969:
 6499              	.L609:
4135:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 6500              		.loc 1 4135 0 discriminator 1
 6501 02f4 0125     		movs	r5, #1
 6502              	.LVL970:
 6503 02f6 6575     		strb	r5, [r4, #21]
 6504 02f8 2946     		mov	r1, r5
 6505 02fa 0398     		ldr	r0, [sp, #12]
 6506 02fc FFF7FEFF 		bl	unlock_fs
 6507              	.LVL971:
 6508 0300 9DE6     		b	.L551
 6509              	.LVL972:
 6510              	.L588:
4037:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 6511              		.loc 1 4037 0
 6512 0302 1125     		movs	r5, #17
 6513              	.LVL973:
 6514 0304 97E6     		b	.L560
 6515              		.cfi_endproc
 6516              	.LFE187:
 6518              		.section	.text.f_opendir,"ax",%progbits
 6519              		.align	1
 6520              		.global	f_opendir
 6521              		.syntax unified
 6522              		.thumb
 6523              		.thumb_func
 6524              		.fpu fpv5-sp-d16
 6526              	f_opendir:
 6527              	.LFB188:
4155:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 6528              		.loc 1 4155 0
 6529              		.cfi_startproc
 6530              		@ args = 0, pretend = 0, frame = 16
ARM GAS  /tmp/ccqUXb8n.s 			page 235


 6531              		@ frame_needed = 0, uses_anonymous_args = 0
 6532              	.LVL974:
 6533 0000 30B5     		push	{r4, r5, lr}
 6534              	.LCFI83:
 6535              		.cfi_def_cfa_offset 12
 6536              		.cfi_offset 4, -12
 6537              		.cfi_offset 5, -8
 6538              		.cfi_offset 14, -4
 6539 0002 85B0     		sub	sp, sp, #20
 6540              	.LCFI84:
 6541              		.cfi_def_cfa_offset 32
 6542 0004 0191     		str	r1, [sp, #4]
4162:Middlewares/Third_Party/FatFs/src/ff.c **** 
 6543              		.loc 1 4162 0
 6544 0006 0028     		cmp	r0, #0
 6545 0008 41D0     		beq	.L619
 6546 000a 0546     		mov	r5, r0
 6547              	.LVL975:
4166:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 6548              		.loc 1 4166 0
 6549 000c 0022     		movs	r2, #0
 6550 000e 03A9     		add	r1, sp, #12
 6551              	.LVL976:
 6552 0010 01A8     		add	r0, sp, #4
 6553              	.LVL977:
 6554 0012 FFF7FEFF 		bl	find_volume
 6555              	.LVL978:
4167:Middlewares/Third_Party/FatFs/src/ff.c **** 		obj->fs = fs;
 6556              		.loc 1 4167 0
 6557 0016 0446     		mov	r4, r0
 6558 0018 48B1     		cbz	r0, .L624
 6559              	.L613:
4209:Middlewares/Third_Party/FatFs/src/ff.c **** 
 6560              		.loc 1 4209 0
 6561 001a 0CB1     		cbz	r4, .L618
 6562              	.L617:
4209:Middlewares/Third_Party/FatFs/src/ff.c **** 
 6563              		.loc 1 4209 0 is_stmt 0 discriminator 1
 6564 001c 0023     		movs	r3, #0
 6565 001e 2B60     		str	r3, [r5]
 6566              	.L618:
4211:Middlewares/Third_Party/FatFs/src/ff.c **** }
 6567              		.loc 1 4211 0 is_stmt 1
 6568 0020 2146     		mov	r1, r4
 6569 0022 0398     		ldr	r0, [sp, #12]
 6570 0024 FFF7FEFF 		bl	unlock_fs
 6571              	.LVL979:
 6572              	.L612:
4212:Middlewares/Third_Party/FatFs/src/ff.c **** 
 6573              		.loc 1 4212 0
 6574 0028 2046     		mov	r0, r4
 6575 002a 05B0     		add	sp, sp, #20
 6576              	.LCFI85:
 6577              		.cfi_remember_state
 6578              		.cfi_def_cfa_offset 12
 6579              		@ sp needed
 6580 002c 30BD     		pop	{r4, r5, pc}
ARM GAS  /tmp/ccqUXb8n.s 			page 236


 6581              	.LVL980:
 6582              	.L624:
 6583              	.LCFI86:
 6584              		.cfi_restore_state
4168:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
 6585              		.loc 1 4168 0
 6586 002e 039B     		ldr	r3, [sp, #12]
 6587 0030 2B60     		str	r3, [r5]
4170:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {						/* Follow completed */
 6588              		.loc 1 4170 0
 6589 0032 0199     		ldr	r1, [sp, #4]
 6590 0034 2846     		mov	r0, r5
 6591 0036 FFF7FEFF 		bl	follow_path
 6592              	.LVL981:
4171:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 6593              		.loc 1 4171 0
 6594 003a 0446     		mov	r4, r0
 6595 003c 18BB     		cbnz	r0, .L614
4172:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 6596              		.loc 1 4172 0
 6597 003e 95F92F30 		ldrsb	r3, [r5, #47]
 6598 0042 002B     		cmp	r3, #0
 6599 0044 08DB     		blt	.L615
4173:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 6600              		.loc 1 4173 0
 6601 0046 AB79     		ldrb	r3, [r5, #6]	@ zero_extendqisi2
 6602 0048 13F0100F 		tst	r3, #16
 6603 004c 1AD0     		beq	.L620
4185:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 6604              		.loc 1 4185 0
 6605 004e 296A     		ldr	r1, [r5, #32]
 6606 0050 0398     		ldr	r0, [sp, #12]
 6607 0052 FFF7FEFF 		bl	ld_clust
 6608              	.LVL982:
 6609 0056 A860     		str	r0, [r5, #8]
 6610              	.L615:
4192:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = dir_sdi(dp, 0);			/* Rewind directory */
 6611              		.loc 1 4192 0
 6612 0058 039B     		ldr	r3, [sp, #12]
 6613 005a DB88     		ldrh	r3, [r3, #6]
 6614 005c AB80     		strh	r3, [r5, #4]	@ movhi
4193:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
 6615              		.loc 1 4193 0
 6616 005e 0021     		movs	r1, #0
 6617 0060 2846     		mov	r0, r5
 6618 0062 FFF7FEFF 		bl	dir_sdi
 6619              	.LVL983:
4195:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (obj->sclust) {
 6620              		.loc 1 4195 0
 6621 0066 0446     		mov	r4, r0
 6622 0068 68B9     		cbnz	r0, .L614
4196:Middlewares/Third_Party/FatFs/src/ff.c **** 						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 6623              		.loc 1 4196 0
 6624 006a AB68     		ldr	r3, [r5, #8]
 6625 006c 13B9     		cbnz	r3, .L625
4200:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 6626              		.loc 1 4200 0
ARM GAS  /tmp/ccqUXb8n.s 			page 237


 6627 006e 0023     		movs	r3, #0
 6628 0070 2B61     		str	r3, [r5, #16]
 6629 0072 08E0     		b	.L614
 6630              	.L625:
4197:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 6631              		.loc 1 4197 0
 6632 0074 0021     		movs	r1, #0
 6633 0076 2846     		mov	r0, r5
 6634 0078 FFF7FEFF 		bl	inc_lock
 6635              	.LVL984:
 6636 007c 2861     		str	r0, [r5, #16]
4198:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else {
 6637              		.loc 1 4198 0
 6638 007e 10B9     		cbnz	r0, .L614
 6639              	.LVL985:
 6640 0080 1224     		movs	r4, #18
 6641 0082 CAE7     		b	.L613
 6642              	.LVL986:
 6643              	.L620:
4188:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 6644              		.loc 1 4188 0
 6645 0084 0524     		movs	r4, #5
 6646              	.LVL987:
 6647              	.L614:
4207:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 6648              		.loc 1 4207 0
 6649 0086 042C     		cmp	r4, #4
 6650 0088 C7D1     		bne	.L613
 6651              	.LVL988:
 6652 008a 0524     		movs	r4, #5
 6653 008c C6E7     		b	.L617
 6654              	.LVL989:
 6655              	.L619:
4162:Middlewares/Third_Party/FatFs/src/ff.c **** 
 6656              		.loc 1 4162 0
 6657 008e 0924     		movs	r4, #9
 6658 0090 CAE7     		b	.L612
 6659              		.cfi_endproc
 6660              	.LFE188:
 6662              		.section	.text.f_closedir,"ax",%progbits
 6663              		.align	1
 6664              		.global	f_closedir
 6665              		.syntax unified
 6666              		.thumb
 6667              		.thumb_func
 6668              		.fpu fpv5-sp-d16
 6670              	f_closedir:
 6671              	.LFB189:
4224:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 6672              		.loc 1 4224 0
 6673              		.cfi_startproc
 6674              		@ args = 0, pretend = 0, frame = 8
 6675              		@ frame_needed = 0, uses_anonymous_args = 0
 6676              	.LVL990:
 6677 0000 30B5     		push	{r4, r5, lr}
 6678              	.LCFI87:
 6679              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/ccqUXb8n.s 			page 238


 6680              		.cfi_offset 4, -12
 6681              		.cfi_offset 5, -8
 6682              		.cfi_offset 14, -4
 6683 0002 83B0     		sub	sp, sp, #12
 6684              	.LCFI88:
 6685              		.cfi_def_cfa_offset 24
 6686 0004 0546     		mov	r5, r0
4229:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 6687              		.loc 1 4229 0
 6688 0006 01A9     		add	r1, sp, #4
 6689 0008 FFF7FEFF 		bl	validate
 6690              	.LVL991:
4230:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
 6691              		.loc 1 4230 0
 6692 000c 0446     		mov	r4, r0
 6693 000e 40B9     		cbnz	r0, .L627
4232:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = dec_lock(dp->obj.lockid);
 6694              		.loc 1 4232 0
 6695 0010 2869     		ldr	r0, [r5, #16]
 6696              	.LVL992:
 6697 0012 48B9     		cbnz	r0, .L631
 6698              	.L628:
 6699              	.LVL993:
4235:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 6700              		.loc 1 4235 0
 6701 0014 0CB9     		cbnz	r4, .L629
4238:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 6702              		.loc 1 4238 0
 6703 0016 0023     		movs	r3, #0
 6704 0018 2B60     		str	r3, [r5]
 6705              	.L629:
4241:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 6706              		.loc 1 4241 0
 6707 001a 0021     		movs	r1, #0
 6708 001c 0198     		ldr	r0, [sp, #4]
 6709 001e FFF7FEFF 		bl	unlock_fs
 6710              	.LVL994:
 6711              	.L627:
4245:Middlewares/Third_Party/FatFs/src/ff.c **** 
 6712              		.loc 1 4245 0
 6713 0022 2046     		mov	r0, r4
 6714 0024 03B0     		add	sp, sp, #12
 6715              	.LCFI89:
 6716              		.cfi_remember_state
 6717              		.cfi_def_cfa_offset 12
 6718              		@ sp needed
 6719 0026 30BD     		pop	{r4, r5, pc}
 6720              	.LVL995:
 6721              	.L631:
 6722              	.LCFI90:
 6723              		.cfi_restore_state
4233:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 6724              		.loc 1 4233 0
 6725 0028 FFF7FEFF 		bl	dec_lock
 6726              	.LVL996:
 6727 002c 0446     		mov	r4, r0
 6728              	.LVL997:
ARM GAS  /tmp/ccqUXb8n.s 			page 239


 6729 002e F1E7     		b	.L628
 6730              		.cfi_endproc
 6731              	.LFE189:
 6733              		.section	.text.f_readdir,"ax",%progbits
 6734              		.align	1
 6735              		.global	f_readdir
 6736              		.syntax unified
 6737              		.thumb
 6738              		.thumb_func
 6739              		.fpu fpv5-sp-d16
 6741              	f_readdir:
 6742              	.LFB190:
4258:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 6743              		.loc 1 4258 0
 6744              		.cfi_startproc
 6745              		@ args = 0, pretend = 0, frame = 8
 6746              		@ frame_needed = 0, uses_anonymous_args = 0
 6747              	.LVL998:
 6748 0000 70B5     		push	{r4, r5, r6, lr}
 6749              	.LCFI91:
 6750              		.cfi_def_cfa_offset 16
 6751              		.cfi_offset 4, -16
 6752              		.cfi_offset 5, -12
 6753              		.cfi_offset 6, -8
 6754              		.cfi_offset 14, -4
 6755 0002 82B0     		sub	sp, sp, #8
 6756              	.LCFI92:
 6757              		.cfi_def_cfa_offset 24
 6758 0004 0546     		mov	r5, r0
 6759 0006 0E46     		mov	r6, r1
4264:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 6760              		.loc 1 4264 0
 6761 0008 01A9     		add	r1, sp, #4
 6762              	.LVL999:
 6763 000a FFF7FEFF 		bl	validate
 6764              	.LVL1000:
4265:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!fno) {
 6765              		.loc 1 4265 0
 6766 000e 0446     		mov	r4, r0
 6767 0010 90B9     		cbnz	r0, .L633
4266:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 6768              		.loc 1 4266 0
 6769 0012 C6B1     		cbz	r6, .L638
4270:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 6770              		.loc 1 4270 0
 6771 0014 0021     		movs	r1, #0
 6772 0016 2846     		mov	r0, r5
 6773              	.LVL1001:
 6774 0018 FFF7FEFF 		bl	dir_read
 6775              	.LVL1002:
4271:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) {				/* A valid entry is found */
 6776              		.loc 1 4271 0
 6777 001c 0428     		cmp	r0, #4
 6778 001e 00D0     		beq	.L635
4272:Middlewares/Third_Party/FatFs/src/ff.c **** 				get_fileinfo(dp, fno);		/* Get the object information */
 6779              		.loc 1 4272 0
 6780 0020 B8B9     		cbnz	r0, .L636
ARM GAS  /tmp/ccqUXb8n.s 			page 240


 6781              	.L635:
4273:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = dir_next(dp, 0);		/* Increment index for next */
 6782              		.loc 1 4273 0
 6783 0022 3146     		mov	r1, r6
 6784 0024 2846     		mov	r0, r5
 6785              	.LVL1003:
 6786 0026 FFF7FEFF 		bl	get_fileinfo
 6787              	.LVL1004:
4274:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 6788              		.loc 1 4274 0
 6789 002a 0021     		movs	r1, #0
 6790 002c 2846     		mov	r0, r5
 6791 002e FFF7FEFF 		bl	dir_next
 6792              	.LVL1005:
4275:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 6793              		.loc 1 4275 0
 6794 0032 0428     		cmp	r0, #4
 6795 0034 00D0     		beq	.L633
4274:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 6796              		.loc 1 4274 0
 6797 0036 0446     		mov	r4, r0
 6798              	.LVL1006:
 6799              	.L633:
4280:Middlewares/Third_Party/FatFs/src/ff.c **** }
 6800              		.loc 1 4280 0
 6801 0038 2146     		mov	r1, r4
 6802 003a 0198     		ldr	r0, [sp, #4]
 6803 003c FFF7FEFF 		bl	unlock_fs
 6804              	.LVL1007:
4281:Middlewares/Third_Party/FatFs/src/ff.c **** 
 6805              		.loc 1 4281 0
 6806 0040 2046     		mov	r0, r4
 6807 0042 02B0     		add	sp, sp, #8
 6808              	.LCFI93:
 6809              		.cfi_remember_state
 6810              		.cfi_def_cfa_offset 16
 6811              		@ sp needed
 6812 0044 70BD     		pop	{r4, r5, r6, pc}
 6813              	.LVL1008:
 6814              	.L638:
 6815              	.LCFI94:
 6816              		.cfi_restore_state
4267:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
 6817              		.loc 1 4267 0
 6818 0046 0021     		movs	r1, #0
 6819 0048 2846     		mov	r0, r5
 6820              	.LVL1009:
 6821 004a FFF7FEFF 		bl	dir_sdi
 6822              	.LVL1010:
 6823 004e 0446     		mov	r4, r0
 6824              	.LVL1011:
 6825 0050 F2E7     		b	.L633
 6826              	.LVL1012:
 6827              	.L636:
4270:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 6828              		.loc 1 4270 0
 6829 0052 0446     		mov	r4, r0
ARM GAS  /tmp/ccqUXb8n.s 			page 241


 6830 0054 F0E7     		b	.L633
 6831              		.cfi_endproc
 6832              	.LFE190:
 6834              		.section	.text.f_stat,"ax",%progbits
 6835              		.align	1
 6836              		.global	f_stat
 6837              		.syntax unified
 6838              		.thumb
 6839              		.thumb_func
 6840              		.fpu fpv5-sp-d16
 6842              	f_stat:
 6843              	.LFB191:
4346:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 6844              		.loc 1 4346 0
 6845              		.cfi_startproc
 6846              		@ args = 0, pretend = 0, frame = 56
 6847              		@ frame_needed = 0, uses_anonymous_args = 0
 6848              	.LVL1013:
 6849 0000 30B5     		push	{r4, r5, lr}
 6850              	.LCFI95:
 6851              		.cfi_def_cfa_offset 12
 6852              		.cfi_offset 4, -12
 6853              		.cfi_offset 5, -8
 6854              		.cfi_offset 14, -4
 6855 0002 8FB0     		sub	sp, sp, #60
 6856              	.LCFI96:
 6857              		.cfi_def_cfa_offset 72
 6858 0004 0190     		str	r0, [sp, #4]
 6859 0006 0D46     		mov	r5, r1
4353:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 6860              		.loc 1 4353 0
 6861 0008 0022     		movs	r2, #0
 6862 000a 02A9     		add	r1, sp, #8
 6863              	.LVL1014:
 6864 000c 01A8     		add	r0, sp, #4
 6865              	.LVL1015:
 6866 000e FFF7FEFF 		bl	find_volume
 6867              	.LVL1016:
4354:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(dj.obj.fs);
 6868              		.loc 1 4354 0
 6869 0012 0446     		mov	r4, r0
 6870 0014 30B1     		cbz	r0, .L643
 6871              	.LVL1017:
 6872              	.L640:
4367:Middlewares/Third_Party/FatFs/src/ff.c **** }
 6873              		.loc 1 4367 0
 6874 0016 2146     		mov	r1, r4
 6875 0018 0298     		ldr	r0, [sp, #8]
 6876 001a FFF7FEFF 		bl	unlock_fs
 6877              	.LVL1018:
4368:Middlewares/Third_Party/FatFs/src/ff.c **** 
 6878              		.loc 1 4368 0
 6879 001e 2046     		mov	r0, r4
 6880 0020 0FB0     		add	sp, sp, #60
 6881              	.LCFI97:
 6882              		.cfi_remember_state
 6883              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/ccqUXb8n.s 			page 242


 6884              		@ sp needed
 6885 0022 30BD     		pop	{r4, r5, pc}
 6886              	.LVL1019:
 6887              	.L643:
 6888              	.LCFI98:
 6889              		.cfi_restore_state
4356:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {				/* Follow completed */
 6890              		.loc 1 4356 0
 6891 0024 0199     		ldr	r1, [sp, #4]
 6892 0026 02A8     		add	r0, sp, #8
 6893              	.LVL1020:
 6894 0028 FFF7FEFF 		bl	follow_path
 6895              	.LVL1021:
4357:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 6896              		.loc 1 4357 0
 6897 002c 0446     		mov	r4, r0
 6898 002e 0028     		cmp	r0, #0
 6899 0030 F1D1     		bne	.L640
4358:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_INVALID_NAME;
 6900              		.loc 1 4358 0
 6901 0032 9DF93730 		ldrsb	r3, [sp, #55]
 6902 0036 002B     		cmp	r3, #0
 6903 0038 06DB     		blt	.L641
4361:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 6904              		.loc 1 4361 0
 6905 003a 002D     		cmp	r5, #0
 6906 003c EBD0     		beq	.L640
4361:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 6907              		.loc 1 4361 0 is_stmt 0 discriminator 1
 6908 003e 2946     		mov	r1, r5
 6909 0040 02A8     		add	r0, sp, #8
 6910              	.LVL1022:
 6911 0042 FFF7FEFF 		bl	get_fileinfo
 6912              	.LVL1023:
 6913 0046 E6E7     		b	.L640
 6914              	.LVL1024:
 6915              	.L641:
4359:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {							/* Found an object */
 6916              		.loc 1 4359 0 is_stmt 1
 6917 0048 0624     		movs	r4, #6
 6918 004a E4E7     		b	.L640
 6919              		.cfi_endproc
 6920              	.LFE191:
 6922              		.section	.text.f_getfree,"ax",%progbits
 6923              		.align	1
 6924              		.global	f_getfree
 6925              		.syntax unified
 6926              		.thumb
 6927              		.thumb_func
 6928              		.fpu fpv5-sp-d16
 6930              	f_getfree:
 6931              	.LFB192:
4382:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 6932              		.loc 1 4382 0
 6933              		.cfi_startproc
 6934              		@ args = 0, pretend = 0, frame = 32
 6935              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccqUXb8n.s 			page 243


 6936              	.LVL1025:
 6937 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 6938              	.LCFI99:
 6939              		.cfi_def_cfa_offset 32
 6940              		.cfi_offset 4, -32
 6941              		.cfi_offset 5, -28
 6942              		.cfi_offset 6, -24
 6943              		.cfi_offset 7, -20
 6944              		.cfi_offset 8, -16
 6945              		.cfi_offset 9, -12
 6946              		.cfi_offset 10, -8
 6947              		.cfi_offset 14, -4
 6948 0004 88B0     		sub	sp, sp, #32
 6949              	.LCFI100:
 6950              		.cfi_def_cfa_offset 64
 6951 0006 0190     		str	r0, [sp, #4]
 6952 0008 8A46     		mov	r10, r1
 6953 000a 1446     		mov	r4, r2
4392:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 6954              		.loc 1 4392 0
 6955 000c 0022     		movs	r2, #0
 6956              	.LVL1026:
 6957 000e 07A9     		add	r1, sp, #28
 6958              	.LVL1027:
 6959 0010 01A8     		add	r0, sp, #4
 6960              	.LVL1028:
 6961 0012 FFF7FEFF 		bl	find_volume
 6962              	.LVL1029:
4393:Middlewares/Third_Party/FatFs/src/ff.c **** 		*fatfs = fs;				/* Return ptr to the fs object */
 6963              		.loc 1 4393 0
 6964 0016 0746     		mov	r7, r0
 6965 0018 0028     		cmp	r0, #0
 6966 001a 5ED1     		bne	.L645
4394:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* If free_clst is valid, return it without full cluster scan */
 6967              		.loc 1 4394 0
 6968 001c 079B     		ldr	r3, [sp, #28]
 6969 001e 2360     		str	r3, [r4]
4396:Middlewares/Third_Party/FatFs/src/ff.c **** 			*nclst = fs->free_clst;
 6970              		.loc 1 4396 0
 6971 0020 5A69     		ldr	r2, [r3, #20]
 6972 0022 9D69     		ldr	r5, [r3, #24]
 6973 0024 A91E     		subs	r1, r5, #2
 6974 0026 8A42     		cmp	r2, r1
 6975 0028 08D9     		bls	.L660
 6976              	.LVL1030:
4401:Middlewares/Third_Party/FatFs/src/ff.c **** 				clst = 2; obj.fs = fs;
 6977              		.loc 1 4401 0
 6978 002a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6979 002c 012A     		cmp	r2, #1
 6980 002e 08D0     		beq	.L661
 6981              	.LVL1031:
4429:Middlewares/Third_Party/FatFs/src/ff.c **** 					i = 0; p = 0;
 6982              		.loc 1 4429 0
 6983 0030 D3F82490 		ldr	r9, [r3, #36]
 6984              	.LVL1032:
4430:Middlewares/Third_Party/FatFs/src/ff.c **** 					do {
 6985              		.loc 1 4430 0
ARM GAS  /tmp/ccqUXb8n.s 			page 244


 6986 0034 0024     		movs	r4, #0
 6987              	.LVL1033:
 6988 0036 2646     		mov	r6, r4
4400:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 6989              		.loc 1 4400 0
 6990 0038 A046     		mov	r8, r4
 6991 003a 35E0     		b	.L656
 6992              	.LVL1034:
 6993              	.L660:
4397:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
 6994              		.loc 1 4397 0
 6995 003c CAF80020 		str	r2, [r10]
 6996 0040 4BE0     		b	.L645
 6997              	.LVL1035:
 6998              	.L661:
4402:Middlewares/Third_Party/FatFs/src/ff.c **** 				do {
 6999              		.loc 1 4402 0
 7000 0042 0293     		str	r3, [sp, #8]
 7001 0044 0224     		movs	r4, #2
 7002              	.LVL1036:
4400:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 7003              		.loc 1 4400 0
 7004 0046 4FF00008 		mov	r8, #0
 7005 004a 04E0     		b	.L650
 7006              	.LVL1037:
 7007              	.L649:
4408:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
 7008              		.loc 1 4408 0
 7009 004c 0134     		adds	r4, r4, #1
 7010              	.LVL1038:
 7011 004e 079B     		ldr	r3, [sp, #28]
 7012 0050 9B69     		ldr	r3, [r3, #24]
 7013 0052 A342     		cmp	r3, r4
 7014 0054 38D9     		bls	.L648
 7015              	.LVL1039:
 7016              	.L650:
4404:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 7017              		.loc 1 4404 0
 7018 0056 2146     		mov	r1, r4
 7019 0058 02A8     		add	r0, sp, #8
 7020 005a FFF7FEFF 		bl	get_fat
 7021              	.LVL1040:
4405:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (stat == 1) { res = FR_INT_ERR; break; }
 7022              		.loc 1 4405 0
 7023 005e B0F1FF3F 		cmp	r0, #-1
 7024 0062 30D0     		beq	.L657
4406:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (stat == 0) nfree++;
 7025              		.loc 1 4406 0
 7026 0064 0128     		cmp	r0, #1
 7027 0066 40D0     		beq	.L658
4407:Middlewares/Third_Party/FatFs/src/ff.c **** 				} while (++clst < fs->n_fatent);
 7028              		.loc 1 4407 0
 7029 0068 0028     		cmp	r0, #0
 7030 006a EFD1     		bne	.L649
4407:Middlewares/Third_Party/FatFs/src/ff.c **** 				} while (++clst < fs->n_fatent);
 7031              		.loc 1 4407 0 is_stmt 0 discriminator 1
 7032 006c 08F10108 		add	r8, r8, #1
ARM GAS  /tmp/ccqUXb8n.s 			page 245


 7033              	.LVL1041:
 7034 0070 ECE7     		b	.L649
 7035              	.LVL1042:
 7036              	.L662:
4433:Middlewares/Third_Party/FatFs/src/ff.c **** 							if (res != FR_OK) break;
 7037              		.loc 1 4433 0 is_stmt 1
 7038 0072 09F10106 		add	r6, r9, #1
 7039              	.LVL1043:
 7040 0076 4946     		mov	r1, r9
 7041 0078 0798     		ldr	r0, [sp, #28]
 7042 007a FFF7FEFF 		bl	move_window
 7043              	.LVL1044:
4434:Middlewares/Third_Party/FatFs/src/ff.c **** 							p = fs->win;
 7044              		.loc 1 4434 0
 7045 007e 0746     		mov	r7, r0
 7046 0080 10BB     		cbnz	r0, .L648
4435:Middlewares/Third_Party/FatFs/src/ff.c **** 							i = SS(fs);
 7047              		.loc 1 4435 0
 7048 0082 079C     		ldr	r4, [sp, #28]
 7049              	.LVL1045:
 7050 0084 3434     		adds	r4, r4, #52
 7051              	.LVL1046:
4433:Middlewares/Third_Party/FatFs/src/ff.c **** 							if (res != FR_OK) break;
 7052              		.loc 1 4433 0
 7053 0086 B146     		mov	r9, r6
4436:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
 7054              		.loc 1 4436 0
 7055 0088 4FF40076 		mov	r6, #512
 7056              	.LVL1047:
 7057 008c 0EE0     		b	.L651
 7058              	.LVL1048:
 7059              	.L663:
4439:Middlewares/Third_Party/FatFs/src/ff.c **** 							p += 2; i -= 2;
 7060              		.loc 1 4439 0
 7061 008e 2046     		mov	r0, r4
 7062 0090 FFF7FEFF 		bl	ld_word
 7063              	.LVL1049:
 7064 0094 08B9     		cbnz	r0, .L653
4439:Middlewares/Third_Party/FatFs/src/ff.c **** 							p += 2; i -= 2;
 7065              		.loc 1 4439 0 is_stmt 0 discriminator 1
 7066 0096 08F10108 		add	r8, r8, #1
 7067              	.LVL1050:
 7068              	.L653:
4440:Middlewares/Third_Party/FatFs/src/ff.c **** 						} else {
 7069              		.loc 1 4440 0 is_stmt 1
 7070 009a 0234     		adds	r4, r4, #2
 7071              	.LVL1051:
 7072 009c 023E     		subs	r6, r6, #2
 7073              	.LVL1052:
 7074 009e 01E0     		b	.L654
 7075              	.L655:
4443:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
 7076              		.loc 1 4443 0
 7077 00a0 0434     		adds	r4, r4, #4
 7078              	.LVL1053:
 7079 00a2 043E     		subs	r6, r6, #4
 7080              	.LVL1054:
ARM GAS  /tmp/ccqUXb8n.s 			page 246


 7081              	.L654:
4445:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 7082              		.loc 1 4445 0
 7083 00a4 013D     		subs	r5, r5, #1
 7084              	.LVL1055:
 7085 00a6 0FD0     		beq	.L648
 7086              	.LVL1056:
 7087              	.L656:
4432:Middlewares/Third_Party/FatFs/src/ff.c **** 							res = move_window(fs, sect++);
 7088              		.loc 1 4432 0
 7089 00a8 002E     		cmp	r6, #0
 7090 00aa E2D0     		beq	.L662
 7091              	.LVL1057:
 7092              	.L651:
4438:Middlewares/Third_Party/FatFs/src/ff.c **** 							if (ld_word(p) == 0) nfree++;
 7093              		.loc 1 4438 0
 7094 00ac 079B     		ldr	r3, [sp, #28]
 7095 00ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7096 00b0 022B     		cmp	r3, #2
 7097 00b2 ECD0     		beq	.L663
4442:Middlewares/Third_Party/FatFs/src/ff.c **** 							p += 4; i -= 4;
 7098              		.loc 1 4442 0
 7099 00b4 2046     		mov	r0, r4
 7100 00b6 FFF7FEFF 		bl	ld_dword
 7101              	.LVL1058:
 7102 00ba 30F07043 		bics	r3, r0, #-268435456
 7103 00be EFD1     		bne	.L655
4442:Middlewares/Third_Party/FatFs/src/ff.c **** 							p += 4; i -= 4;
 7104              		.loc 1 4442 0 is_stmt 0 discriminator 1
 7105 00c0 08F10108 		add	r8, r8, #1
 7106              	.LVL1059:
 7107 00c4 ECE7     		b	.L655
 7108              	.LVL1060:
 7109              	.L657:
4405:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (stat == 1) { res = FR_INT_ERR; break; }
 7110              		.loc 1 4405 0 is_stmt 1
 7111 00c6 0127     		movs	r7, #1
 7112              	.LVL1061:
 7113              	.L648:
4448:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->free_clst = nfree;	/* Now free_clst is valid */
 7114              		.loc 1 4448 0
 7115 00c8 CAF80080 		str	r8, [r10]
4449:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 7116              		.loc 1 4449 0
 7117 00cc 079B     		ldr	r3, [sp, #28]
 7118 00ce C3F81480 		str	r8, [r3, #20]
4450:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 7119              		.loc 1 4450 0
 7120 00d2 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 7121 00d4 42F00102 		orr	r2, r2, #1
 7122 00d8 1A71     		strb	r2, [r3, #4]
 7123              	.LVL1062:
 7124              	.L645:
4454:Middlewares/Third_Party/FatFs/src/ff.c **** }
 7125              		.loc 1 4454 0
 7126 00da 3946     		mov	r1, r7
 7127 00dc 0798     		ldr	r0, [sp, #28]
ARM GAS  /tmp/ccqUXb8n.s 			page 247


 7128 00de FFF7FEFF 		bl	unlock_fs
 7129              	.LVL1063:
4455:Middlewares/Third_Party/FatFs/src/ff.c **** 
 7130              		.loc 1 4455 0
 7131 00e2 3846     		mov	r0, r7
 7132 00e4 08B0     		add	sp, sp, #32
 7133              	.LCFI101:
 7134              		.cfi_remember_state
 7135              		.cfi_def_cfa_offset 32
 7136              		@ sp needed
 7137 00e6 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 7138              	.LVL1064:
 7139              	.L658:
 7140              	.LCFI102:
 7141              		.cfi_restore_state
4406:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (stat == 0) nfree++;
 7142              		.loc 1 4406 0
 7143 00ea 0227     		movs	r7, #2
 7144 00ec ECE7     		b	.L648
 7145              		.cfi_endproc
 7146              	.LFE192:
 7148              		.section	.text.f_truncate,"ax",%progbits
 7149              		.align	1
 7150              		.global	f_truncate
 7151              		.syntax unified
 7152              		.thumb
 7153              		.thumb_func
 7154              		.fpu fpv5-sp-d16
 7156              	f_truncate:
 7157              	.LFB193:
4467:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 7158              		.loc 1 4467 0
 7159              		.cfi_startproc
 7160              		@ args = 0, pretend = 0, frame = 8
 7161              		@ frame_needed = 0, uses_anonymous_args = 0
 7162              	.LVL1065:
 7163 0000 30B5     		push	{r4, r5, lr}
 7164              	.LCFI103:
 7165              		.cfi_def_cfa_offset 12
 7166              		.cfi_offset 4, -12
 7167              		.cfi_offset 5, -8
 7168              		.cfi_offset 14, -4
 7169 0002 83B0     		sub	sp, sp, #12
 7170              	.LCFI104:
 7171              		.cfi_def_cfa_offset 24
 7172 0004 0546     		mov	r5, r0
4473:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
 7173              		.loc 1 4473 0
 7174 0006 01A9     		add	r1, sp, #4
 7175 0008 FFF7FEFF 		bl	validate
 7176              	.LVL1066:
4474:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 7177              		.loc 1 4474 0
 7178 000c 0446     		mov	r4, r0
 7179 000e 18BB     		cbnz	r0, .L665
4474:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 7180              		.loc 1 4474 0 is_stmt 0 discriminator 2
ARM GAS  /tmp/ccqUXb8n.s 			page 248


 7181 0010 6C7D     		ldrb	r4, [r5, #21]	@ zero_extendqisi2
 7182              	.LVL1067:
 7183 0012 0CBB     		cbnz	r4, .L665
4475:Middlewares/Third_Party/FatFs/src/ff.c **** 
 7184              		.loc 1 4475 0 is_stmt 1
 7185 0014 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 7186 0016 13F0020F 		tst	r3, #2
 7187 001a 24D0     		beq	.L679
4477:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 7188              		.loc 1 4477 0
 7189 001c AB69     		ldr	r3, [r5, #24]
 7190 001e EA68     		ldr	r2, [r5, #12]
 7191 0020 9342     		cmp	r3, r2
 7192 0022 14D2     		bcs	.L669
4478:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 7193              		.loc 1 4478 0
 7194 0024 2BBB     		cbnz	r3, .L670
4479:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->obj.sclust = 0;
 7195              		.loc 1 4479 0
 7196 0026 0022     		movs	r2, #0
 7197 0028 A968     		ldr	r1, [r5, #8]
 7198 002a 2846     		mov	r0, r5
 7199 002c FFF7FEFF 		bl	remove_chain
 7200              	.LVL1068:
 7201 0030 0446     		mov	r4, r0
 7202              	.LVL1069:
4480:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {				/* When truncate a part of the file, remove remaining clusters */
 7203              		.loc 1 4480 0
 7204 0032 0023     		movs	r3, #0
 7205 0034 AB60     		str	r3, [r5, #8]
 7206              	.LVL1070:
 7207              	.L671:
4490:Middlewares/Third_Party/FatFs/src/ff.c **** 		fp->flag |= FA_MODIFIED;
 7208              		.loc 1 4490 0
 7209 0036 AB69     		ldr	r3, [r5, #24]
 7210 0038 EB60     		str	r3, [r5, #12]
4491:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_TINY
 7211              		.loc 1 4491 0
 7212 003a 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 7213 003c 43F04003 		orr	r3, r3, #64
 7214 0040 2B75     		strb	r3, [r5, #20]
4493:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
 7215              		.loc 1 4493 0
 7216 0042 14B9     		cbnz	r4, .L673
4493:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
 7217              		.loc 1 4493 0 is_stmt 0 discriminator 1
 7218 0044 13F0800F 		tst	r3, #128
 7219 0048 2DD1     		bne	.L680
 7220              	.L673:
4501:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 7221              		.loc 1 4501 0 is_stmt 1
 7222 004a 002C     		cmp	r4, #0
 7223 004c 3AD1     		bne	.L674
 7224              	.L669:
4504:Middlewares/Third_Party/FatFs/src/ff.c **** }
 7225              		.loc 1 4504 0
 7226 004e 2146     		mov	r1, r4
ARM GAS  /tmp/ccqUXb8n.s 			page 249


 7227 0050 0198     		ldr	r0, [sp, #4]
 7228 0052 FFF7FEFF 		bl	unlock_fs
 7229              	.LVL1071:
 7230 0056 03E0     		b	.L667
 7231              	.LVL1072:
 7232              	.L665:
4474:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 7233              		.loc 1 4474 0 discriminator 3
 7234 0058 2146     		mov	r1, r4
 7235 005a 0198     		ldr	r0, [sp, #4]
 7236 005c FFF7FEFF 		bl	unlock_fs
 7237              	.LVL1073:
 7238              	.L667:
4505:Middlewares/Third_Party/FatFs/src/ff.c **** 
 7239              		.loc 1 4505 0
 7240 0060 2046     		mov	r0, r4
 7241 0062 03B0     		add	sp, sp, #12
 7242              	.LCFI105:
 7243              		.cfi_remember_state
 7244              		.cfi_def_cfa_offset 12
 7245              		@ sp needed
 7246 0064 30BD     		pop	{r4, r5, pc}
 7247              	.LVL1074:
 7248              	.L679:
 7249              	.LCFI106:
 7250              		.cfi_restore_state
4475:Middlewares/Third_Party/FatFs/src/ff.c **** 
 7251              		.loc 1 4475 0 discriminator 1
 7252 0066 0721     		movs	r1, #7
 7253 0068 0198     		ldr	r0, [sp, #4]
 7254 006a FFF7FEFF 		bl	unlock_fs
 7255              	.LVL1075:
 7256 006e 0724     		movs	r4, #7
 7257              	.LVL1076:
 7258 0070 F6E7     		b	.L667
 7259              	.LVL1077:
 7260              	.L670:
4482:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = FR_OK;
 7261              		.loc 1 4482 0
 7262 0072 E969     		ldr	r1, [r5, #28]
 7263 0074 2846     		mov	r0, r5
 7264 0076 FFF7FEFF 		bl	get_fat
 7265              	.LVL1078:
4484:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ncl == 1) res = FR_INT_ERR;
 7266              		.loc 1 4484 0
 7267 007a B0F1FF3F 		cmp	r0, #-1
 7268 007e 0ED0     		beq	.L681
 7269              	.L672:
 7270              	.LVL1079:
4485:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK && ncl < fs->n_fatent) {
 7271              		.loc 1 4485 0
 7272 0080 0128     		cmp	r0, #1
 7273 0082 0ED0     		beq	.L676
4486:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = remove_chain(&fp->obj, ncl, fp->clust);
 7274              		.loc 1 4486 0
 7275 0084 002C     		cmp	r4, #0
 7276 0086 D6D1     		bne	.L671
ARM GAS  /tmp/ccqUXb8n.s 			page 250


4486:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = remove_chain(&fp->obj, ncl, fp->clust);
 7277              		.loc 1 4486 0 is_stmt 0 discriminator 1
 7278 0088 019B     		ldr	r3, [sp, #4]
 7279 008a 9B69     		ldr	r3, [r3, #24]
 7280 008c 8342     		cmp	r3, r0
 7281 008e D2D9     		bls	.L671
4487:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 7282              		.loc 1 4487 0 is_stmt 1
 7283 0090 EA69     		ldr	r2, [r5, #28]
 7284 0092 0146     		mov	r1, r0
 7285 0094 2846     		mov	r0, r5
 7286              	.LVL1080:
 7287 0096 FFF7FEFF 		bl	remove_chain
 7288              	.LVL1081:
 7289 009a 0446     		mov	r4, r0
 7290              	.LVL1082:
 7291 009c CBE7     		b	.L671
 7292              	.LVL1083:
 7293              	.L681:
4484:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ncl == 1) res = FR_INT_ERR;
 7294              		.loc 1 4484 0
 7295 009e 0124     		movs	r4, #1
 7296 00a0 EEE7     		b	.L672
 7297              	.LVL1084:
 7298              	.L676:
4485:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK && ncl < fs->n_fatent) {
 7299              		.loc 1 4485 0
 7300 00a2 0224     		movs	r4, #2
 7301              	.LVL1085:
 7302 00a4 C7E7     		b	.L671
 7303              	.LVL1086:
 7304              	.L680:
4494:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_DISK_ERR;
 7305              		.loc 1 4494 0
 7306 00a6 0123     		movs	r3, #1
 7307 00a8 2A6A     		ldr	r2, [r5, #32]
 7308 00aa 05F13001 		add	r1, r5, #48
 7309 00ae 0198     		ldr	r0, [sp, #4]
 7310 00b0 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 7311 00b2 FFF7FEFF 		bl	disk_write
 7312              	.LVL1087:
 7313 00b6 20B9     		cbnz	r0, .L677
4497:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 7314              		.loc 1 4497 0
 7315 00b8 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 7316 00ba 03F07F03 		and	r3, r3, #127
 7317 00be 2B75     		strb	r3, [r5, #20]
 7318 00c0 C3E7     		b	.L673
 7319              	.L677:
4495:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
 7320              		.loc 1 4495 0
 7321 00c2 0124     		movs	r4, #1
 7322              	.LVL1088:
 7323              	.L674:
4501:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 7324              		.loc 1 4501 0 discriminator 1
 7325 00c4 6C75     		strb	r4, [r5, #21]
ARM GAS  /tmp/ccqUXb8n.s 			page 251


 7326 00c6 2146     		mov	r1, r4
 7327 00c8 0198     		ldr	r0, [sp, #4]
 7328 00ca FFF7FEFF 		bl	unlock_fs
 7329              	.LVL1089:
 7330 00ce C7E7     		b	.L667
 7331              		.cfi_endproc
 7332              	.LFE193:
 7334              		.section	.text.f_unlink,"ax",%progbits
 7335              		.align	1
 7336              		.global	f_unlink
 7337              		.syntax unified
 7338              		.thumb
 7339              		.thumb_func
 7340              		.fpu fpv5-sp-d16
 7342              	f_unlink:
 7343              	.LFB194:
4517:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 7344              		.loc 1 4517 0
 7345              		.cfi_startproc
 7346              		@ args = 0, pretend = 0, frame = 112
 7347              		@ frame_needed = 0, uses_anonymous_args = 0
 7348              	.LVL1090:
 7349 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 7350              	.LCFI107:
 7351              		.cfi_def_cfa_offset 20
 7352              		.cfi_offset 4, -20
 7353              		.cfi_offset 5, -16
 7354              		.cfi_offset 6, -12
 7355              		.cfi_offset 7, -8
 7356              		.cfi_offset 14, -4
 7357 0002 9DB0     		sub	sp, sp, #116
 7358              	.LCFI108:
 7359              		.cfi_def_cfa_offset 136
 7360 0004 0190     		str	r0, [sp, #4]
 7361              	.LVL1091:
4529:Middlewares/Third_Party/FatFs/src/ff.c **** 	dj.obj.fs = fs;
 7362              		.loc 1 4529 0
 7363 0006 0222     		movs	r2, #2
 7364 0008 03A9     		add	r1, sp, #12
 7365 000a 01A8     		add	r0, sp, #4
 7366              	.LVL1092:
 7367 000c FFF7FEFF 		bl	find_volume
 7368              	.LVL1093:
4530:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 7369              		.loc 1 4530 0
 7370 0010 039B     		ldr	r3, [sp, #12]
 7371 0012 1093     		str	r3, [sp, #64]
4531:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
 7372              		.loc 1 4531 0
 7373 0014 0446     		mov	r4, r0
 7374 0016 30B1     		cbz	r0, .L692
 7375              	.LVL1094:
 7376              	.L683:
4599:Middlewares/Third_Party/FatFs/src/ff.c **** }
 7377              		.loc 1 4599 0
 7378 0018 2146     		mov	r1, r4
 7379 001a 0398     		ldr	r0, [sp, #12]
ARM GAS  /tmp/ccqUXb8n.s 			page 252


 7380 001c FFF7FEFF 		bl	unlock_fs
 7381              	.LVL1095:
4600:Middlewares/Third_Party/FatFs/src/ff.c **** 
 7382              		.loc 1 4600 0
 7383 0020 2046     		mov	r0, r4
 7384 0022 1DB0     		add	sp, sp, #116
 7385              	.LCFI109:
 7386              		.cfi_remember_state
 7387              		.cfi_def_cfa_offset 20
 7388              		@ sp needed
 7389 0024 F0BD     		pop	{r4, r5, r6, r7, pc}
 7390              	.LVL1096:
 7391              	.L692:
 7392              	.LCFI110:
 7393              		.cfi_restore_state
4533:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 7394              		.loc 1 4533 0
 7395 0026 0199     		ldr	r1, [sp, #4]
 7396 0028 10A8     		add	r0, sp, #64
 7397              	.LVL1097:
 7398 002a FFF7FEFF 		bl	follow_path
 7399              	.LVL1098:
4538:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 7400              		.loc 1 4538 0
 7401 002e 0446     		mov	r4, r0
 7402 0030 20B9     		cbnz	r0, .L684
4538:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 7403              		.loc 1 4538 0 is_stmt 0 discriminator 1
 7404 0032 0221     		movs	r1, #2
 7405 0034 10A8     		add	r0, sp, #64
 7406              	.LVL1099:
 7407 0036 FFF7FEFF 		bl	chk_lock
 7408              	.LVL1100:
 7409 003a 0446     		mov	r4, r0
 7410              	.LVL1101:
 7411              	.L684:
4540:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {
 7412              		.loc 1 4540 0 is_stmt 1
 7413 003c 002C     		cmp	r4, #0
 7414 003e EBD1     		bne	.L683
4541:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 7415              		.loc 1 4541 0
 7416 0040 9DF96F30 		ldrsb	r3, [sp, #111]
 7417 0044 002B     		cmp	r3, #0
 7418 0046 1EDB     		blt	.L688
4544:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = FR_DENIED;		/* Cannot remove R/O object */
 7419              		.loc 1 4544 0
 7420 0048 9DF84660 		ldrb	r6, [sp, #70]	@ zero_extendqisi2
 7421 004c 16F0010F 		tst	r6, #1
 7422 0050 30D1     		bne	.L689
4558:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 7423              		.loc 1 4558 0
 7424 0052 039F     		ldr	r7, [sp, #12]
 7425 0054 1899     		ldr	r1, [sp, #96]
 7426 0056 3846     		mov	r0, r7
 7427 0058 FFF7FEFF 		bl	ld_clust
 7428              	.LVL1102:
ARM GAS  /tmp/ccqUXb8n.s 			page 253


 7429 005c 0546     		mov	r5, r0
 7430              	.LVL1103:
4560:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_RPATH != 0
 7431              		.loc 1 4560 0
 7432 005e 16F0100F 		tst	r6, #16
 7433 0062 12D0     		beq	.L685
4567:Middlewares/Third_Party/FatFs/src/ff.c **** 						sdj.obj.sclust = dclst;
 7434              		.loc 1 4567 0
 7435 0064 0497     		str	r7, [sp, #16]
4568:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 7436              		.loc 1 4568 0
 7437 0066 0690     		str	r0, [sp, #24]
4575:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (res == FR_OK) {
 7438              		.loc 1 4575 0
 7439 0068 0021     		movs	r1, #0
 7440 006a 04A8     		add	r0, sp, #16
 7441              	.LVL1104:
 7442 006c FFF7FEFF 		bl	dir_sdi
 7443              	.LVL1105:
4576:Middlewares/Third_Party/FatFs/src/ff.c **** 							res = dir_read(&sdj, 0);			/* Read an item */
 7444              		.loc 1 4576 0
 7445 0070 0446     		mov	r4, r0
 7446 0072 50B9     		cbnz	r0, .L685
4577:Middlewares/Third_Party/FatFs/src/ff.c **** 							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 7447              		.loc 1 4577 0
 7448 0074 0021     		movs	r1, #0
 7449 0076 04A8     		add	r0, sp, #16
 7450              	.LVL1106:
 7451 0078 FFF7FEFF 		bl	dir_read
 7452              	.LVL1107:
4578:Middlewares/Third_Party/FatFs/src/ff.c **** 							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 7453              		.loc 1 4578 0
 7454 007c 0446     		mov	r4, r0
 7455 007e E0B1     		cbz	r0, .L690
4579:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
 7456              		.loc 1 4579 0
 7457 0080 0428     		cmp	r0, #4
 7458 0082 02D1     		bne	.L685
 7459 0084 03E0     		b	.L686
 7460              	.LVL1108:
 7461              	.L688:
4520:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
 7462              		.loc 1 4520 0
 7463 0086 0025     		movs	r5, #0
4542:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
 7464              		.loc 1 4542 0
 7465 0088 0624     		movs	r4, #6
 7466              	.LVL1109:
 7467              	.L685:
4584:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = dir_remove(&dj);			/* Remove the directory entry */
 7468              		.loc 1 4584 0
 7469 008a 002C     		cmp	r4, #0
 7470 008c C4D1     		bne	.L683
 7471              	.LVL1110:
 7472              	.L686:
4585:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 7473              		.loc 1 4585 0
ARM GAS  /tmp/ccqUXb8n.s 			page 254


 7474 008e 10A8     		add	r0, sp, #64
 7475 0090 FFF7FEFF 		bl	dir_remove
 7476              	.LVL1111:
4586:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 7477              		.loc 1 4586 0
 7478 0094 0446     		mov	r4, r0
 7479 0096 2B1C     		adds	r3, r5, #0
 7480 0098 18BF     		it	ne
 7481 009a 0123     		movne	r3, #1
 7482 009c 0028     		cmp	r0, #0
 7483 009e 0CBF     		ite	eq
 7484 00a0 1846     		moveq	r0, r3
 7485 00a2 0020     		movne	r0, #0
 7486              	.LVL1112:
 7487 00a4 58B9     		cbnz	r0, .L693
 7488              	.L687:
 7489              	.LVL1113:
4593:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 7490              		.loc 1 4593 0
 7491 00a6 002C     		cmp	r4, #0
 7492 00a8 B6D1     		bne	.L683
4593:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 7493              		.loc 1 4593 0 is_stmt 0 discriminator 1
 7494 00aa 0398     		ldr	r0, [sp, #12]
 7495 00ac FFF7FEFF 		bl	sync_fs
 7496              	.LVL1114:
 7497 00b0 0446     		mov	r4, r0
 7498              	.LVL1115:
 7499 00b2 B1E7     		b	.L683
 7500              	.LVL1116:
 7501              	.L689:
4520:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
 7502              		.loc 1 4520 0 is_stmt 1
 7503 00b4 0025     		movs	r5, #0
4545:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 7504              		.loc 1 4545 0
 7505 00b6 0724     		movs	r4, #7
 7506              	.LVL1117:
 7507 00b8 E7E7     		b	.L685
 7508              	.LVL1118:
 7509              	.L690:
4578:Middlewares/Third_Party/FatFs/src/ff.c **** 							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 7510              		.loc 1 4578 0
 7511 00ba 0724     		movs	r4, #7
 7512 00bc E5E7     		b	.L685
 7513              	.LVL1119:
 7514              	.L693:
4590:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 7515              		.loc 1 4590 0
 7516 00be 0022     		movs	r2, #0
 7517 00c0 2946     		mov	r1, r5
 7518 00c2 10A8     		add	r0, sp, #64
 7519 00c4 FFF7FEFF 		bl	remove_chain
 7520              	.LVL1120:
 7521 00c8 0446     		mov	r4, r0
 7522              	.LVL1121:
 7523 00ca ECE7     		b	.L687
ARM GAS  /tmp/ccqUXb8n.s 			page 255


 7524              		.cfi_endproc
 7525              	.LFE194:
 7527              		.section	.text.f_mkdir,"ax",%progbits
 7528              		.align	1
 7529              		.global	f_mkdir
 7530              		.syntax unified
 7531              		.thumb
 7532              		.thumb_func
 7533              		.fpu fpv5-sp-d16
 7535              	f_mkdir:
 7536              	.LFB195:
4612:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 7537              		.loc 1 4612 0
 7538              		.cfi_startproc
 7539              		@ args = 0, pretend = 0, frame = 64
 7540              		@ frame_needed = 0, uses_anonymous_args = 0
 7541              	.LVL1122:
 7542 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 7543              	.LCFI111:
 7544              		.cfi_def_cfa_offset 36
 7545              		.cfi_offset 4, -36
 7546              		.cfi_offset 5, -32
 7547              		.cfi_offset 6, -28
 7548              		.cfi_offset 7, -24
 7549              		.cfi_offset 8, -20
 7550              		.cfi_offset 9, -16
 7551              		.cfi_offset 10, -12
 7552              		.cfi_offset 11, -8
 7553              		.cfi_offset 14, -4
 7554 0004 91B0     		sub	sp, sp, #68
 7555              	.LCFI112:
 7556              		.cfi_def_cfa_offset 104
 7557 0006 0190     		str	r0, [sp, #4]
4623:Middlewares/Third_Party/FatFs/src/ff.c **** 	dj.obj.fs = fs;
 7558              		.loc 1 4623 0
 7559 0008 0222     		movs	r2, #2
 7560 000a 03A9     		add	r1, sp, #12
 7561 000c 01A8     		add	r0, sp, #4
 7562              	.LVL1123:
 7563 000e FFF7FEFF 		bl	find_volume
 7564              	.LVL1124:
4624:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 7565              		.loc 1 4624 0
 7566 0012 039B     		ldr	r3, [sp, #12]
 7567 0014 0493     		str	r3, [sp, #16]
4625:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
 7568              		.loc 1 4625 0
 7569 0016 0446     		mov	r4, r0
 7570 0018 38B1     		cbz	r0, .L712
 7571              	.LVL1125:
 7572              	.L695:
4696:Middlewares/Third_Party/FatFs/src/ff.c **** }
 7573              		.loc 1 4696 0
 7574 001a 2146     		mov	r1, r4
 7575 001c 0398     		ldr	r0, [sp, #12]
 7576 001e FFF7FEFF 		bl	unlock_fs
 7577              	.LVL1126:
ARM GAS  /tmp/ccqUXb8n.s 			page 256


4697:Middlewares/Third_Party/FatFs/src/ff.c **** 
 7578              		.loc 1 4697 0
 7579 0022 2046     		mov	r0, r4
 7580 0024 11B0     		add	sp, sp, #68
 7581              	.LCFI113:
 7582              		.cfi_remember_state
 7583              		.cfi_def_cfa_offset 36
 7584              		@ sp needed
 7585 0026 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 7586              	.LVL1127:
 7587              	.L712:
 7588              	.LCFI114:
 7589              		.cfi_restore_state
4627:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 7590              		.loc 1 4627 0
 7591 002a 0199     		ldr	r1, [sp, #4]
 7592 002c 04A8     		add	r0, sp, #16
 7593              	.LVL1128:
 7594 002e FFF7FEFF 		bl	follow_path
 7595              	.LVL1129:
4628:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 7596              		.loc 1 4628 0
 7597 0032 0028     		cmp	r0, #0
 7598 0034 00F09980 		beq	.L705
4632:Middlewares/Third_Party/FatFs/src/ff.c **** 			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 7599              		.loc 1 4632 0
 7600 0038 0428     		cmp	r0, #4
 7601 003a 01D0     		beq	.L713
4627:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 7602              		.loc 1 4627 0
 7603 003c 0446     		mov	r4, r0
 7604 003e ECE7     		b	.L695
 7605              	.L713:
4633:Middlewares/Third_Party/FatFs/src/ff.c **** 			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 7606              		.loc 1 4633 0
 7607 0040 0021     		movs	r1, #0
 7608 0042 04A8     		add	r0, sp, #16
 7609              	.LVL1130:
 7610 0044 FFF7FEFF 		bl	create_chain
 7611              	.LVL1131:
4634:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = FR_OK;
 7612              		.loc 1 4634 0
 7613 0048 039A     		ldr	r2, [sp, #12]
 7614 004a 5389     		ldrh	r3, [r2, #10]
 7615 004c 5B02     		lsls	r3, r3, #9
 7616 004e 0793     		str	r3, [sp, #28]
 7617              	.LVL1132:
4636:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dcl == 1) res = FR_INT_ERR;
 7618              		.loc 1 4636 0
 7619 0050 0746     		mov	r7, r0
 7620 0052 00B9     		cbnz	r0, .L696
 7621 0054 0724     		movs	r4, #7
 7622              	.L696:
 7623              	.LVL1133:
4637:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 7624              		.loc 1 4637 0
 7625 0056 012F     		cmp	r7, #1
ARM GAS  /tmp/ccqUXb8n.s 			page 257


 7626 0058 11D0     		beq	.L714
 7627              	.LVL1134:
 7628              	.L697:
4638:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 7629              		.loc 1 4638 0
 7630 005a B7F1FF3F 		cmp	r7, #-1
 7631 005e 15D0     		beq	.L709
4639:Middlewares/Third_Party/FatFs/src/ff.c **** 			tm = GET_FATTIME();
 7632              		.loc 1 4639 0
 7633 0060 7CB1     		cbz	r4, .L715
 7634              	.LVL1135:
 7635              	.L698:
4640:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) {					/* Initialize the new directory table */
 7636              		.loc 1 4640 0
 7637 0062 FFF7FEFF 		bl	get_fattime
 7638              	.LVL1136:
 7639 0066 8246     		mov	r10, r0
 7640              	.LVL1137:
4641:Middlewares/Third_Party/FatFs/src/ff.c **** 				dsc = clust2sect(fs, dcl);
 7641              		.loc 1 4641 0
 7642 0068 94B1     		cbz	r4, .L716
 7643              	.LVL1138:
 7644              	.L699:
4664:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = dir_register(&dj);	/* Register the object to the directoy */
 7645              		.loc 1 4664 0
 7646 006a 002C     		cmp	r4, #0
 7647 006c 63D0     		beq	.L717
 7648              	.L703:
4667:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 7649              		.loc 1 4667 0
 7650 006e 002C     		cmp	r4, #0
 7651 0070 66D0     		beq	.L718
4690:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 7652              		.loc 1 4690 0
 7653 0072 0022     		movs	r2, #0
 7654 0074 3946     		mov	r1, r7
 7655 0076 04A8     		add	r0, sp, #16
 7656 0078 FFF7FEFF 		bl	remove_chain
 7657              	.LVL1139:
 7658 007c CDE7     		b	.L695
 7659              	.LVL1140:
 7660              	.L714:
4637:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 7661              		.loc 1 4637 0
 7662 007e 0224     		movs	r4, #2
 7663              	.LVL1141:
 7664 0080 EBE7     		b	.L697
 7665              	.LVL1142:
 7666              	.L715:
4639:Middlewares/Third_Party/FatFs/src/ff.c **** 			tm = GET_FATTIME();
 7667              		.loc 1 4639 0 discriminator 1
 7668 0082 1046     		mov	r0, r2
 7669              	.LVL1143:
 7670 0084 FFF7FEFF 		bl	sync_window
 7671              	.LVL1144:
 7672 0088 0446     		mov	r4, r0
 7673              	.LVL1145:
ARM GAS  /tmp/ccqUXb8n.s 			page 258


 7674 008a EAE7     		b	.L698
 7675              	.LVL1146:
 7676              	.L709:
4638:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 7677              		.loc 1 4638 0
 7678 008c 0124     		movs	r4, #1
 7679              	.LVL1147:
 7680 008e E8E7     		b	.L698
 7681              	.LVL1148:
 7682              	.L716:
4642:Middlewares/Third_Party/FatFs/src/ff.c **** 				dir = fs->win;
 7683              		.loc 1 4642 0
 7684 0090 039D     		ldr	r5, [sp, #12]
 7685 0092 3946     		mov	r1, r7
 7686 0094 2846     		mov	r0, r5
 7687              	.LVL1149:
 7688 0096 FFF7FEFF 		bl	clust2sect
 7689              	.LVL1150:
 7690 009a 0646     		mov	r6, r0
 7691              	.LVL1151:
4643:Middlewares/Third_Party/FatFs/src/ff.c **** 				mem_set(dir, 0, SS(fs));
 7692              		.loc 1 4643 0
 7693 009c 05F13409 		add	r9, r5, #52
 7694              	.LVL1152:
4644:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 7695              		.loc 1 4644 0
 7696 00a0 4FF40072 		mov	r2, #512
 7697 00a4 0021     		movs	r1, #0
 7698 00a6 4846     		mov	r0, r9
 7699              	.LVL1153:
 7700 00a8 FFF7FEFF 		bl	mem_set
 7701              	.LVL1154:
4646:Middlewares/Third_Party/FatFs/src/ff.c **** 					dir[DIR_Name] = '.';
 7702              		.loc 1 4646 0
 7703 00ac 0B22     		movs	r2, #11
 7704 00ae 2021     		movs	r1, #32
 7705 00b0 4846     		mov	r0, r9
 7706 00b2 FFF7FEFF 		bl	mem_set
 7707              	.LVL1155:
4647:Middlewares/Third_Party/FatFs/src/ff.c **** 					dir[DIR_Attr] = AM_DIR;
 7708              		.loc 1 4647 0
 7709 00b6 4FF02E0B 		mov	fp, #46
 7710 00ba 85F834B0 		strb	fp, [r5, #52]
4648:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(dir + DIR_ModTime, tm);
 7711              		.loc 1 4648 0
 7712 00be 1023     		movs	r3, #16
 7713 00c0 85F83F30 		strb	r3, [r5, #63]
4649:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_clust(fs, dir, dcl);
 7714              		.loc 1 4649 0
 7715 00c4 5146     		mov	r1, r10
 7716 00c6 05F14A00 		add	r0, r5, #74
 7717 00ca FFF7FEFF 		bl	st_dword
 7718              	.LVL1156:
4650:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 7719              		.loc 1 4650 0
 7720 00ce 3A46     		mov	r2, r7
 7721 00d0 4946     		mov	r1, r9
ARM GAS  /tmp/ccqUXb8n.s 			page 259


 7722 00d2 0398     		ldr	r0, [sp, #12]
 7723 00d4 FFF7FEFF 		bl	st_clust
 7724              	.LVL1157:
4651:Middlewares/Third_Party/FatFs/src/ff.c **** 					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 7725              		.loc 1 4651 0
 7726 00d8 05F15408 		add	r8, r5, #84
 7727 00dc 2022     		movs	r2, #32
 7728 00de 4946     		mov	r1, r9
 7729 00e0 4046     		mov	r0, r8
 7730 00e2 FFF7FEFF 		bl	mem_cpy
 7731              	.LVL1158:
4652:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 7732              		.loc 1 4652 0
 7733 00e6 85F855B0 		strb	fp, [r5, #85]
 7734 00ea 069A     		ldr	r2, [sp, #24]
 7735              	.LVL1159:
4653:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_clust(fs, dir + SZDIRE, pcl);
 7736              		.loc 1 4653 0
 7737 00ec 0398     		ldr	r0, [sp, #12]
 7738 00ee 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 7739 00f0 032B     		cmp	r3, #3
 7740 00f2 1BD0     		beq	.L719
 7741              	.LVL1160:
 7742              	.L700:
4654:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 7743              		.loc 1 4654 0
 7744 00f4 4146     		mov	r1, r8
 7745 00f6 FFF7FEFF 		bl	st_clust
 7746              	.LVL1161:
4656:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->winsect = dsc++;
 7747              		.loc 1 4656 0
 7748 00fa 039B     		ldr	r3, [sp, #12]
 7749 00fc 5D89     		ldrh	r5, [r3, #10]
 7750              	.LVL1162:
 7751              	.L701:
4656:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->winsect = dsc++;
 7752              		.loc 1 4656 0 is_stmt 0 discriminator 1
 7753 00fe 002D     		cmp	r5, #0
 7754 0100 B3D0     		beq	.L699
4657:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->wflag = 1;
 7755              		.loc 1 4657 0 is_stmt 1
 7756 0102 06F10108 		add	r8, r6, #1
 7757              	.LVL1163:
 7758 0106 039B     		ldr	r3, [sp, #12]
 7759 0108 1E63     		str	r6, [r3, #48]
4658:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = sync_window(fs);
 7760              		.loc 1 4658 0
 7761 010a 0122     		movs	r2, #1
 7762 010c DA70     		strb	r2, [r3, #3]
4659:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (res != FR_OK) break;
 7763              		.loc 1 4659 0
 7764 010e 0398     		ldr	r0, [sp, #12]
 7765 0110 FFF7FEFF 		bl	sync_window
 7766              	.LVL1164:
4660:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_set(dir, 0, SS(fs));
 7767              		.loc 1 4660 0
 7768 0114 0446     		mov	r4, r0
ARM GAS  /tmp/ccqUXb8n.s 			page 260


 7769 0116 0028     		cmp	r0, #0
 7770 0118 A7D1     		bne	.L699
4661:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 7771              		.loc 1 4661 0 discriminator 2
 7772 011a 4FF40072 		mov	r2, #512
 7773 011e 0021     		movs	r1, #0
 7774 0120 4846     		mov	r0, r9
 7775              	.LVL1165:
 7776 0122 FFF7FEFF 		bl	mem_set
 7777              	.LVL1166:
4656:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->winsect = dsc++;
 7778              		.loc 1 4656 0 discriminator 2
 7779 0126 013D     		subs	r5, r5, #1
 7780              	.LVL1167:
4657:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->wflag = 1;
 7781              		.loc 1 4657 0 discriminator 2
 7782 0128 4646     		mov	r6, r8
 7783 012a E8E7     		b	.L701
 7784              	.LVL1168:
 7785              	.L719:
4653:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_clust(fs, dir + SZDIRE, pcl);
 7786              		.loc 1 4653 0 discriminator 1
 7787 012c 836A     		ldr	r3, [r0, #40]
 7788 012e 9342     		cmp	r3, r2
 7789 0130 E0D1     		bne	.L700
4653:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_clust(fs, dir + SZDIRE, pcl);
 7790              		.loc 1 4653 0 is_stmt 0
 7791 0132 0022     		movs	r2, #0
 7792              	.LVL1169:
 7793 0134 DEE7     		b	.L700
 7794              	.LVL1170:
 7795              	.L717:
4665:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 7796              		.loc 1 4665 0 is_stmt 1
 7797 0136 04A8     		add	r0, sp, #16
 7798 0138 FFF7FEFF 		bl	dir_register
 7799              	.LVL1171:
 7800 013c 0446     		mov	r4, r0
 7801              	.LVL1172:
 7802 013e 96E7     		b	.L703
 7803              	.L718:
4680:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 7804              		.loc 1 4680 0
 7805 0140 0C9C     		ldr	r4, [sp, #48]
 7806              	.LVL1173:
4681:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_clust(fs, dir, dcl);				/* Table start cluster */
 7807              		.loc 1 4681 0
 7808 0142 5146     		mov	r1, r10
 7809 0144 04F11600 		add	r0, r4, #22
 7810 0148 FFF7FEFF 		bl	st_dword
 7811              	.LVL1174:
4682:Middlewares/Third_Party/FatFs/src/ff.c **** 					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 7812              		.loc 1 4682 0
 7813 014c 3A46     		mov	r2, r7
 7814 014e 2146     		mov	r1, r4
 7815 0150 0398     		ldr	r0, [sp, #12]
 7816 0152 FFF7FEFF 		bl	st_clust
ARM GAS  /tmp/ccqUXb8n.s 			page 261


 7817              	.LVL1175:
4683:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->wflag = 1;
 7818              		.loc 1 4683 0
 7819 0156 1023     		movs	r3, #16
 7820 0158 E372     		strb	r3, [r4, #11]
4684:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 7821              		.loc 1 4684 0
 7822 015a 039B     		ldr	r3, [sp, #12]
 7823 015c 0122     		movs	r2, #1
 7824 015e DA70     		strb	r2, [r3, #3]
4687:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 7825              		.loc 1 4687 0
 7826 0160 0398     		ldr	r0, [sp, #12]
 7827 0162 FFF7FEFF 		bl	sync_fs
 7828              	.LVL1176:
 7829 0166 0446     		mov	r4, r0
 7830              	.LVL1177:
 7831 0168 57E7     		b	.L695
 7832              	.LVL1178:
 7833              	.L705:
4628:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 7834              		.loc 1 4628 0
 7835 016a 0824     		movs	r4, #8
 7836 016c 55E7     		b	.L695
 7837              		.cfi_endproc
 7838              	.LFE195:
 7840              		.section	.text.f_rename,"ax",%progbits
 7841              		.align	1
 7842              		.global	f_rename
 7843              		.syntax unified
 7844              		.thumb
 7845              		.thumb_func
 7846              		.fpu fpv5-sp-d16
 7848              	f_rename:
 7849              	.LFB196:
4710:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 7850              		.loc 1 4710 0
 7851              		.cfi_startproc
 7852              		@ args = 0, pretend = 0, frame = 136
 7853              		@ frame_needed = 0, uses_anonymous_args = 0
 7854              	.LVL1179:
 7855 0000 30B5     		push	{r4, r5, lr}
 7856              	.LCFI115:
 7857              		.cfi_def_cfa_offset 12
 7858              		.cfi_offset 4, -12
 7859              		.cfi_offset 5, -8
 7860              		.cfi_offset 14, -4
 7861 0002 A3B0     		sub	sp, sp, #140
 7862              	.LCFI116:
 7863              		.cfi_def_cfa_offset 152
 7864 0004 0190     		str	r0, [sp, #4]
 7865 0006 22A8     		add	r0, sp, #136
 7866              	.LVL1180:
 7867 0008 40F8881D 		str	r1, [r0, #-136]!
4719:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 7868              		.loc 1 4719 0
 7869 000c FFF7FEFF 		bl	get_ldnumber
ARM GAS  /tmp/ccqUXb8n.s 			page 262


 7870              	.LVL1181:
4720:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 7871              		.loc 1 4720 0
 7872 0010 0222     		movs	r2, #2
 7873 0012 09A9     		add	r1, sp, #36
 7874 0014 01A8     		add	r0, sp, #4
 7875 0016 FFF7FEFF 		bl	find_volume
 7876              	.LVL1182:
4721:Middlewares/Third_Party/FatFs/src/ff.c **** 		djo.obj.fs = fs;
 7877              		.loc 1 4721 0
 7878 001a 0446     		mov	r4, r0
 7879 001c 30B1     		cbz	r0, .L731
 7880              	.LVL1183:
 7881              	.L721:
4799:Middlewares/Third_Party/FatFs/src/ff.c **** }
 7882              		.loc 1 4799 0
 7883 001e 2146     		mov	r1, r4
 7884 0020 0998     		ldr	r0, [sp, #36]
 7885 0022 FFF7FEFF 		bl	unlock_fs
 7886              	.LVL1184:
4800:Middlewares/Third_Party/FatFs/src/ff.c **** 
 7887              		.loc 1 4800 0
 7888 0026 2046     		mov	r0, r4
 7889 0028 23B0     		add	sp, sp, #140
 7890              	.LCFI117:
 7891              		.cfi_remember_state
 7892              		.cfi_def_cfa_offset 12
 7893              		@ sp needed
 7894 002a 30BD     		pop	{r4, r5, pc}
 7895              	.LVL1185:
 7896              	.L731:
 7897              	.LCFI118:
 7898              		.cfi_restore_state
4722:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
 7899              		.loc 1 4722 0
 7900 002c 099B     		ldr	r3, [sp, #36]
 7901 002e 1693     		str	r3, [sp, #88]
4724:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check vali
 7902              		.loc 1 4724 0
 7903 0030 0199     		ldr	r1, [sp, #4]
 7904 0032 16A8     		add	r0, sp, #88
 7905              	.LVL1186:
 7906 0034 FFF7FEFF 		bl	follow_path
 7907              	.LVL1187:
4725:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
 7908              		.loc 1 4725 0
 7909 0038 0446     		mov	r4, r0
 7910 003a 20B9     		cbnz	r0, .L722
4725:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
 7911              		.loc 1 4725 0 is_stmt 0 discriminator 1
 7912 003c 9DF88730 		ldrb	r3, [sp, #135]	@ zero_extendqisi2
 7913 0040 13F0A00F 		tst	r3, #160
 7914 0044 1ED1     		bne	.L727
 7915              	.L722:
 7916              	.LVL1188:
4727:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = chk_lock(&djo, 2);
 7917              		.loc 1 4727 0 is_stmt 1
ARM GAS  /tmp/ccqUXb8n.s 			page 263


 7918 0046 24B9     		cbnz	r4, .L723
4728:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 7919              		.loc 1 4728 0
 7920 0048 0221     		movs	r1, #2
 7921 004a 16A8     		add	r0, sp, #88
 7922 004c FFF7FEFF 		bl	chk_lock
 7923              	.LVL1189:
 7924 0050 0446     		mov	r4, r0
 7925              	.LVL1190:
 7926              	.L723:
4731:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 7927              		.loc 1 4731 0
 7928 0052 002C     		cmp	r4, #0
 7929 0054 E3D1     		bne	.L721
4758:Middlewares/Third_Party/FatFs/src/ff.c **** 				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 7930              		.loc 1 4758 0
 7931 0056 1522     		movs	r2, #21
 7932 0058 1E99     		ldr	r1, [sp, #120]
 7933 005a 0B31     		adds	r1, r1, #11
 7934 005c 03A8     		add	r0, sp, #12
 7935 005e FFF7FEFF 		bl	mem_cpy
 7936              	.LVL1191:
4759:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 7937              		.loc 1 4759 0
 7938 0062 3022     		movs	r2, #48
 7939 0064 16A9     		add	r1, sp, #88
 7940 0066 0AA8     		add	r0, sp, #40
 7941 0068 FFF7FEFF 		bl	mem_cpy
 7942              	.LVL1192:
4760:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 7943              		.loc 1 4760 0
 7944 006c 0099     		ldr	r1, [sp]
 7945 006e 0AA8     		add	r0, sp, #40
 7946 0070 FFF7FEFF 		bl	follow_path
 7947              	.LVL1193:
4761:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 7948              		.loc 1 4761 0
 7949 0074 0446     		mov	r4, r0
 7950 0076 68B9     		cbnz	r0, .L724
4762:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 7951              		.loc 1 4762 0
 7952 0078 0C9A     		ldr	r2, [sp, #48]
 7953 007a 189B     		ldr	r3, [sp, #96]
 7954 007c 9A42     		cmp	r2, r3
 7955 007e 03D0     		beq	.L732
 7956 0080 0824     		movs	r4, #8
 7957 0082 09E0     		b	.L725
 7958              	.L727:
4725:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
 7959              		.loc 1 4725 0
 7960 0084 0624     		movs	r4, #6
 7961 0086 E4E7     		b	.L723
 7962              	.L732:
4762:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 7963              		.loc 1 4762 0 discriminator 1
 7964 0088 0F9A     		ldr	r2, [sp, #60]
 7965 008a 1B9B     		ldr	r3, [sp, #108]
ARM GAS  /tmp/ccqUXb8n.s 			page 264


 7966 008c 9A42     		cmp	r2, r3
 7967 008e 10D0     		beq	.L726
 7968 0090 0824     		movs	r4, #8
 7969 0092 01E0     		b	.L725
 7970              	.L724:
4764:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = dir_register(&djn);			/* Register the new entry */
 7971              		.loc 1 4764 0
 7972 0094 0428     		cmp	r0, #4
 7973 0096 0CD0     		beq	.L726
 7974              	.LVL1194:
 7975              	.L725:
4788:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = dir_remove(&djo);		/* Remove old entry */
 7976              		.loc 1 4788 0
 7977 0098 002C     		cmp	r4, #0
 7978 009a C0D1     		bne	.L721
4789:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK) {
 7979              		.loc 1 4789 0
 7980 009c 16A8     		add	r0, sp, #88
 7981 009e FFF7FEFF 		bl	dir_remove
 7982              	.LVL1195:
4790:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = sync_fs(fs);
 7983              		.loc 1 4790 0
 7984 00a2 0446     		mov	r4, r0
 7985 00a4 0028     		cmp	r0, #0
 7986 00a6 BAD1     		bne	.L721
4791:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 7987              		.loc 1 4791 0
 7988 00a8 0998     		ldr	r0, [sp, #36]
 7989              	.LVL1196:
 7990 00aa FFF7FEFF 		bl	sync_fs
 7991              	.LVL1197:
 7992 00ae 0446     		mov	r4, r0
 7993              	.LVL1198:
 7994 00b0 B5E7     		b	.L721
 7995              	.LVL1199:
 7996              	.L726:
4765:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (res == FR_OK) {
 7997              		.loc 1 4765 0
 7998 00b2 0AA8     		add	r0, sp, #40
 7999              	.LVL1200:
 8000 00b4 FFF7FEFF 		bl	dir_register
 8001              	.LVL1201:
4766:Middlewares/Third_Party/FatFs/src/ff.c **** 						dir = djn.dir;					/* Copy information about object except name */
 8002              		.loc 1 4766 0
 8003 00b8 0446     		mov	r4, r0
 8004 00ba 0028     		cmp	r0, #0
 8005 00bc ECD1     		bne	.L725
4767:Middlewares/Third_Party/FatFs/src/ff.c **** 						mem_cpy(dir + 13, buf + 2, 19);
 8006              		.loc 1 4767 0
 8007 00be 129D     		ldr	r5, [sp, #72]
 8008              	.LVL1202:
4768:Middlewares/Third_Party/FatFs/src/ff.c **** 						dir[DIR_Attr] = buf[0] | AM_ARC;
 8009              		.loc 1 4768 0
 8010 00c0 1322     		movs	r2, #19
 8011 00c2 0DF10E01 		add	r1, sp, #14
 8012 00c6 05F10D00 		add	r0, r5, #13
 8013              	.LVL1203:
ARM GAS  /tmp/ccqUXb8n.s 			page 265


 8014 00ca FFF7FEFF 		bl	mem_cpy
 8015              	.LVL1204:
4769:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->wflag = 1;
 8016              		.loc 1 4769 0
 8017 00ce 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 8018 00d2 43F02003 		orr	r3, r3, #32
 8019 00d6 EB72     		strb	r3, [r5, #11]
4770:Middlewares/Third_Party/FatFs/src/ff.c **** 						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the
 8020              		.loc 1 4770 0
 8021 00d8 099B     		ldr	r3, [sp, #36]
 8022 00da 0122     		movs	r2, #1
 8023 00dc DA70     		strb	r2, [r3, #3]
4771:Middlewares/Third_Party/FatFs/src/ff.c **** 							dw = clust2sect(fs, ld_clust(fs, dir));
 8024              		.loc 1 4771 0
 8025 00de EB7A     		ldrb	r3, [r5, #11]	@ zero_extendqisi2
 8026 00e0 13F0100F 		tst	r3, #16
 8027 00e4 D8D0     		beq	.L725
4771:Middlewares/Third_Party/FatFs/src/ff.c **** 							dw = clust2sect(fs, ld_clust(fs, dir));
 8028              		.loc 1 4771 0 is_stmt 0 discriminator 1
 8029 00e6 189A     		ldr	r2, [sp, #96]
 8030 00e8 0C9B     		ldr	r3, [sp, #48]
 8031 00ea 9A42     		cmp	r2, r3
 8032 00ec D4D0     		beq	.L725
4772:Middlewares/Third_Party/FatFs/src/ff.c **** 							if (!dw) {
 8033              		.loc 1 4772 0 is_stmt 1
 8034 00ee 099C     		ldr	r4, [sp, #36]
 8035 00f0 2946     		mov	r1, r5
 8036 00f2 2046     		mov	r0, r4
 8037 00f4 FFF7FEFF 		bl	ld_clust
 8038              	.LVL1205:
 8039 00f8 0146     		mov	r1, r0
 8040 00fa 2046     		mov	r0, r4
 8041 00fc FFF7FEFF 		bl	clust2sect
 8042              	.LVL1206:
4773:Middlewares/Third_Party/FatFs/src/ff.c **** 								res = FR_INT_ERR;
 8043              		.loc 1 4773 0
 8044 0100 0146     		mov	r1, r0
 8045 0102 A0B1     		cbz	r0, .L729
4777:Middlewares/Third_Party/FatFs/src/ff.c **** 								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 8046              		.loc 1 4777 0
 8047 0104 2046     		mov	r0, r4
 8048              	.LVL1207:
 8049 0106 FFF7FEFF 		bl	move_window
 8050              	.LVL1208:
4778:Middlewares/Third_Party/FatFs/src/ff.c **** 								if (res == FR_OK && dir[1] == '.') {
 8051              		.loc 1 4778 0
 8052 010a 099B     		ldr	r3, [sp, #36]
 8053 010c 03F15401 		add	r1, r3, #84
 8054              	.LVL1209:
4779:Middlewares/Third_Party/FatFs/src/ff.c **** 									st_clust(fs, dir, djn.obj.sclust);
 8055              		.loc 1 4779 0
 8056 0110 0446     		mov	r4, r0
 8057 0112 0028     		cmp	r0, #0
 8058 0114 C0D1     		bne	.L725
4779:Middlewares/Third_Party/FatFs/src/ff.c **** 									st_clust(fs, dir, djn.obj.sclust);
 8059              		.loc 1 4779 0 is_stmt 0 discriminator 1
 8060 0116 93F85520 		ldrb	r2, [r3, #85]	@ zero_extendqisi2
ARM GAS  /tmp/ccqUXb8n.s 			page 266


 8061 011a 2E2A     		cmp	r2, #46
 8062 011c BCD1     		bne	.L725
4780:Middlewares/Third_Party/FatFs/src/ff.c **** 									fs->wflag = 1;
 8063              		.loc 1 4780 0 is_stmt 1
 8064 011e 0C9A     		ldr	r2, [sp, #48]
 8065 0120 1846     		mov	r0, r3
 8066              	.LVL1210:
 8067 0122 FFF7FEFF 		bl	st_clust
 8068              	.LVL1211:
4781:Middlewares/Third_Party/FatFs/src/ff.c **** 								}
 8069              		.loc 1 4781 0
 8070 0126 099B     		ldr	r3, [sp, #36]
 8071 0128 0122     		movs	r2, #1
 8072 012a DA70     		strb	r2, [r3, #3]
 8073 012c B4E7     		b	.L725
 8074              	.LVL1212:
 8075              	.L729:
4774:Middlewares/Third_Party/FatFs/src/ff.c **** 							} else {
 8076              		.loc 1 4774 0
 8077 012e 0224     		movs	r4, #2
 8078 0130 75E7     		b	.L721
 8079              		.cfi_endproc
 8080              	.LFE196:
 8082              		.section	.text.f_mkfs,"ax",%progbits
 8083              		.align	1
 8084              		.global	f_mkfs
 8085              		.syntax unified
 8086              		.thumb
 8087              		.thumb_func
 8088              		.fpu fpv5-sp-d16
 8090              	f_mkfs:
 8091              	.LFB197:
5297:Middlewares/Third_Party/FatFs/src/ff.c **** 	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8092              		.loc 1 5297 0
 8093              		.cfi_startproc
 8094              		@ args = 4, pretend = 0, frame = 40
 8095              		@ frame_needed = 0, uses_anonymous_args = 0
 8096              	.LVL1213:
 8097 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 8098              	.LCFI119:
 8099              		.cfi_def_cfa_offset 36
 8100              		.cfi_offset 4, -36
 8101              		.cfi_offset 5, -32
 8102              		.cfi_offset 6, -28
 8103              		.cfi_offset 7, -24
 8104              		.cfi_offset 8, -20
 8105              		.cfi_offset 9, -16
 8106              		.cfi_offset 10, -12
 8107              		.cfi_offset 11, -8
 8108              		.cfi_offset 14, -4
 8109 0004 8BB0     		sub	sp, sp, #44
 8110              	.LCFI120:
 8111              		.cfi_def_cfa_offset 80
 8112 0006 0AAC     		add	r4, sp, #40
 8113 0008 44F80C0D 		str	r0, [r4, #-12]!
 8114 000c 8846     		mov	r8, r1
 8115 000e 1546     		mov	r5, r2
ARM GAS  /tmp/ccqUXb8n.s 			page 267


 8116 0010 1E46     		mov	r6, r3
 8117              	.LVL1214:
5316:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 8118              		.loc 1 5316 0
 8119 0012 2046     		mov	r0, r4
 8120              	.LVL1215:
 8121 0014 FFF7FEFF 		bl	get_ldnumber
 8122              	.LVL1216:
5317:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8123              		.loc 1 5317 0
 8124 0018 0028     		cmp	r0, #0
 8125 001a C0F2DF82 		blt	.L777
5318:Middlewares/Third_Party/FatFs/src/ff.c **** 	pdrv = LD2PD(vol);	/* Physical drive */
 8126              		.loc 1 5318 0
 8127 001e 924B     		ldr	r3, .L824
 8128 0020 53F82030 		ldr	r3, [r3, r0, lsl #2]
 8129 0024 0BB1     		cbz	r3, .L735
5318:Middlewares/Third_Party/FatFs/src/ff.c **** 	pdrv = LD2PD(vol);	/* Physical drive */
 8130              		.loc 1 5318 0 is_stmt 0 discriminator 1
 8131 0026 0022     		movs	r2, #0
 8132 0028 1A70     		strb	r2, [r3]
 8133              	.L735:
5319:Middlewares/Third_Party/FatFs/src/ff.c **** 	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8134              		.loc 1 5319 0 is_stmt 1
 8135 002a C4B2     		uxtb	r4, r0
 8136              	.LVL1217:
5323:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (stat & STA_NOINIT) return FR_NOT_READY;
 8137              		.loc 1 5323 0
 8138 002c 2046     		mov	r0, r4
 8139              	.LVL1218:
 8140 002e FFF7FEFF 		bl	disk_initialize
 8141              	.LVL1219:
5324:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8142              		.loc 1 5324 0
 8143 0032 10F0010F 		tst	r0, #1
 8144 0036 40F0D382 		bne	.L778
5325:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & 
 8145              		.loc 1 5325 0
 8146 003a 10F0040F 		tst	r0, #4
 8147 003e 40F0D182 		bne	.L779
5326:Middlewares/Third_Party/FatFs/src/ff.c **** #if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
 8148              		.loc 1 5326 0
 8149 0042 09AA     		add	r2, sp, #36
 8150 0044 0321     		movs	r1, #3
 8151 0046 2046     		mov	r0, r4
 8152              	.LVL1220:
 8153 0048 FFF7FEFF 		bl	disk_ioctl
 8154              	.LVL1221:
 8155 004c 38B9     		cbnz	r0, .L736
5326:Middlewares/Third_Party/FatFs/src/ff.c **** #if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
 8156              		.loc 1 5326 0 is_stmt 0 discriminator 2
 8157 004e 099B     		ldr	r3, [sp, #36]
 8158 0050 2BB1     		cbz	r3, .L736
5326:Middlewares/Third_Party/FatFs/src/ff.c **** #if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
 8159              		.loc 1 5326 0 discriminator 4
 8160 0052 B3F5004F 		cmp	r3, #32768
 8161 0056 02D8     		bhi	.L736
ARM GAS  /tmp/ccqUXb8n.s 			page 268


5326:Middlewares/Third_Party/FatFs/src/ff.c **** #if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
 8162              		.loc 1 5326 0 discriminator 6
 8163 0058 5A1E     		subs	r2, r3, #1
 8164 005a 1342     		tst	r3, r2
 8165 005c 01D0     		beq	.L737
 8166              	.L736:
5326:Middlewares/Third_Party/FatFs/src/ff.c **** #if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
 8167              		.loc 1 5326 0 discriminator 7
 8168 005e 0123     		movs	r3, #1
 8169 0060 0993     		str	r3, [sp, #36]
 8170              	.L737:
 8171              	.LVL1222:
5333:Middlewares/Third_Party/FatFs/src/ff.c **** 	au /= ss;	/* Cluster size in unit of sector */
 8172              		.loc 1 5333 0 is_stmt 1
 8173 0062 1DB1     		cbz	r5, .L738
5333:Middlewares/Third_Party/FatFs/src/ff.c **** 	au /= ss;	/* Cluster size in unit of sector */
 8174              		.loc 1 5333 0 is_stmt 0 discriminator 1
 8175 0064 B5F5007F 		cmp	r5, #512
 8176 0068 C0F0C082 		bcc	.L780
 8177              	.L738:
5333:Middlewares/Third_Party/FatFs/src/ff.c **** 	au /= ss;	/* Cluster size in unit of sector */
 8178              		.loc 1 5333 0 discriminator 4
 8179 006c B5F1807F 		cmp	r5, #16777216
 8180 0070 00F2BE82 		bhi	.L781
5333:Middlewares/Third_Party/FatFs/src/ff.c **** 	au /= ss;	/* Cluster size in unit of sector */
 8181              		.loc 1 5333 0 discriminator 6
 8182 0074 6B1E     		subs	r3, r5, #1
 8183 0076 2B42     		tst	r3, r5
 8184 0078 40F0BC82 		bne	.L782
5334:Middlewares/Third_Party/FatFs/src/ff.c **** 
 8185              		.loc 1 5334 0 is_stmt 1
 8186 007c 6D0A     		lsrs	r5, r5, #9
 8187              	.LVL1223:
5338:Middlewares/Third_Party/FatFs/src/ff.c **** 	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8188              		.loc 1 5338 0
 8189 007e 149B     		ldr	r3, [sp, #80]
 8190 0080 4FEA532A 		lsr	r10, r3, #9
 8191              	.LVL1224:
5339:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!szb_buf) return FR_MKFS_ABORTED;
 8192              		.loc 1 5339 0
 8193 0084 794F     		ldr	r7, .L824+4
 8194 0086 1F40     		ands	r7, r7, r3
 8195              	.LVL1225:
5340:Middlewares/Third_Party/FatFs/src/ff.c **** 
 8196              		.loc 1 5340 0
 8197 0088 002F     		cmp	r7, #0
 8198 008a 00F0B582 		beq	.L783
5353:Middlewares/Third_Party/FatFs/src/ff.c **** 		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8199              		.loc 1 5353 0
 8200 008e 08AA     		add	r2, sp, #32
 8201 0090 0121     		movs	r1, #1
 8202 0092 2046     		mov	r0, r4
 8203 0094 FFF7FEFF 		bl	disk_ioctl
 8204              	.LVL1226:
 8205 0098 0028     		cmp	r0, #0
 8206 009a 40F0AF82 		bne	.L784
5354:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
ARM GAS  /tmp/ccqUXb8n.s 			page 269


 8207              		.loc 1 5354 0
 8208 009e 18F00803 		ands	r3, r8, #8
 8209 00a2 0093     		str	r3, [sp]
 8210 00a4 70D0     		beq	.L785
 8211 00a6 4FF00009 		mov	r9, #0
 8212              	.L739:
 8213              	.LVL1227:
5355:Middlewares/Third_Party/FatFs/src/ff.c **** 		sz_vol -= b_vol;						/* Volume size */
 8214              		.loc 1 5355 0 discriminator 4
 8215 00aa 089B     		ldr	r3, [sp, #32]
 8216 00ac 4B45     		cmp	r3, r9
 8217 00ae C0F0A782 		bcc	.L786
5356:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 8218              		.loc 1 5356 0
 8219 00b2 A3EB0903 		sub	r3, r3, r9
 8220 00b6 0893     		str	r3, [sp, #32]
5358:Middlewares/Third_Party/FatFs/src/ff.c **** 
 8221              		.loc 1 5358 0
 8222 00b8 7F2B     		cmp	r3, #127
 8223 00ba 40F2A382 		bls	.L787
5367:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8224              		.loc 1 5367 0
 8225 00be 802D     		cmp	r5, #128
 8226 00c0 00F2A282 		bhi	.L788
5368:Middlewares/Third_Party/FatFs/src/ff.c **** 			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8227              		.loc 1 5368 0
 8228 00c4 18F00200 		ands	r0, r8, #2
 8229 00c8 06D0     		beq	.L740
5369:Middlewares/Third_Party/FatFs/src/ff.c **** 				fmt = FS_FAT32; break;
 8230              		.loc 1 5369 0
 8231 00ca 08F00702 		and	r2, r8, #7
 8232 00ce 022A     		cmp	r2, #2
 8233 00d0 5DD0     		beq	.L789
5369:Middlewares/Third_Party/FatFs/src/ff.c **** 				fmt = FS_FAT32; break;
 8234              		.loc 1 5369 0 is_stmt 0 discriminator 1
 8235 00d2 18F0010F 		tst	r8, #1
 8236 00d6 61D0     		beq	.L790
 8237              	.L740:
5373:Middlewares/Third_Party/FatFs/src/ff.c **** 		fmt = FS_FAT16;
 8238              		.loc 1 5373 0 is_stmt 1
 8239 00d8 18F0010F 		tst	r8, #1
 8240 00dc 00F09682 		beq	.L791
5374:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (0);
 8241              		.loc 1 5374 0
 8242 00e0 4FF0020B 		mov	fp, #2
 8243 00e4 0194     		str	r4, [sp, #4]
 8244 00e6 CDF808A0 		str	r10, [sp, #8]
 8245 00ea 0397     		str	r7, [sp, #12]
 8246              	.LVL1228:
 8247              	.L742:
5544:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (!pau) {	/* au auto-selection */
 8248              		.loc 1 5544 0
 8249 00ec BBF1030F 		cmp	fp, #3
 8250 00f0 5FD0     		beq	.L760
5555:Middlewares/Third_Party/FatFs/src/ff.c **** 					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8251              		.loc 1 5555 0
 8252 00f2 002D     		cmp	r5, #0
ARM GAS  /tmp/ccqUXb8n.s 			page 270


 8253 00f4 00F08180 		beq	.L816
 8254 00f8 A846     		mov	r8, r5
 8255              	.LVL1229:
 8256              	.L748:
5559:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (n_clst > MAX_FAT12) {
 8257              		.loc 1 5559 0
 8258 00fa B3FBF8F2 		udiv	r2, r3, r8
 8259              	.LVL1230:
5560:Middlewares/Third_Party/FatFs/src/ff.c **** 					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8260              		.loc 1 5560 0
 8261 00fe 40F6F571 		movw	r1, #4085
 8262 0102 8A42     		cmp	r2, r1
 8263 0104 40F28A80 		bls	.L751
5561:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {
 8264              		.loc 1 5561 0
 8265 0108 0232     		adds	r2, r2, #2
 8266              	.LVL1231:
 8267 010a 5200     		lsls	r2, r2, #1
 8268              	.LVL1232:
 8269              	.L752:
5566:Middlewares/Third_Party/FatFs/src/ff.c **** 				sz_rsv = 1;						/* Number of reserved sectors */
 8270              		.loc 1 5566 0
 8271 010c 02F2FF12 		addw	r2, r2, #511
 8272              	.LVL1233:
 8273 0110 520A     		lsrs	r2, r2, #9
 8274              	.LVL1234:
5568:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 8275              		.loc 1 5568 0
 8276 0112 4FF0200E 		mov	lr, #32
5567:Middlewares/Third_Party/FatFs/src/ff.c **** 				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8277              		.loc 1 5567 0
 8278 0116 4FF0010C 		mov	ip, #1
 8279              	.LVL1235:
 8280              	.L747:
5570:Middlewares/Third_Party/FatFs/src/ff.c **** 			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8281              		.loc 1 5570 0
 8282 011a 0CEB090A 		add	r10, ip, r9
 8283              	.LVL1236:
5571:Middlewares/Third_Party/FatFs/src/ff.c **** 
 8284              		.loc 1 5571 0
 8285 011e 02EB0A01 		add	r1, r2, r10
 8286 0122 7144     		add	r1, r1, lr
 8287              	.LVL1237:
5574:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8288              		.loc 1 5574 0
 8289 0124 099F     		ldr	r7, [sp, #36]
 8290 0126 7C18     		adds	r4, r7, r1
 8291 0128 013C     		subs	r4, r4, #1
 8292 012a 7F42     		negs	r7, r7
 8293 012c 3C40     		ands	r4, r4, r7
 8294 012e 641A     		subs	r4, r4, r1
 8295              	.LVL1238:
5575:Middlewares/Third_Party/FatFs/src/ff.c **** 				sz_rsv += n; b_fat += n;
 8296              		.loc 1 5575 0
 8297 0130 BBF1030F 		cmp	fp, #3
 8298 0134 7AD0     		beq	.L817
5578:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
ARM GAS  /tmp/ccqUXb8n.s 			page 271


 8299              		.loc 1 5578 0
 8300 0136 2244     		add	r2, r2, r4
 8301              	.LVL1239:
 8302              	.L754:
5582:Middlewares/Third_Party/FatFs/src/ff.c **** 			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8303              		.loc 1 5582 0
 8304 0138 01EB0811 		add	r1, r1, r8, lsl #4
 8305              	.LVL1240:
 8306 013c A1EB0901 		sub	r1, r1, r9
 8307 0140 8B42     		cmp	r3, r1
 8308 0142 C0F06782 		bcc	.L795
5583:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fmt == FS_FAT32) {
 8309              		.loc 1 5583 0
 8310 0146 A3EB0C01 		sub	r1, r3, ip
 8311 014a 891A     		subs	r1, r1, r2
 8312 014c A1EB0E01 		sub	r1, r1, lr
 8313 0150 B1FBF8F1 		udiv	r1, r1, r8
 8314              	.LVL1241:
5584:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8315              		.loc 1 5584 0
 8316 0154 BBF1030F 		cmp	fp, #3
 8317 0158 6BD0     		beq	.L818
 8318              	.LVL1242:
 8319              	.L755:
5590:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8320              		.loc 1 5590 0
 8321 015a BBF1020F 		cmp	fp, #2
 8322 015e 40F08F80 		bne	.L757
5591:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (!au && (pau * 2) <= 64) {
 8323              		.loc 1 5591 0
 8324 0162 4FF6F574 		movw	r4, #65525
 8325 0166 A142     		cmp	r1, r4
 8326 0168 70D9     		bls	.L758
5592:Middlewares/Third_Party/FatFs/src/ff.c **** 						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8327              		.loc 1 5592 0
 8328 016a 1DB9     		cbnz	r5, .L759
5592:Middlewares/Third_Party/FatFs/src/ff.c **** 						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8329              		.loc 1 5592 0 is_stmt 0 discriminator 1
 8330 016c 4FEA4802 		lsl	r2, r8, #1
 8331              	.LVL1243:
 8332 0170 402A     		cmp	r2, #64
 8333 0172 1AD9     		bls	.L797
 8334              	.L759:
5595:Middlewares/Third_Party/FatFs/src/ff.c **** 						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8335              		.loc 1 5595 0 is_stmt 1
 8336 0174 D8B9     		cbnz	r0, .L798
5598:Middlewares/Third_Party/FatFs/src/ff.c **** 					return FR_MKFS_ABORTED;
 8337              		.loc 1 5598 0
 8338 0176 002D     		cmp	r5, #0
 8339 0178 40F05082 		bne	.L799
5598:Middlewares/Third_Party/FatFs/src/ff.c **** 					return FR_MKFS_ABORTED;
 8340              		.loc 1 5598 0 is_stmt 0 discriminator 1
 8341 017c 4FEA4805 		lsl	r5, r8, #1
 8342              	.LVL1244:
 8343 0180 802D     		cmp	r5, #128
 8344 0182 B3D9     		bls	.L742
5599:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
ARM GAS  /tmp/ccqUXb8n.s 			page 272


 8345              		.loc 1 5599 0 is_stmt 1
 8346 0184 0E20     		movs	r0, #14
 8347 0186 2EE2     		b	.L734
 8348              	.LVL1245:
 8349              	.L785:
5354:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8350              		.loc 1 5354 0
 8351 0188 4FF03F09 		mov	r9, #63
 8352 018c 8DE7     		b	.L739
 8353              	.LVL1246:
 8354              	.L789:
5370:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 8355              		.loc 1 5370 0
 8356 018e 4FF0030B 		mov	fp, #3
 8357 0192 0194     		str	r4, [sp, #4]
 8358 0194 CDF808A0 		str	r10, [sp, #8]
 8359 0198 0397     		str	r7, [sp, #12]
 8360 019a A7E7     		b	.L742
 8361              	.L790:
 8362 019c 4FF0030B 		mov	fp, #3
 8363 01a0 0194     		str	r4, [sp, #4]
 8364 01a2 CDF808A0 		str	r10, [sp, #8]
 8365 01a6 0397     		str	r7, [sp, #12]
 8366 01a8 A0E7     		b	.L742
 8367              	.LVL1247:
 8368              	.L797:
5593:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 8369              		.loc 1 5593 0
 8370 01aa 1546     		mov	r5, r2
 8371              	.LVL1248:
 8372 01ac 9EE7     		b	.L742
 8373              	.LVL1249:
 8374              	.L798:
5596:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 8375              		.loc 1 5596 0
 8376 01ae 4FF0030B 		mov	fp, #3
 8377              	.LVL1250:
 8378              	.L760:
5545:Middlewares/Third_Party/FatFs/src/ff.c **** 					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8379              		.loc 1 5545 0
 8380 01b2 95B1     		cbz	r5, .L819
 8381 01b4 A846     		mov	r8, r5
 8382              	.L744:
 8383              	.LVL1251:
5549:Middlewares/Third_Party/FatFs/src/ff.c **** 				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8384              		.loc 1 5549 0
 8385 01b6 B3FBF8F1 		udiv	r1, r3, r8
 8386              	.LVL1252:
5550:Middlewares/Third_Party/FatFs/src/ff.c **** 				sz_rsv = 32;	/* Number of reserved sectors */
 8387              		.loc 1 5550 0
 8388 01ba 8A1C     		adds	r2, r1, #2
 8389 01bc 9200     		lsls	r2, r2, #2
 8390 01be 02F2FF12 		addw	r2, r2, #511
 8391 01c2 520A     		lsrs	r2, r2, #9
 8392              	.LVL1253:
5553:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {				/* FAT12/16 volume */
 8393              		.loc 1 5553 0
ARM GAS  /tmp/ccqUXb8n.s 			page 273


 8394 01c4 2A4C     		ldr	r4, .L824+8
 8395 01c6 0C44     		add	r4, r4, r1
 8396 01c8 2A49     		ldr	r1, .L824+12
 8397              	.LVL1254:
 8398 01ca 8C42     		cmp	r4, r1
 8399 01cc 00F22082 		bhi	.L793
5552:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8400              		.loc 1 5552 0
 8401 01d0 4FF0000E 		mov	lr, #0
5551:Middlewares/Third_Party/FatFs/src/ff.c **** 				sz_dir = 0;		/* No static directory */
 8402              		.loc 1 5551 0
 8403 01d4 4FF0200C 		mov	ip, #32
 8404 01d8 9FE7     		b	.L747
 8405              	.LVL1255:
 8406              	.L819:
5546:Middlewares/Third_Party/FatFs/src/ff.c **** 					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8407              		.loc 1 5546 0
 8408 01da 5C0C     		lsrs	r4, r3, #17
 8409              	.LVL1256:
5547:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 8410              		.loc 1 5547 0
 8411 01dc 0021     		movs	r1, #0
 8412 01de 4FF00108 		mov	r8, #1
 8413 01e2 02E0     		b	.L745
 8414              	.LVL1257:
 8415              	.L746:
5547:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 8416              		.loc 1 5547 0 is_stmt 0 discriminator 4
 8417 01e4 0131     		adds	r1, r1, #1
 8418              	.LVL1258:
 8419 01e6 4FEA4808 		lsl	r8, r8, #1
 8420              	.LVL1259:
 8421              	.L745:
5547:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 8422              		.loc 1 5547 0 discriminator 1
 8423 01ea 234A     		ldr	r2, .L824+16
 8424 01ec 32F81120 		ldrh	r2, [r2, r1, lsl #1]
 8425 01f0 002A     		cmp	r2, #0
 8426 01f2 E0D0     		beq	.L744
5547:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 8427              		.loc 1 5547 0 discriminator 3
 8428 01f4 A242     		cmp	r2, r4
 8429 01f6 F5D9     		bls	.L746
 8430 01f8 DDE7     		b	.L744
 8431              	.LVL1260:
 8432              	.L816:
5556:Middlewares/Third_Party/FatFs/src/ff.c **** 					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8433              		.loc 1 5556 0 is_stmt 1
 8434 01fa 1C0B     		lsrs	r4, r3, #12
 8435              	.LVL1261:
5557:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 8436              		.loc 1 5557 0
 8437 01fc 0021     		movs	r1, #0
 8438 01fe 4FF00108 		mov	r8, #1
 8439 0202 02E0     		b	.L749
 8440              	.LVL1262:
 8441              	.L750:
ARM GAS  /tmp/ccqUXb8n.s 			page 274


5557:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 8442              		.loc 1 5557 0 is_stmt 0 discriminator 4
 8443 0204 0131     		adds	r1, r1, #1
 8444              	.LVL1263:
 8445 0206 4FEA4808 		lsl	r8, r8, #1
 8446              	.LVL1264:
 8447              	.L749:
5557:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 8448              		.loc 1 5557 0 discriminator 1
 8449 020a 1C4A     		ldr	r2, .L824+20
 8450 020c 32F81120 		ldrh	r2, [r2, r1, lsl #1]
 8451 0210 002A     		cmp	r2, #0
 8452 0212 3FF472AF 		beq	.L748
5557:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 8453              		.loc 1 5557 0 discriminator 3
 8454 0216 A242     		cmp	r2, r4
 8455 0218 F4D9     		bls	.L750
 8456 021a 6EE7     		b	.L748
 8457              	.LVL1265:
 8458              	.L751:
5564:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 8459              		.loc 1 5564 0 is_stmt 1
 8460 021c 02EB4202 		add	r2, r2, r2, lsl #1
 8461              	.LVL1266:
 8462 0220 0132     		adds	r2, r2, #1
 8463 0222 5208     		lsrs	r2, r2, #1
 8464 0224 0332     		adds	r2, r2, #3
 8465              	.LVL1267:
5563:Middlewares/Third_Party/FatFs/src/ff.c **** 					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8466              		.loc 1 5563 0
 8467 0226 4FF0010B 		mov	fp, #1
 8468 022a 6FE7     		b	.L752
 8469              	.LVL1268:
 8470              	.L817:
5576:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {					/* FAT12/16: Expand FAT size */
 8471              		.loc 1 5576 0
 8472 022c A444     		add	ip, ip, r4
 8473              	.LVL1269:
 8474 022e A244     		add	r10, r10, r4
 8475              	.LVL1270:
 8476 0230 82E7     		b	.L754
 8477              	.LVL1271:
 8478              	.L818:
5585:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8479              		.loc 1 5585 0
 8480 0232 4FF6F574 		movw	r4, #65525
 8481              	.LVL1272:
 8482 0236 A142     		cmp	r1, r4
 8483 0238 8FD8     		bhi	.L755
5586:Middlewares/Third_Party/FatFs/src/ff.c **** 					return FR_MKFS_ABORTED;
 8484              		.loc 1 5586 0
 8485 023a 002D     		cmp	r5, #0
 8486 023c 40F0EC81 		bne	.L796
 8487              	.LVL1273:
5586:Middlewares/Third_Party/FatFs/src/ff.c **** 					return FR_MKFS_ABORTED;
 8488              		.loc 1 5586 0 is_stmt 0 discriminator 1
 8489 0240 5FEA5805 		lsrs	r5, r8, #1
ARM GAS  /tmp/ccqUXb8n.s 			page 275


 8490              	.LVL1274:
 8491 0244 7FF452AF 		bne	.L742
5587:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 8492              		.loc 1 5587 0 is_stmt 1
 8493 0248 0E20     		movs	r0, #14
 8494 024a CCE1     		b	.L734
 8495              	.L758:
5601:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8496              		.loc 1 5601 0
 8497 024c 40F6F574 		movw	r4, #4085
 8498 0250 A142     		cmp	r1, r4
 8499 0252 15D8     		bhi	.L757
5602:Middlewares/Third_Party/FatFs/src/ff.c **** 					return FR_MKFS_ABORTED;
 8500              		.loc 1 5602 0
 8501 0254 002D     		cmp	r5, #0
 8502 0256 40F0E381 		bne	.L800
5602:Middlewares/Third_Party/FatFs/src/ff.c **** 					return FR_MKFS_ABORTED;
 8503              		.loc 1 5602 0 is_stmt 0 discriminator 1
 8504 025a 4FEA4805 		lsl	r5, r8, #1
 8505              	.LVL1275:
 8506 025e 802D     		cmp	r5, #128
 8507 0260 7FF644AF 		bls	.L742
5603:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 8508              		.loc 1 5603 0 is_stmt 1
 8509 0264 0E20     		movs	r0, #14
 8510 0266 BEE1     		b	.L734
 8511              	.L825:
 8512              		.align	2
 8513              	.L824:
 8514 0268 00000000 		.word	.LANCHOR2
 8515 026c 00FEFFFF 		.word	-512
 8516 0270 0A00FFFF 		.word	-65526
 8517 0274 FFFFFE0F 		.word	268369919
 8518 0278 00000000 		.word	.LANCHOR4
 8519 027c 00000000 		.word	.LANCHOR5
 8520              	.L757:
 8521 0280 CDF818E0 		str	lr, [sp, #24]
 8522 0284 6546     		mov	r5, ip
 8523              	.LVL1276:
 8524 0286 0592     		str	r2, [sp, #20]
 8525 0288 CDF810A0 		str	r10, [sp, #16]
 8526 028c 019C     		ldr	r4, [sp, #4]
 8527 028e DDF808A0 		ldr	r10, [sp, #8]
 8528              	.LVL1277:
 8529 0292 039F     		ldr	r7, [sp, #12]
 8530 0294 0B46     		mov	r3, r1
 8531 0296 0291     		str	r1, [sp, #8]
 8532              	.LVL1278:
5606:Middlewares/Third_Party/FatFs/src/ff.c **** 
 8533              		.loc 1 5606 0
 8534 0298 40F6F572 		movw	r2, #4085
 8535              	.LVL1279:
 8536 029c BBF1010F 		cmp	fp, #1
 8537 02a0 14BF     		ite	ne
 8538 02a2 0023     		movne	r3, #0
 8539 02a4 0123     		moveq	r3, #1
 8540 02a6 9142     		cmp	r1, r2
ARM GAS  /tmp/ccqUXb8n.s 			page 276


 8541 02a8 98BF     		it	ls
 8542 02aa 0023     		movls	r3, #0
 8543 02ac 002B     		cmp	r3, #0
 8544 02ae 40F0B981 		bne	.L801
 8545              	.LVL1280:
5617:Middlewares/Third_Party/FatFs/src/ff.c **** 		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8546              		.loc 1 5617 0
 8547 02b2 4FF40072 		mov	r2, #512
 8548 02b6 0021     		movs	r1, #0
 8549              	.LVL1281:
 8550 02b8 3046     		mov	r0, r6
 8551 02ba FFF7FEFF 		bl	mem_set
 8552              	.LVL1282:
5618:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8553              		.loc 1 5618 0
 8554 02be 0B22     		movs	r2, #11
 8555 02c0 DA49     		ldr	r1, .L826
 8556 02c2 3046     		mov	r0, r6
 8557 02c4 FFF7FEFF 		bl	mem_cpy
 8558              	.LVL1283:
5619:Middlewares/Third_Party/FatFs/src/ff.c **** 		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8559              		.loc 1 5619 0
 8560 02c8 4FF40071 		mov	r1, #512
 8561 02cc 06F10B00 		add	r0, r6, #11
 8562 02d0 FFF7FEFF 		bl	st_word
 8563              	.LVL1284:
5620:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8564              		.loc 1 5620 0
 8565 02d4 86F80D80 		strb	r8, [r6, #13]
5621:Middlewares/Third_Party/FatFs/src/ff.c **** 		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8566              		.loc 1 5621 0
 8567 02d8 A9B2     		uxth	r1, r5
 8568 02da 06F10E00 		add	r0, r6, #14
 8569 02de FFF7FEFF 		bl	st_word
 8570              	.LVL1285:
5622:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root direc
 8571              		.loc 1 5622 0
 8572 02e2 0123     		movs	r3, #1
 8573 02e4 3374     		strb	r3, [r6, #16]
5623:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (sz_vol < 0x10000) {
 8574              		.loc 1 5623 0
 8575 02e6 06F11100 		add	r0, r6, #17
 8576 02ea BBF1030F 		cmp	fp, #3
 8577 02ee 00F0D880 		beq	.L802
 8578 02f2 4FF40071 		mov	r1, #512
 8579              	.L761:
5623:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (sz_vol < 0x10000) {
 8580              		.loc 1 5623 0 is_stmt 0 discriminator 4
 8581 02f6 FFF7FEFF 		bl	st_word
 8582              	.LVL1286:
5624:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8583              		.loc 1 5624 0 is_stmt 1 discriminator 4
 8584 02fa 0899     		ldr	r1, [sp, #32]
 8585 02fc B1F5803F 		cmp	r1, #65536
 8586 0300 80F0D180 		bcs	.L762
5625:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
 8587              		.loc 1 5625 0
ARM GAS  /tmp/ccqUXb8n.s 			page 277


 8588 0304 89B2     		uxth	r1, r1
 8589 0306 06F11300 		add	r0, r6, #19
 8590 030a FFF7FEFF 		bl	st_word
 8591              	.LVL1287:
 8592              	.L763:
5629:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8593              		.loc 1 5629 0
 8594 030e F823     		movs	r3, #248
 8595 0310 7375     		strb	r3, [r6, #21]
5630:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8596              		.loc 1 5630 0
 8597 0312 3F21     		movs	r1, #63
 8598 0314 06F11800 		add	r0, r6, #24
 8599 0318 FFF7FEFF 		bl	st_word
 8600              	.LVL1288:
5631:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8601              		.loc 1 5631 0
 8602 031c FF21     		movs	r1, #255
 8603 031e 06F11A00 		add	r0, r6, #26
 8604 0322 FFF7FEFF 		bl	st_word
 8605              	.LVL1289:
5632:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fmt == FS_FAT32) {
 8606              		.loc 1 5632 0
 8607 0326 4946     		mov	r1, r9
 8608 0328 06F11C00 		add	r0, r6, #28
 8609 032c FFF7FEFF 		bl	st_dword
 8610              	.LVL1290:
5633:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8611              		.loc 1 5633 0
 8612 0330 BBF1030F 		cmp	fp, #3
 8613 0334 40F0BC80 		bne	.L764
5634:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8614              		.loc 1 5634 0
 8615 0338 FFF7FEFF 		bl	get_fattime
 8616              	.LVL1291:
 8617 033c 0146     		mov	r1, r0
 8618 033e 06F14300 		add	r0, r6, #67
 8619 0342 FFF7FEFF 		bl	st_dword
 8620              	.LVL1292:
5635:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8621              		.loc 1 5635 0
 8622 0346 0599     		ldr	r1, [sp, #20]
 8623 0348 06F12400 		add	r0, r6, #36
 8624 034c FFF7FEFF 		bl	st_dword
 8625              	.LVL1293:
5636:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8626              		.loc 1 5636 0
 8627 0350 0221     		movs	r1, #2
 8628 0352 06F12C00 		add	r0, r6, #44
 8629 0356 FFF7FEFF 		bl	st_dword
 8630              	.LVL1294:
5637:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8631              		.loc 1 5637 0
 8632 035a 0121     		movs	r1, #1
 8633 035c 06F13000 		add	r0, r6, #48
 8634 0360 FFF7FEFF 		bl	st_word
 8635              	.LVL1295:
ARM GAS  /tmp/ccqUXb8n.s 			page 278


5638:Middlewares/Third_Party/FatFs/src/ff.c **** 			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8636              		.loc 1 5638 0
 8637 0364 0621     		movs	r1, #6
 8638 0366 06F13200 		add	r0, r6, #50
 8639 036a FFF7FEFF 		bl	st_word
 8640              	.LVL1296:
5639:Middlewares/Third_Party/FatFs/src/ff.c **** 			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8641              		.loc 1 5639 0
 8642 036e 8023     		movs	r3, #128
 8643 0370 86F84030 		strb	r3, [r6, #64]
5640:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8644              		.loc 1 5640 0
 8645 0374 2923     		movs	r3, #41
 8646 0376 86F84230 		strb	r3, [r6, #66]
5641:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
 8647              		.loc 1 5641 0
 8648 037a 1322     		movs	r2, #19
 8649 037c AC49     		ldr	r1, .L826+4
 8650 037e 06F14700 		add	r0, r6, #71
 8651 0382 FFF7FEFF 		bl	mem_cpy
 8652              	.LVL1297:
 8653              	.L765:
5649:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector 
 8654              		.loc 1 5649 0
 8655 0386 06F5FF73 		add	r3, r6, #510
 8656 038a 0193     		str	r3, [sp, #4]
 8657              	.LVL1298:
 8658 038c 4AF65521 		movw	r1, #43605
 8659 0390 1846     		mov	r0, r3
 8660 0392 FFF7FEFF 		bl	st_word
 8661              	.LVL1299:
5650:Middlewares/Third_Party/FatFs/src/ff.c **** 
 8662              		.loc 1 5650 0
 8663 0396 0123     		movs	r3, #1
 8664 0398 4A46     		mov	r2, r9
 8665 039a 3146     		mov	r1, r6
 8666 039c 2046     		mov	r0, r4
 8667 039e FFF7FEFF 		bl	disk_write
 8668              	.LVL1300:
 8669 03a2 0028     		cmp	r0, #0
 8670 03a4 40F04081 		bne	.L803
5653:Middlewares/Third_Party/FatFs/src/ff.c **** 			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8671              		.loc 1 5653 0
 8672 03a8 BBF1030F 		cmp	fp, #3
 8673 03ac 00F09A80 		beq	.L820
 8674              	.L766:
5666:Middlewares/Third_Party/FatFs/src/ff.c **** 		sect = b_fat;		/* FAT start sector */
 8675              		.loc 1 5666 0
 8676 03b0 3A46     		mov	r2, r7
 8677 03b2 0021     		movs	r1, #0
 8678 03b4 3046     		mov	r0, r6
 8679 03b6 FFF7FEFF 		bl	mem_set
 8680              	.LVL1301:
5668:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fmt == FS_FAT32) {
 8681              		.loc 1 5668 0
 8682 03ba 0025     		movs	r5, #0
 8683              	.LVL1302:
ARM GAS  /tmp/ccqUXb8n.s 			page 279


 8684 03bc CDF80880 		str	r8, [sp, #8]
 8685              	.LVL1303:
 8686              	.L767:
5668:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fmt == FS_FAT32) {
 8687              		.loc 1 5668 0 is_stmt 0 discriminator 1
 8688 03c0 002D     		cmp	r5, #0
 8689 03c2 00F0C480 		beq	.L772
 8690 03c6 DDF80880 		ldr	r8, [sp, #8]
5686:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
 8691              		.loc 1 5686 0 is_stmt 1
 8692 03ca BBF1030F 		cmp	fp, #3
 8693 03ce 00F0F880 		beq	.L821
 8694 03d2 069F     		ldr	r7, [sp, #24]
 8695 03d4 DDF81080 		ldr	r8, [sp, #16]
 8696              	.LVL1304:
 8697              	.L774:
5688:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8698              		.loc 1 5688 0
 8699 03d8 3D46     		mov	r5, r7
 8700 03da 5745     		cmp	r7, r10
 8701 03dc 28BF     		it	cs
 8702 03de 5546     		movcs	r5, r10
 8703              	.LVL1305:
5689:Middlewares/Third_Party/FatFs/src/ff.c **** 			sect += n; nsect -= n;
 8704              		.loc 1 5689 0
 8705 03e0 2B46     		mov	r3, r5
 8706 03e2 4246     		mov	r2, r8
 8707 03e4 3146     		mov	r1, r6
 8708 03e6 2046     		mov	r0, r4
 8709 03e8 FFF7FEFF 		bl	disk_write
 8710              	.LVL1306:
 8711 03ec 0028     		cmp	r0, #0
 8712 03ee 40F02B81 		bne	.L806
5690:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (nsect);
 8713              		.loc 1 5690 0
 8714 03f2 A844     		add	r8, r8, r5
 8715              	.LVL1307:
5691:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 8716              		.loc 1 5691 0
 8717 03f4 7F1B     		subs	r7, r7, r5
 8718              	.LVL1308:
 8719 03f6 EFD1     		bne	.L774
5698:Middlewares/Third_Party/FatFs/src/ff.c **** 			sys = 0x0C;		/* FAT32X */
 8720              		.loc 1 5698 0
 8721 03f8 BBF1030F 		cmp	fp, #3
 8722 03fc 00F0E580 		beq	.L807
5701:Middlewares/Third_Party/FatFs/src/ff.c **** 				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8723              		.loc 1 5701 0
 8724 0400 089B     		ldr	r3, [sp, #32]
 8725 0402 B3F5803F 		cmp	r3, #65536
 8726 0406 80F0E380 		bcs	.L808
5704:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 8727              		.loc 1 5704 0
 8728 040a BBF1020F 		cmp	fp, #2
 8729 040e 40F0E280 		bne	.L809
 8730 0412 4FF00408 		mov	r8, #4
 8731              	.LVL1309:
ARM GAS  /tmp/ccqUXb8n.s 			page 280


 8732              	.L775:
5716:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_set(buf, 0, ss);
 8733              		.loc 1 5716 0
 8734 0416 009B     		ldr	r3, [sp]
 8735 0418 CBBB     		cbnz	r3, .L776
5717:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8736              		.loc 1 5717 0
 8737 041a 4FF40072 		mov	r2, #512
 8738 041e 0021     		movs	r1, #0
 8739 0420 3046     		mov	r0, r6
 8740 0422 FFF7FEFF 		bl	mem_set
 8741              	.LVL1310:
5718:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8742              		.loc 1 5718 0
 8743 0426 4AF65521 		movw	r1, #43605
 8744 042a 0198     		ldr	r0, [sp, #4]
 8745 042c FFF7FEFF 		bl	st_word
 8746              	.LVL1311:
5720:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_StHead] = 1;				/* Start head */
 8747              		.loc 1 5720 0
 8748 0430 0025     		movs	r5, #0
 8749              	.LVL1312:
 8750 0432 86F8BE51 		strb	r5, [r6, #446]
5721:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_StSec] = 1;					/* Start sector */
 8751              		.loc 1 5721 0
 8752 0436 0127     		movs	r7, #1
 8753              	.LVL1313:
 8754 0438 86F8BF71 		strb	r7, [r6, #447]
5722:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8755              		.loc 1 5722 0
 8756 043c 86F8C071 		strb	r7, [r6, #448]
5723:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_System] = sys;				/* System type */
 8757              		.loc 1 5723 0
 8758 0440 86F8C151 		strb	r5, [r6, #449]
5724:Middlewares/Third_Party/FatFs/src/ff.c **** 			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8759              		.loc 1 5724 0
 8760 0444 86F8C281 		strb	r8, [r6, #450]
5725:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_EdHead] = 254;				/* End head */
 8761              		.loc 1 5725 0
 8762 0448 089B     		ldr	r3, [sp, #32]
 8763 044a 4B44     		add	r3, r3, r9
 8764 044c 43F6C162 		movw	r2, #16065
 8765 0450 B3FBF2F3 		udiv	r3, r3, r2
 8766              	.LVL1314:
5726:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8767              		.loc 1 5726 0
 8768 0454 FE22     		movs	r2, #254
 8769 0456 86F8C321 		strb	r2, [r6, #451]
5727:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8770              		.loc 1 5727 0
 8771 045a 9A08     		lsrs	r2, r3, #2
 8772 045c 42F03F02 		orr	r2, r2, #63
 8773 0460 86F8C421 		strb	r2, [r6, #452]
5728:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8774              		.loc 1 5728 0
 8775 0464 86F8C531 		strb	r3, [r6, #453]
5729:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
ARM GAS  /tmp/ccqUXb8n.s 			page 281


 8776              		.loc 1 5729 0
 8777 0468 4946     		mov	r1, r9
 8778 046a 06F5E370 		add	r0, r6, #454
 8779 046e FFF7FEFF 		bl	st_dword
 8780              	.LVL1315:
5730:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8781              		.loc 1 5730 0
 8782 0472 0899     		ldr	r1, [sp, #32]
 8783 0474 06F5E570 		add	r0, r6, #458
 8784 0478 FFF7FEFF 		bl	st_dword
 8785              	.LVL1316:
5731:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 8786              		.loc 1 5731 0
 8787 047c 3B46     		mov	r3, r7
 8788 047e 2A46     		mov	r2, r5
 8789 0480 3146     		mov	r1, r6
 8790 0482 2046     		mov	r0, r4
 8791 0484 FFF7FEFF 		bl	disk_write
 8792              	.LVL1317:
 8793 0488 0028     		cmp	r0, #0
 8794 048a 40F0DF80 		bne	.L810
 8795              	.LVL1318:
 8796              	.L776:
5735:Middlewares/Third_Party/FatFs/src/ff.c **** 
 8797              		.loc 1 5735 0
 8798 048e 0022     		movs	r2, #0
 8799 0490 1146     		mov	r1, r2
 8800 0492 2046     		mov	r0, r4
 8801 0494 FFF7FEFF 		bl	disk_ioctl
 8802              	.LVL1319:
 8803 0498 0028     		cmp	r0, #0
 8804 049a 00F0D980 		beq	.L811
 8805 049e 0120     		movs	r0, #1
 8806 04a0 A1E0     		b	.L734
 8807              	.LVL1320:
 8808              	.L802:
5623:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (sz_vol < 0x10000) {
 8809              		.loc 1 5623 0
 8810 04a2 0021     		movs	r1, #0
 8811 04a4 27E7     		b	.L761
 8812              	.L762:
5627:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 8813              		.loc 1 5627 0
 8814 04a6 06F12000 		add	r0, r6, #32
 8815 04aa FFF7FEFF 		bl	st_dword
 8816              	.LVL1321:
 8817 04ae 2EE7     		b	.L763
 8818              	.L764:
5643:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8819              		.loc 1 5643 0
 8820 04b0 FFF7FEFF 		bl	get_fattime
 8821              	.LVL1322:
 8822 04b4 0146     		mov	r1, r0
 8823 04b6 06F12700 		add	r0, r6, #39
 8824 04ba FFF7FEFF 		bl	st_dword
 8825              	.LVL1323:
5644:Middlewares/Third_Party/FatFs/src/ff.c **** 			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
ARM GAS  /tmp/ccqUXb8n.s 			page 282


 8826              		.loc 1 5644 0
 8827 04be BDF81410 		ldrh	r1, [sp, #20]
 8828 04c2 06F11600 		add	r0, r6, #22
 8829 04c6 FFF7FEFF 		bl	st_word
 8830              	.LVL1324:
5645:Middlewares/Third_Party/FatFs/src/ff.c **** 			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8831              		.loc 1 5645 0
 8832 04ca 8023     		movs	r3, #128
 8833 04cc 86F82430 		strb	r3, [r6, #36]
5646:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8834              		.loc 1 5646 0
 8835 04d0 2923     		movs	r3, #41
 8836 04d2 86F82630 		strb	r3, [r6, #38]
5647:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 8837              		.loc 1 5647 0
 8838 04d6 1322     		movs	r2, #19
 8839 04d8 5649     		ldr	r1, .L826+8
 8840 04da 06F12B00 		add	r0, r6, #43
 8841 04de FFF7FEFF 		bl	mem_cpy
 8842              	.LVL1325:
 8843 04e2 50E7     		b	.L765
 8844              	.LVL1326:
 8845              	.L820:
5654:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_set(buf, 0, ss);
 8846              		.loc 1 5654 0
 8847 04e4 0123     		movs	r3, #1
 8848 04e6 09F10602 		add	r2, r9, #6
 8849 04ea 3146     		mov	r1, r6
 8850 04ec 2046     		mov	r0, r4
 8851 04ee FFF7FEFF 		bl	disk_write
 8852              	.LVL1327:
5655:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + FSI_LeadSig, 0x41615252);
 8853              		.loc 1 5655 0
 8854 04f2 4FF40072 		mov	r2, #512
 8855 04f6 0021     		movs	r1, #0
 8856 04f8 3046     		mov	r0, r6
 8857 04fa FFF7FEFF 		bl	mem_set
 8858              	.LVL1328:
5656:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + FSI_StrucSig, 0x61417272);
 8859              		.loc 1 5656 0
 8860 04fe 4E49     		ldr	r1, .L826+12
 8861 0500 3046     		mov	r0, r6
 8862 0502 FFF7FEFF 		bl	st_dword
 8863              	.LVL1329:
5657:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8864              		.loc 1 5657 0
 8865 0506 4D49     		ldr	r1, .L826+16
 8866 0508 06F5F270 		add	r0, r6, #484
 8867 050c FFF7FEFF 		bl	st_dword
 8868              	.LVL1330:
5658:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8869              		.loc 1 5658 0
 8870 0510 029B     		ldr	r3, [sp, #8]
 8871 0512 591E     		subs	r1, r3, #1
 8872 0514 06F5F470 		add	r0, r6, #488
 8873 0518 FFF7FEFF 		bl	st_dword
 8874              	.LVL1331:
ARM GAS  /tmp/ccqUXb8n.s 			page 283


5659:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BS_55AA, 0xAA55);
 8875              		.loc 1 5659 0
 8876 051c 0221     		movs	r1, #2
 8877 051e 06F5F670 		add	r0, r6, #492
 8878 0522 FFF7FEFF 		bl	st_dword
 8879              	.LVL1332:
5660:Middlewares/Third_Party/FatFs/src/ff.c **** 			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8880              		.loc 1 5660 0
 8881 0526 4AF65521 		movw	r1, #43605
 8882 052a 0198     		ldr	r0, [sp, #4]
 8883 052c FFF7FEFF 		bl	st_word
 8884              	.LVL1333:
5661:Middlewares/Third_Party/FatFs/src/ff.c **** 			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8885              		.loc 1 5661 0
 8886 0530 0123     		movs	r3, #1
 8887 0532 09F10702 		add	r2, r9, #7
 8888 0536 3146     		mov	r1, r6
 8889 0538 2046     		mov	r0, r4
 8890 053a FFF7FEFF 		bl	disk_write
 8891              	.LVL1334:
5662:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 8892              		.loc 1 5662 0
 8893 053e 0123     		movs	r3, #1
 8894 0540 09EB0302 		add	r2, r9, r3
 8895 0544 3146     		mov	r1, r6
 8896 0546 2046     		mov	r0, r4
 8897 0548 FFF7FEFF 		bl	disk_write
 8898              	.LVL1335:
 8899 054c 30E7     		b	.L766
 8900              	.LVL1336:
 8901              	.L772:
5669:Middlewares/Third_Party/FatFs/src/ff.c **** 				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8902              		.loc 1 5669 0
 8903 054e BBF1030F 		cmp	fp, #3
 8904 0552 23D0     		beq	.L822
5674:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 8905              		.loc 1 5674 0
 8906 0554 BBF1010F 		cmp	fp, #1
 8907 0558 31D0     		beq	.L823
 8908 055a 6FF00701 		mvn	r1, #7
 8909              	.L770:
5674:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 8910              		.loc 1 5674 0 is_stmt 0 discriminator 4
 8911 055e 3046     		mov	r0, r6
 8912 0560 FFF7FEFF 		bl	st_dword
 8913              	.LVL1337:
 8914              	.L769:
5674:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 8915              		.loc 1 5674 0
 8916 0564 DDF81480 		ldr	r8, [sp, #20]
 8917              	.L771:
 8918              	.LVL1338:
5678:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8919              		.loc 1 5678 0 is_stmt 1
 8920 0568 4746     		mov	r7, r8
 8921 056a D045     		cmp	r8, r10
 8922 056c 28BF     		it	cs
ARM GAS  /tmp/ccqUXb8n.s 			page 284


 8923 056e 5746     		movcs	r7, r10
 8924              	.LVL1339:
5679:Middlewares/Third_Party/FatFs/src/ff.c **** 				mem_set(buf, 0, ss);
 8925              		.loc 1 5679 0
 8926 0570 3B46     		mov	r3, r7
 8927 0572 049A     		ldr	r2, [sp, #16]
 8928 0574 3146     		mov	r1, r6
 8929 0576 2046     		mov	r0, r4
 8930 0578 FFF7FEFF 		bl	disk_write
 8931              	.LVL1340:
 8932 057c 0028     		cmp	r0, #0
 8933 057e 61D1     		bne	.L805
5680:Middlewares/Third_Party/FatFs/src/ff.c **** 				sect += n; nsect -= n;
 8934              		.loc 1 5680 0
 8935 0580 4FF40072 		mov	r2, #512
 8936 0584 0021     		movs	r1, #0
 8937 0586 3046     		mov	r0, r6
 8938 0588 FFF7FEFF 		bl	mem_set
 8939              	.LVL1341:
5681:Middlewares/Third_Party/FatFs/src/ff.c **** 			} while (nsect);
 8940              		.loc 1 5681 0
 8941 058c 049B     		ldr	r3, [sp, #16]
 8942 058e 3B44     		add	r3, r3, r7
 8943 0590 0493     		str	r3, [sp, #16]
 8944              	.LVL1342:
5682:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 8945              		.loc 1 5682 0
 8946 0592 B8EB0708 		subs	r8, r8, r7
 8947              	.LVL1343:
 8948 0596 E7D1     		bne	.L771
5668:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fmt == FS_FAT32) {
 8949              		.loc 1 5668 0 discriminator 2
 8950 0598 0135     		adds	r5, r5, #1
 8951              	.LVL1344:
 8952 059a 11E7     		b	.L767
 8953              	.LVL1345:
 8954              	.L822:
5670:Middlewares/Third_Party/FatFs/src/ff.c **** 				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8955              		.loc 1 5670 0
 8956 059c 6FF00701 		mvn	r1, #7
 8957 05a0 3046     		mov	r0, r6
 8958 05a2 FFF7FEFF 		bl	st_dword
 8959              	.LVL1346:
5671:Middlewares/Third_Party/FatFs/src/ff.c **** 				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8960              		.loc 1 5671 0
 8961 05a6 4FF0FF31 		mov	r1, #-1
 8962 05aa 301D     		adds	r0, r6, #4
 8963 05ac FFF7FEFF 		bl	st_dword
 8964              	.LVL1347:
5672:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
 8965              		.loc 1 5672 0
 8966 05b0 6FF07041 		mvn	r1, #-268435456
 8967 05b4 06F10800 		add	r0, r6, #8
 8968 05b8 FFF7FEFF 		bl	st_dword
 8969              	.LVL1348:
 8970 05bc D2E7     		b	.L769
 8971              	.L823:
ARM GAS  /tmp/ccqUXb8n.s 			page 285


5674:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 8972              		.loc 1 5674 0
 8973 05be 2049     		ldr	r1, .L826+20
 8974 05c0 CDE7     		b	.L770
 8975              	.L821:
5686:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
 8976              		.loc 1 5686 0
 8977 05c2 4746     		mov	r7, r8
 8978 05c4 DDF81080 		ldr	r8, [sp, #16]
 8979 05c8 06E7     		b	.L774
 8980              	.LVL1349:
 8981              	.L807:
5699:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
 8982              		.loc 1 5699 0
 8983 05ca 4FF00C08 		mov	r8, #12
 8984              	.LVL1350:
 8985 05ce 22E7     		b	.L775
 8986              	.LVL1351:
 8987              	.L808:
5702:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
 8988              		.loc 1 5702 0
 8989 05d0 4FF00608 		mov	r8, #6
 8990              	.LVL1352:
 8991 05d4 1FE7     		b	.L775
 8992              	.LVL1353:
 8993              	.L809:
5704:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 8994              		.loc 1 5704 0
 8995 05d6 4FF00108 		mov	r8, #1
 8996              	.LVL1354:
 8997 05da 1CE7     		b	.L775
 8998              	.LVL1355:
 8999              	.L777:
5317:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 9000              		.loc 1 5317 0
 9001 05dc 0B20     		movs	r0, #11
 9002              	.LVL1356:
 9003 05de 02E0     		b	.L734
 9004              	.LVL1357:
 9005              	.L778:
5324:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 9006              		.loc 1 5324 0
 9007 05e0 0320     		movs	r0, #3
 9008              	.LVL1358:
 9009 05e2 00E0     		b	.L734
 9010              	.LVL1359:
 9011              	.L779:
5325:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & 
 9012              		.loc 1 5325 0
 9013 05e4 0A20     		movs	r0, #10
 9014              	.LVL1360:
 9015              	.L734:
5738:Middlewares/Third_Party/FatFs/src/ff.c **** 
 9016              		.loc 1 5738 0
 9017 05e6 0BB0     		add	sp, sp, #44
 9018              	.LCFI121:
 9019              		.cfi_remember_state
ARM GAS  /tmp/ccqUXb8n.s 			page 286


 9020              		.cfi_def_cfa_offset 36
 9021              		@ sp needed
 9022 05e8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 9023              	.LVL1361:
 9024              	.L780:
 9025              	.LCFI122:
 9026              		.cfi_restore_state
5333:Middlewares/Third_Party/FatFs/src/ff.c **** 	au /= ss;	/* Cluster size in unit of sector */
 9027              		.loc 1 5333 0
 9028 05ec 1320     		movs	r0, #19
 9029 05ee FAE7     		b	.L734
 9030              	.L781:
 9031 05f0 1320     		movs	r0, #19
 9032 05f2 F8E7     		b	.L734
 9033              	.L782:
 9034 05f4 1320     		movs	r0, #19
 9035 05f6 F6E7     		b	.L734
 9036              	.LVL1362:
 9037              	.L783:
5340:Middlewares/Third_Party/FatFs/src/ff.c **** 
 9038              		.loc 1 5340 0
 9039 05f8 0E20     		movs	r0, #14
 9040 05fa F4E7     		b	.L734
 9041              	.L784:
5353:Middlewares/Third_Party/FatFs/src/ff.c **** 		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 9042              		.loc 1 5353 0
 9043 05fc 0120     		movs	r0, #1
 9044 05fe F2E7     		b	.L734
 9045              	.LVL1363:
 9046              	.L786:
5355:Middlewares/Third_Party/FatFs/src/ff.c **** 		sz_vol -= b_vol;						/* Volume size */
 9047              		.loc 1 5355 0
 9048 0600 0E20     		movs	r0, #14
 9049 0602 F0E7     		b	.L734
 9050              	.L787:
5358:Middlewares/Third_Party/FatFs/src/ff.c **** 
 9051              		.loc 1 5358 0
 9052 0604 0E20     		movs	r0, #14
 9053 0606 EEE7     		b	.L734
 9054              	.L788:
5367:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (opt & FM_FAT32) {	/* FAT32 possible? */
 9055              		.loc 1 5367 0
 9056 0608 1320     		movs	r0, #19
 9057 060a ECE7     		b	.L734
 9058              	.L791:
5373:Middlewares/Third_Party/FatFs/src/ff.c **** 		fmt = FS_FAT16;
 9059              		.loc 1 5373 0
 9060 060c 1320     		movs	r0, #19
 9061 060e EAE7     		b	.L734
 9062              	.LVL1364:
 9063              	.L793:
5553:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {				/* FAT12/16 volume */
 9064              		.loc 1 5553 0
 9065 0610 0E20     		movs	r0, #14
 9066 0612 E8E7     		b	.L734
 9067              	.LVL1365:
 9068              	.L795:
ARM GAS  /tmp/ccqUXb8n.s 			page 287


5582:Middlewares/Third_Party/FatFs/src/ff.c **** 			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 9069              		.loc 1 5582 0
 9070 0614 0E20     		movs	r0, #14
 9071 0616 E6E7     		b	.L734
 9072              	.LVL1366:
 9073              	.L796:
5587:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 9074              		.loc 1 5587 0
 9075 0618 0E20     		movs	r0, #14
 9076 061a E4E7     		b	.L734
 9077              	.LVL1367:
 9078              	.L799:
5599:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 9079              		.loc 1 5599 0
 9080 061c 0E20     		movs	r0, #14
 9081 061e E2E7     		b	.L734
 9082              	.LVL1368:
 9083              	.L800:
5603:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 9084              		.loc 1 5603 0
 9085 0620 0E20     		movs	r0, #14
 9086 0622 E0E7     		b	.L734
 9087              	.LVL1369:
 9088              	.L801:
5606:Middlewares/Third_Party/FatFs/src/ff.c **** 
 9089              		.loc 1 5606 0
 9090 0624 0E20     		movs	r0, #14
 9091 0626 DEE7     		b	.L734
 9092              	.LVL1370:
 9093              	.L803:
5650:Middlewares/Third_Party/FatFs/src/ff.c **** 
 9094              		.loc 1 5650 0
 9095 0628 0120     		movs	r0, #1
 9096 062a DCE7     		b	.L734
 9097              	.L827:
 9098              		.align	2
 9099              	.L826:
 9100 062c 00000000 		.word	.LC1
 9101 0630 0C000000 		.word	.LC2
 9102 0634 20000000 		.word	.LC3
 9103 0638 52526141 		.word	1096897106
 9104 063c 72724161 		.word	1631679090
 9105 0640 F8FFFF00 		.word	16777208
 9106              	.LVL1371:
 9107              	.L805:
5679:Middlewares/Third_Party/FatFs/src/ff.c **** 				mem_set(buf, 0, ss);
 9108              		.loc 1 5679 0
 9109 0644 0120     		movs	r0, #1
 9110 0646 CEE7     		b	.L734
 9111              	.LVL1372:
 9112              	.L806:
5689:Middlewares/Third_Party/FatFs/src/ff.c **** 			sect += n; nsect -= n;
 9113              		.loc 1 5689 0
 9114 0648 0120     		movs	r0, #1
 9115 064a CCE7     		b	.L734
 9116              	.LVL1373:
 9117              	.L810:
ARM GAS  /tmp/ccqUXb8n.s 			page 288


5731:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 9118              		.loc 1 5731 0
 9119 064c 0120     		movs	r0, #1
 9120 064e CAE7     		b	.L734
 9121              	.LVL1374:
 9122              	.L811:
5737:Middlewares/Third_Party/FatFs/src/ff.c **** }
 9123              		.loc 1 5737 0
 9124 0650 0020     		movs	r0, #0
 9125 0652 C8E7     		b	.L734
 9126              		.cfi_endproc
 9127              	.LFE197:
 9129              		.section	.text.f_gets,"ax",%progbits
 9130              		.align	1
 9131              		.global	f_gets
 9132              		.syntax unified
 9133              		.thumb
 9134              		.thumb_func
 9135              		.fpu fpv5-sp-d16
 9137              	f_gets:
 9138              	.LFB198:
5824:Middlewares/Third_Party/FatFs/src/ff.c **** 	int n = 0;
 9139              		.loc 1 5824 0
 9140              		.cfi_startproc
 9141              		@ args = 0, pretend = 0, frame = 8
 9142              		@ frame_needed = 0, uses_anonymous_args = 0
 9143              	.LVL1375:
 9144 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 9145              	.LCFI123:
 9146              		.cfi_def_cfa_offset 24
 9147              		.cfi_offset 4, -24
 9148              		.cfi_offset 5, -20
 9149              		.cfi_offset 6, -16
 9150              		.cfi_offset 7, -12
 9151              		.cfi_offset 8, -8
 9152              		.cfi_offset 14, -4
 9153 0004 82B0     		sub	sp, sp, #8
 9154              	.LCFI124:
 9155              		.cfi_def_cfa_offset 32
 9156 0006 8046     		mov	r8, r0
 9157 0008 0E46     		mov	r6, r1
 9158 000a 1746     		mov	r7, r2
 9159              	.LVL1376:
5826:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE s[2];
 9160              		.loc 1 5826 0
 9161 000c 0446     		mov	r4, r0
5825:Middlewares/Third_Party/FatFs/src/ff.c **** 	TCHAR c, *p = buff;
 9162              		.loc 1 5825 0
 9163 000e 0025     		movs	r5, #0
5831:Middlewares/Third_Party/FatFs/src/ff.c **** #if _LFN_UNICODE
 9164              		.loc 1 5831 0
 9165 0010 01E0     		b	.L829
 9166              	.LVL1377:
 9167              	.L834:
 9168 0012 2246     		mov	r2, r4
 9169              	.LVL1378:
 9170              	.L831:
ARM GAS  /tmp/ccqUXb8n.s 			page 289


 9171 0014 1446     		mov	r4, r2
 9172              	.LVL1379:
 9173              	.L829:
 9174 0016 731E     		subs	r3, r6, #1
 9175 0018 AB42     		cmp	r3, r5
 9176 001a 12DD     		ble	.L830
5876:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (rc != 1) break;
 9177              		.loc 1 5876 0
 9178 001c 6B46     		mov	r3, sp
 9179 001e 0122     		movs	r2, #1
 9180 0020 01A9     		add	r1, sp, #4
 9181 0022 3846     		mov	r0, r7
 9182 0024 FFF7FEFF 		bl	f_read
 9183              	.LVL1380:
5877:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = s[0];
 9184              		.loc 1 5877 0
 9185 0028 009B     		ldr	r3, [sp]
 9186 002a 012B     		cmp	r3, #1
 9187 002c 09D1     		bne	.L830
5878:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 9188              		.loc 1 5878 0
 9189 002e 9DF80430 		ldrb	r3, [sp, #4]	@ zero_extendqisi2
 9190              	.LVL1381:
5880:Middlewares/Third_Party/FatFs/src/ff.c **** 		*p++ = c;
 9191              		.loc 1 5880 0
 9192 0032 0D2B     		cmp	r3, #13
 9193 0034 EDD0     		beq	.L834
5881:Middlewares/Third_Party/FatFs/src/ff.c **** 		n++;
 9194              		.loc 1 5881 0
 9195 0036 621C     		adds	r2, r4, #1
 9196              	.LVL1382:
 9197 0038 2370     		strb	r3, [r4]
5882:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == '\n') break;		/* Break on EOL */
 9198              		.loc 1 5882 0
 9199 003a 0135     		adds	r5, r5, #1
 9200              	.LVL1383:
5883:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 9201              		.loc 1 5883 0
 9202 003c 0A2B     		cmp	r3, #10
 9203 003e E9D1     		bne	.L831
5881:Middlewares/Third_Party/FatFs/src/ff.c **** 		n++;
 9204              		.loc 1 5881 0
 9205 0040 1446     		mov	r4, r2
 9206              	.LVL1384:
 9207              	.L830:
5885:Middlewares/Third_Party/FatFs/src/ff.c **** 	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 9208              		.loc 1 5885 0
 9209 0042 0023     		movs	r3, #0
 9210 0044 2370     		strb	r3, [r4]
5886:Middlewares/Third_Party/FatFs/src/ff.c **** }
 9211              		.loc 1 5886 0
 9212 0046 1DB1     		cbz	r5, .L836
 9213 0048 4046     		mov	r0, r8
 9214              	.L828:
5887:Middlewares/Third_Party/FatFs/src/ff.c **** 
 9215              		.loc 1 5887 0
 9216 004a 02B0     		add	sp, sp, #8
ARM GAS  /tmp/ccqUXb8n.s 			page 290


 9217              	.LCFI125:
 9218              		.cfi_remember_state
 9219              		.cfi_def_cfa_offset 24
 9220              		@ sp needed
 9221 004c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 9222              	.LVL1385:
 9223              	.L836:
 9224              	.LCFI126:
 9225              		.cfi_restore_state
5886:Middlewares/Third_Party/FatFs/src/ff.c **** }
 9226              		.loc 1 5886 0
 9227 0050 0020     		movs	r0, #0
 9228 0052 FAE7     		b	.L828
 9229              		.cfi_endproc
 9230              	.LFE198:
 9232              		.section	.text.f_putc,"ax",%progbits
 9233              		.align	1
 9234              		.global	f_putc
 9235              		.syntax unified
 9236              		.thumb
 9237              		.thumb_func
 9238              		.fpu fpv5-sp-d16
 9240              	f_putc:
 9241              	.LFB202:
5984:Middlewares/Third_Party/FatFs/src/ff.c **** 
5985:Middlewares/Third_Party/FatFs/src/ff.c **** 
5986:Middlewares/Third_Party/FatFs/src/ff.c **** 
5987:Middlewares/Third_Party/FatFs/src/ff.c **** int f_putc (
5988:Middlewares/Third_Party/FatFs/src/ff.c **** 	TCHAR c,	/* A character to be output */
5989:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp		/* Pointer to the file object */
5990:Middlewares/Third_Party/FatFs/src/ff.c **** )
5991:Middlewares/Third_Party/FatFs/src/ff.c **** {
 9242              		.loc 1 5991 0
 9243              		.cfi_startproc
 9244              		@ args = 0, pretend = 0, frame = 80
 9245              		@ frame_needed = 0, uses_anonymous_args = 0
 9246              	.LVL1386:
 9247 0000 10B5     		push	{r4, lr}
 9248              	.LCFI127:
 9249              		.cfi_def_cfa_offset 8
 9250              		.cfi_offset 4, -8
 9251              		.cfi_offset 14, -4
 9252 0002 94B0     		sub	sp, sp, #80
 9253              	.LCFI128:
 9254              		.cfi_def_cfa_offset 88
 9255 0004 0446     		mov	r4, r0
5992:Middlewares/Third_Party/FatFs/src/ff.c **** 	putbuff pb;
5993:Middlewares/Third_Party/FatFs/src/ff.c **** 
5994:Middlewares/Third_Party/FatFs/src/ff.c **** 
5995:Middlewares/Third_Party/FatFs/src/ff.c **** 	putc_init(&pb, fp);
 9256              		.loc 1 5995 0
 9257 0006 01A8     		add	r0, sp, #4
 9258              	.LVL1387:
 9259 0008 FFF7FEFF 		bl	putc_init
 9260              	.LVL1388:
5996:Middlewares/Third_Party/FatFs/src/ff.c **** 	putc_bfd(&pb, c);	/* Put the character */
 9261              		.loc 1 5996 0
ARM GAS  /tmp/ccqUXb8n.s 			page 291


 9262 000c 2146     		mov	r1, r4
 9263 000e 01A8     		add	r0, sp, #4
 9264 0010 FFF7FEFF 		bl	putc_bfd
 9265              	.LVL1389:
5997:Middlewares/Third_Party/FatFs/src/ff.c **** 	return putc_flush(&pb);
 9266              		.loc 1 5997 0
 9267 0014 01A8     		add	r0, sp, #4
 9268 0016 FFF7FEFF 		bl	putc_flush
 9269              	.LVL1390:
5998:Middlewares/Third_Party/FatFs/src/ff.c **** }
 9270              		.loc 1 5998 0
 9271 001a 14B0     		add	sp, sp, #80
 9272              	.LCFI129:
 9273              		.cfi_def_cfa_offset 8
 9274              		@ sp needed
 9275 001c 10BD     		pop	{r4, pc}
 9276              		.cfi_endproc
 9277              	.LFE202:
 9279              		.section	.text.f_puts,"ax",%progbits
 9280              		.align	1
 9281              		.global	f_puts
 9282              		.syntax unified
 9283              		.thumb
 9284              		.thumb_func
 9285              		.fpu fpv5-sp-d16
 9287              	f_puts:
 9288              	.LFB203:
5999:Middlewares/Third_Party/FatFs/src/ff.c **** 
6000:Middlewares/Third_Party/FatFs/src/ff.c **** 
6001:Middlewares/Third_Party/FatFs/src/ff.c **** 
6002:Middlewares/Third_Party/FatFs/src/ff.c **** 
6003:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
6004:Middlewares/Third_Party/FatFs/src/ff.c **** /* Put a string to the file                                              */
6005:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
6006:Middlewares/Third_Party/FatFs/src/ff.c **** 
6007:Middlewares/Third_Party/FatFs/src/ff.c **** int f_puts (
6008:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* str,	/* Pointer to the string to be output */
6009:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp				/* Pointer to the file object */
6010:Middlewares/Third_Party/FatFs/src/ff.c **** )
6011:Middlewares/Third_Party/FatFs/src/ff.c **** {
 9289              		.loc 1 6011 0
 9290              		.cfi_startproc
 9291              		@ args = 0, pretend = 0, frame = 80
 9292              		@ frame_needed = 0, uses_anonymous_args = 0
 9293              	.LVL1391:
 9294 0000 10B5     		push	{r4, lr}
 9295              	.LCFI130:
 9296              		.cfi_def_cfa_offset 8
 9297              		.cfi_offset 4, -8
 9298              		.cfi_offset 14, -4
 9299 0002 94B0     		sub	sp, sp, #80
 9300              	.LCFI131:
 9301              		.cfi_def_cfa_offset 88
 9302 0004 0446     		mov	r4, r0
6012:Middlewares/Third_Party/FatFs/src/ff.c **** 	putbuff pb;
6013:Middlewares/Third_Party/FatFs/src/ff.c **** 
6014:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  /tmp/ccqUXb8n.s 			page 292


6015:Middlewares/Third_Party/FatFs/src/ff.c **** 	putc_init(&pb, fp);
 9303              		.loc 1 6015 0
 9304 0006 01A8     		add	r0, sp, #4
 9305              	.LVL1392:
 9306 0008 FFF7FEFF 		bl	putc_init
 9307              	.LVL1393:
6016:Middlewares/Third_Party/FatFs/src/ff.c **** 	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 9308              		.loc 1 6016 0
 9309 000c 03E0     		b	.L841
 9310              	.L842:
 9311              		.loc 1 6016 0 is_stmt 0 discriminator 2
 9312 000e 0134     		adds	r4, r4, #1
 9313              	.LVL1394:
 9314 0010 01A8     		add	r0, sp, #4
 9315 0012 FFF7FEFF 		bl	putc_bfd
 9316              	.LVL1395:
 9317              	.L841:
 9318              		.loc 1 6016 0 discriminator 1
 9319 0016 2178     		ldrb	r1, [r4]	@ zero_extendqisi2
 9320 0018 0029     		cmp	r1, #0
 9321 001a F8D1     		bne	.L842
6017:Middlewares/Third_Party/FatFs/src/ff.c **** 	return putc_flush(&pb);
 9322              		.loc 1 6017 0 is_stmt 1
 9323 001c 01A8     		add	r0, sp, #4
 9324 001e FFF7FEFF 		bl	putc_flush
 9325              	.LVL1396:
6018:Middlewares/Third_Party/FatFs/src/ff.c **** }
 9326              		.loc 1 6018 0
 9327 0022 14B0     		add	sp, sp, #80
 9328              	.LCFI132:
 9329              		.cfi_def_cfa_offset 8
 9330              		@ sp needed
 9331 0024 10BD     		pop	{r4, pc}
 9332              		.cfi_endproc
 9333              	.LFE203:
 9335              		.section	.text.f_printf,"ax",%progbits
 9336              		.align	1
 9337              		.global	f_printf
 9338              		.syntax unified
 9339              		.thumb
 9340              		.thumb_func
 9341              		.fpu fpv5-sp-d16
 9343              	f_printf:
 9344              	.LFB204:
6019:Middlewares/Third_Party/FatFs/src/ff.c **** 
6020:Middlewares/Third_Party/FatFs/src/ff.c **** 
6021:Middlewares/Third_Party/FatFs/src/ff.c **** 
6022:Middlewares/Third_Party/FatFs/src/ff.c **** 
6023:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
6024:Middlewares/Third_Party/FatFs/src/ff.c **** /* Put a formatted string to the file                                    */
6025:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
6026:Middlewares/Third_Party/FatFs/src/ff.c **** 
6027:Middlewares/Third_Party/FatFs/src/ff.c **** int f_printf (
6028:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp,			/* Pointer to the file object */
6029:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* fmt,	/* Pointer to the format string */
6030:Middlewares/Third_Party/FatFs/src/ff.c **** 	...					/* Optional arguments... */
6031:Middlewares/Third_Party/FatFs/src/ff.c **** )
ARM GAS  /tmp/ccqUXb8n.s 			page 293


6032:Middlewares/Third_Party/FatFs/src/ff.c **** {
 9345              		.loc 1 6032 0
 9346              		.cfi_startproc
 9347              		@ args = 4, pretend = 12, frame = 112
 9348              		@ frame_needed = 0, uses_anonymous_args = 1
 9349              	.LVL1397:
 9350 0000 0EB4     		push	{r1, r2, r3}
 9351              	.LCFI133:
 9352              		.cfi_def_cfa_offset 12
 9353              		.cfi_offset 1, -12
 9354              		.cfi_offset 2, -8
 9355              		.cfi_offset 3, -4
 9356 0002 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 9357              	.LCFI134:
 9358              		.cfi_def_cfa_offset 44
 9359              		.cfi_offset 4, -44
 9360              		.cfi_offset 5, -40
 9361              		.cfi_offset 6, -36
 9362              		.cfi_offset 7, -32
 9363              		.cfi_offset 8, -28
 9364              		.cfi_offset 9, -24
 9365              		.cfi_offset 10, -20
 9366              		.cfi_offset 14, -16
 9367 0006 9DB0     		sub	sp, sp, #116
 9368              	.LCFI135:
 9369              		.cfi_def_cfa_offset 160
 9370 0008 25AC     		add	r4, sp, #148
 9371 000a 54F8045B 		ldr	r5, [r4], #4
6033:Middlewares/Third_Party/FatFs/src/ff.c **** 	va_list arp;
6034:Middlewares/Third_Party/FatFs/src/ff.c **** 	putbuff pb;
6035:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE f, r;
6036:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, j, w;
6037:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD v;
6038:Middlewares/Third_Party/FatFs/src/ff.c **** 	TCHAR c, d, str[32], *p;
6039:Middlewares/Third_Party/FatFs/src/ff.c **** 
6040:Middlewares/Third_Party/FatFs/src/ff.c **** 
6041:Middlewares/Third_Party/FatFs/src/ff.c **** 	putc_init(&pb, fp);
 9372              		.loc 1 6041 0
 9373 000e 0146     		mov	r1, r0
 9374 0010 08A8     		add	r0, sp, #32
 9375              	.LVL1398:
 9376 0012 FFF7FEFF 		bl	putc_init
 9377              	.LVL1399:
6042:Middlewares/Third_Party/FatFs/src/ff.c **** 
6043:Middlewares/Third_Party/FatFs/src/ff.c **** 	va_start(arp, fmt);
 9378              		.loc 1 6043 0
 9379 0016 1B94     		str	r4, [sp, #108]
 9380 0018 03E0     		b	.L845
 9381              	.LVL1400:
 9382              	.L894:
6044:Middlewares/Third_Party/FatFs/src/ff.c **** 
6045:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (;;) {
6046:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = *fmt++;
6047:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == 0) break;			/* End of string */
6048:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c != '%') {				/* Non escape character */
6049:Middlewares/Third_Party/FatFs/src/ff.c **** 			putc_bfd(&pb, c);
 9383              		.loc 1 6049 0
ARM GAS  /tmp/ccqUXb8n.s 			page 294


 9384 001a 08A8     		add	r0, sp, #32
 9385 001c FFF7FEFF 		bl	putc_bfd
 9386              	.LVL1401:
6046:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == 0) break;			/* End of string */
 9387              		.loc 1 6046 0
 9388 0020 2546     		mov	r5, r4
 9389              	.LVL1402:
 9390              	.L845:
 9391 0022 6C1C     		adds	r4, r5, #1
 9392              	.LVL1403:
 9393 0024 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
 9394              	.LVL1404:
6047:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c != '%') {				/* Non escape character */
 9395              		.loc 1 6047 0
 9396 0026 0029     		cmp	r1, #0
 9397 0028 00F00781 		beq	.L846
6048:Middlewares/Third_Party/FatFs/src/ff.c **** 			putc_bfd(&pb, c);
 9398              		.loc 1 6048 0
 9399 002c 2529     		cmp	r1, #37
 9400 002e F4D1     		bne	.L894
 9401              	.LVL1405:
6050:Middlewares/Third_Party/FatFs/src/ff.c **** 			continue;
6051:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
6052:Middlewares/Third_Party/FatFs/src/ff.c **** 		w = f = 0;
6053:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = *fmt++;
 9402              		.loc 1 6053 0
 9403 0030 0235     		adds	r5, r5, #2
 9404              	.LVL1406:
 9405 0032 2178     		ldrb	r1, [r4]	@ zero_extendqisi2
 9406              	.LVL1407:
6054:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == '0') {				/* Flag: '0' padding */
 9407              		.loc 1 6054 0
 9408 0034 3029     		cmp	r1, #48
 9409 0036 04D0     		beq	.L895
6055:Middlewares/Third_Party/FatFs/src/ff.c **** 			f = 1; c = *fmt++;
6056:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
6057:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (c == '-') {			/* Flag: left justified */
 9410              		.loc 1 6057 0
 9411 0038 2D29     		cmp	r1, #45
 9412 003a 06D0     		beq	.L896
6052:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = *fmt++;
 9413              		.loc 1 6052 0
 9414 003c 0026     		movs	r6, #0
 9415              	.LVL1408:
 9416              	.L850:
6055:Middlewares/Third_Party/FatFs/src/ff.c **** 			f = 1; c = *fmt++;
 9417              		.loc 1 6055 0
 9418 003e 0024     		movs	r4, #0
 9419 0040 0FE0     		b	.L851
 9420              	.LVL1409:
 9421              	.L895:
 9422 0042 A51C     		adds	r5, r4, #2
 9423              	.LVL1410:
 9424 0044 6178     		ldrb	r1, [r4, #1]	@ zero_extendqisi2
 9425              	.LVL1411:
 9426 0046 0126     		movs	r6, #1
 9427 0048 F9E7     		b	.L850
ARM GAS  /tmp/ccqUXb8n.s 			page 295


 9428              	.LVL1412:
 9429              	.L896:
6058:Middlewares/Third_Party/FatFs/src/ff.c **** 				f = 2; c = *fmt++;
 9430              		.loc 1 6058 0
 9431 004a A51C     		adds	r5, r4, #2
 9432              	.LVL1413:
 9433 004c 6178     		ldrb	r1, [r4, #1]	@ zero_extendqisi2
 9434              	.LVL1414:
 9435 004e 0226     		movs	r6, #2
 9436 0050 F5E7     		b	.L850
 9437              	.LVL1415:
 9438              	.L852:
6059:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
6060:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
6061:Middlewares/Third_Party/FatFs/src/ff.c **** 		while (IsDigit(c)) {		/* Precision */
6062:Middlewares/Third_Party/FatFs/src/ff.c **** 			w = w * 10 + c - '0';
 9439              		.loc 1 6062 0
 9440 0052 04EB8404 		add	r4, r4, r4, lsl #2
 9441              	.LVL1416:
 9442 0056 6300     		lsls	r3, r4, #1
 9443 0058 1944     		add	r1, r1, r3
 9444              	.LVL1417:
 9445 005a A1F13004 		sub	r4, r1, #48
 9446              	.LVL1418:
6063:Middlewares/Third_Party/FatFs/src/ff.c **** 			c = *fmt++;
 9447              		.loc 1 6063 0
 9448 005e 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
 9449              	.LVL1419:
 9450 0060 0135     		adds	r5, r5, #1
 9451              	.LVL1420:
 9452              	.L851:
6061:Middlewares/Third_Party/FatFs/src/ff.c **** 			w = w * 10 + c - '0';
 9453              		.loc 1 6061 0
 9454 0062 A1F13003 		sub	r3, r1, #48
 9455 0066 DBB2     		uxtb	r3, r3
 9456 0068 092B     		cmp	r3, #9
 9457 006a F2D9     		bls	.L852
6064:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
6065:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 9458              		.loc 1 6065 0
 9459 006c 4C29     		cmp	r1, #76
 9460 006e 18BF     		it	ne
 9461 0070 6C29     		cmpne	r1, #108
 9462 0072 03D1     		bne	.L853
6066:Middlewares/Third_Party/FatFs/src/ff.c **** 			f |= 4; c = *fmt++;
 9463              		.loc 1 6066 0
 9464 0074 46F00406 		orr	r6, r6, #4
 9465              	.LVL1421:
 9466 0078 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
 9467              	.LVL1422:
 9468 007a 0135     		adds	r5, r5, #1
 9469              	.LVL1423:
 9470              	.L853:
6067:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
6068:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!c) break;
 9471              		.loc 1 6068 0
 9472 007c 0029     		cmp	r1, #0
ARM GAS  /tmp/ccqUXb8n.s 			page 296


 9473 007e 00F0DC80 		beq	.L846
 9474              	.LVL1424:
6069:Middlewares/Third_Party/FatFs/src/ff.c **** 		d = c;
6070:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (IsLower(d)) d -= 0x20;
 9475              		.loc 1 6070 0
 9476 0082 A1F16103 		sub	r3, r1, #97
 9477 0086 DBB2     		uxtb	r3, r3
 9478 0088 192B     		cmp	r3, #25
 9479 008a 14D8     		bhi	.L888
 9480              		.loc 1 6070 0 is_stmt 0 discriminator 1
 9481 008c A1F12003 		sub	r3, r1, #32
 9482 0090 DBB2     		uxtb	r3, r3
 9483              	.LVL1425:
 9484              	.L854:
6071:Middlewares/Third_Party/FatFs/src/ff.c **** 		switch (d) {				/* Type is... */
 9485              		.loc 1 6071 0 is_stmt 1
 9486 0092 A3F14202 		sub	r2, r3, #66
 9487 0096 162A     		cmp	r2, #22
 9488 0098 4CD8     		bhi	.L855
 9489 009a DFE802F0 		tbb	[pc, r2]
 9490              	.L857:
 9491 009e 4F       		.byte	(.L856-.L857)/2
 9492 009f 3D       		.byte	(.L858-.L857)/2
 9493 00a0 45       		.byte	(.L859-.L857)/2
 9494 00a1 4B       		.byte	(.L855-.L857)/2
 9495 00a2 4B       		.byte	(.L855-.L857)/2
 9496 00a3 4B       		.byte	(.L855-.L857)/2
 9497 00a4 4B       		.byte	(.L855-.L857)/2
 9498 00a5 4B       		.byte	(.L855-.L857)/2
 9499 00a6 4B       		.byte	(.L855-.L857)/2
 9500 00a7 4B       		.byte	(.L855-.L857)/2
 9501 00a8 4B       		.byte	(.L855-.L857)/2
 9502 00a9 4B       		.byte	(.L855-.L857)/2
 9503 00aa 4B       		.byte	(.L855-.L857)/2
 9504 00ab 52       		.byte	(.L889-.L857)/2
 9505 00ac 4B       		.byte	(.L855-.L857)/2
 9506 00ad 4B       		.byte	(.L855-.L857)/2
 9507 00ae 4B       		.byte	(.L855-.L857)/2
 9508 00af 0E       		.byte	(.L861-.L857)/2
 9509 00b0 4B       		.byte	(.L855-.L857)/2
 9510 00b1 45       		.byte	(.L859-.L857)/2
 9511 00b2 4B       		.byte	(.L855-.L857)/2
 9512 00b3 4B       		.byte	(.L855-.L857)/2
 9513 00b4 48       		.byte	(.L862-.L857)/2
 9514              	.LVL1426:
 9515 00b5 00       		.p2align 1
 9516              	.L888:
6069:Middlewares/Third_Party/FatFs/src/ff.c **** 		d = c;
 9517              		.loc 1 6069 0
 9518 00b6 0B46     		mov	r3, r1
 9519 00b8 EBE7     		b	.L854
 9520              	.LVL1427:
 9521              	.L861:
6072:Middlewares/Third_Party/FatFs/src/ff.c **** 		case 'S' :					/* String */
6073:Middlewares/Third_Party/FatFs/src/ff.c **** 			p = va_arg(arp, TCHAR*);
 9522              		.loc 1 6073 0
 9523 00ba 1B9B     		ldr	r3, [sp, #108]
ARM GAS  /tmp/ccqUXb8n.s 			page 297


 9524              	.LVL1428:
 9525 00bc 1A1D     		adds	r2, r3, #4
 9526 00be 1B92     		str	r2, [sp, #108]
 9527 00c0 D3F80080 		ldr	r8, [r3]
 9528              	.LVL1429:
6074:Middlewares/Third_Party/FatFs/src/ff.c **** 			for (j = 0; p[j]; j++) ;
 9529              		.loc 1 6074 0
 9530 00c4 0027     		movs	r7, #0
 9531 00c6 00E0     		b	.L863
 9532              	.LVL1430:
 9533              	.L864:
 9534              		.loc 1 6074 0 is_stmt 0 discriminator 3
 9535 00c8 0137     		adds	r7, r7, #1
 9536              	.LVL1431:
 9537              	.L863:
 9538              		.loc 1 6074 0 discriminator 1
 9539 00ca 18F80730 		ldrb	r3, [r8, r7]	@ zero_extendqisi2
 9540 00ce 002B     		cmp	r3, #0
 9541 00d0 FAD1     		bne	.L864
6075:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!(f & 2)) {
 9542              		.loc 1 6075 0 is_stmt 1
 9543 00d2 16F0020F 		tst	r6, #2
 9544 00d6 10D1     		bne	.L868
 9545 00d8 05E0     		b	.L865
 9546              	.LVL1432:
 9547              	.L867:
6076:Middlewares/Third_Party/FatFs/src/ff.c **** 				while (j++ < w) putc_bfd(&pb, ' ');
 9548              		.loc 1 6076 0 discriminator 2
 9549 00da 2021     		movs	r1, #32
 9550 00dc 0DEB0100 		add	r0, sp, r1
 9551 00e0 FFF7FEFF 		bl	putc_bfd
 9552              	.LVL1433:
 9553 00e4 3746     		mov	r7, r6
 9554              	.LVL1434:
 9555              	.L865:
 9556              		.loc 1 6076 0 is_stmt 0 discriminator 1
 9557 00e6 7E1C     		adds	r6, r7, #1
 9558              	.LVL1435:
 9559 00e8 A742     		cmp	r7, r4
 9560 00ea F6D3     		bcc	.L867
 9561              		.loc 1 6076 0
 9562 00ec 3746     		mov	r7, r6
 9563 00ee 04E0     		b	.L868
 9564              	.LVL1436:
 9565              	.L869:
6077:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
6078:Middlewares/Third_Party/FatFs/src/ff.c **** 			while (*p) putc_bfd(&pb, *p++);
 9566              		.loc 1 6078 0 is_stmt 1 discriminator 2
 9567 00f0 08F10108 		add	r8, r8, #1
 9568              	.LVL1437:
 9569 00f4 08A8     		add	r0, sp, #32
 9570 00f6 FFF7FEFF 		bl	putc_bfd
 9571              	.LVL1438:
 9572              	.L868:
 9573              		.loc 1 6078 0 is_stmt 0 discriminator 1
 9574 00fa 98F80010 		ldrb	r1, [r8]	@ zero_extendqisi2
 9575 00fe 0029     		cmp	r1, #0
ARM GAS  /tmp/ccqUXb8n.s 			page 298


 9576 0100 F6D1     		bne	.L869
 9577 0102 05E0     		b	.L870
 9578              	.LVL1439:
 9579              	.L871:
6079:Middlewares/Third_Party/FatFs/src/ff.c **** 			while (j++ < w) putc_bfd(&pb, ' ');
 9580              		.loc 1 6079 0 is_stmt 1 discriminator 2
 9581 0104 2021     		movs	r1, #32
 9582 0106 0DEB0100 		add	r0, sp, r1
 9583 010a FFF7FEFF 		bl	putc_bfd
 9584              	.LVL1440:
 9585 010e 3746     		mov	r7, r6
 9586              	.LVL1441:
 9587              	.L870:
 9588              		.loc 1 6079 0 is_stmt 0 discriminator 1
 9589 0110 7E1C     		adds	r6, r7, #1
 9590              	.LVL1442:
 9591 0112 A742     		cmp	r7, r4
 9592 0114 F6D3     		bcc	.L871
 9593 0116 84E7     		b	.L845
 9594              	.LVL1443:
 9595              	.L858:
6080:Middlewares/Third_Party/FatFs/src/ff.c **** 			continue;
6081:Middlewares/Third_Party/FatFs/src/ff.c **** 
6082:Middlewares/Third_Party/FatFs/src/ff.c **** 		case 'C' :					/* Character */
6083:Middlewares/Third_Party/FatFs/src/ff.c **** 			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 9596              		.loc 1 6083 0 is_stmt 1
 9597 0118 1B9B     		ldr	r3, [sp, #108]
 9598              	.LVL1444:
 9599 011a 1A1D     		adds	r2, r3, #4
 9600 011c 1B92     		str	r2, [sp, #108]
 9601 011e 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 9602              	.LVL1445:
 9603 0120 08A8     		add	r0, sp, #32
 9604 0122 FFF7FEFF 		bl	putc_bfd
 9605              	.LVL1446:
 9606 0126 7CE7     		b	.L845
 9607              	.LVL1447:
 9608              	.L859:
6084:Middlewares/Third_Party/FatFs/src/ff.c **** 
6085:Middlewares/Third_Party/FatFs/src/ff.c **** 		case 'B' :					/* Binary */
6086:Middlewares/Third_Party/FatFs/src/ff.c **** 			r = 2; break;
6087:Middlewares/Third_Party/FatFs/src/ff.c **** 
6088:Middlewares/Third_Party/FatFs/src/ff.c **** 		case 'O' :					/* Octal */
6089:Middlewares/Third_Party/FatFs/src/ff.c **** 			r = 8; break;
6090:Middlewares/Third_Party/FatFs/src/ff.c **** 
6091:Middlewares/Third_Party/FatFs/src/ff.c **** 		case 'D' :					/* Signed decimal */
6092:Middlewares/Third_Party/FatFs/src/ff.c **** 		case 'U' :					/* Unsigned decimal */
6093:Middlewares/Third_Party/FatFs/src/ff.c **** 			r = 10; break;
 9609              		.loc 1 6093 0
 9610 0128 4FF00A0E 		mov	lr, #10
 9611 012c 0BE0     		b	.L860
 9612              	.LVL1448:
 9613              	.L862:
6094:Middlewares/Third_Party/FatFs/src/ff.c **** 
6095:Middlewares/Third_Party/FatFs/src/ff.c **** 		case 'X' :					/* Hexdecimal */
6096:Middlewares/Third_Party/FatFs/src/ff.c **** 			r = 16; break;
 9614              		.loc 1 6096 0
ARM GAS  /tmp/ccqUXb8n.s 			page 299


 9615 012e 4FF0100E 		mov	lr, #16
 9616 0132 08E0     		b	.L860
 9617              	.LVL1449:
 9618              	.L855:
6097:Middlewares/Third_Party/FatFs/src/ff.c **** 
6098:Middlewares/Third_Party/FatFs/src/ff.c **** 		default:					/* Unknown type (pass-through) */
6099:Middlewares/Third_Party/FatFs/src/ff.c **** 			putc_bfd(&pb, c); continue;
 9619              		.loc 1 6099 0
 9620 0134 08A8     		add	r0, sp, #32
 9621 0136 FFF7FEFF 		bl	putc_bfd
 9622              	.LVL1450:
 9623 013a 72E7     		b	.L845
 9624              	.LVL1451:
 9625              	.L856:
6086:Middlewares/Third_Party/FatFs/src/ff.c **** 
 9626              		.loc 1 6086 0
 9627 013c 4FF0020E 		mov	lr, #2
 9628 0140 01E0     		b	.L860
 9629              	.L889:
6089:Middlewares/Third_Party/FatFs/src/ff.c **** 
 9630              		.loc 1 6089 0
 9631 0142 4FF0080E 		mov	lr, #8
 9632              	.L860:
 9633              	.LVL1452:
6100:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
6101:Middlewares/Third_Party/FatFs/src/ff.c **** 
6102:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Get an argument and put it in numeral */
6103:Middlewares/Third_Party/FatFs/src/ff.c **** 		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_
 9634              		.loc 1 6103 0
 9635 0146 16F0040F 		tst	r6, #4
 9636 014a 13D0     		beq	.L872
 9637 014c 1B9A     		ldr	r2, [sp, #108]
 9638 014e 101D     		adds	r0, r2, #4
 9639 0150 1B90     		str	r0, [sp, #108]
 9640 0152 D2F80080 		ldr	r8, [r2]
 9641              	.L873:
 9642              	.LVL1453:
6104:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (d == 'D' && (v & 0x80000000)) {
 9643              		.loc 1 6104 0 discriminator 8
 9644 0156 4FEAD872 		lsr	r2, r8, #31
 9645 015a 442B     		cmp	r3, #68
 9646 015c 14BF     		ite	ne
 9647 015e 0023     		movne	r3, #0
 9648 0160 02F00103 		andeq	r3, r2, #1
 9649              	.LVL1454:
 9650 0164 1BB1     		cbz	r3, .L875
6105:Middlewares/Third_Party/FatFs/src/ff.c **** 			v = 0 - v;
 9651              		.loc 1 6105 0
 9652 0166 C8F10008 		rsb	r8, r8, #0
 9653              	.LVL1455:
6106:Middlewares/Third_Party/FatFs/src/ff.c **** 			f |= 8;
 9654              		.loc 1 6106 0
 9655 016a 46F00806 		orr	r6, r6, #8
 9656              	.LVL1456:
 9657              	.L875:
6107:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
6108:Middlewares/Third_Party/FatFs/src/ff.c **** 		i = 0;
ARM GAS  /tmp/ccqUXb8n.s 			page 300


 9658              		.loc 1 6108 0
 9659 016e 4FF0000C 		mov	ip, #0
 9660 0172 20E0     		b	.L878
 9661              	.LVL1457:
 9662              	.L872:
6103:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (d == 'D' && (v & 0x80000000)) {
 9663              		.loc 1 6103 0 discriminator 2
 9664 0174 442B     		cmp	r3, #68
 9665 0176 05D0     		beq	.L897
6103:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (d == 'D' && (v & 0x80000000)) {
 9666              		.loc 1 6103 0 is_stmt 0
 9667 0178 1B9A     		ldr	r2, [sp, #108]
 9668 017a 101D     		adds	r0, r2, #4
 9669 017c 1B90     		str	r0, [sp, #108]
 9670 017e D2F80080 		ldr	r8, [r2]
 9671 0182 E8E7     		b	.L873
 9672              	.L897:
 9673 0184 1B9A     		ldr	r2, [sp, #108]
 9674 0186 101D     		adds	r0, r2, #4
 9675 0188 1B90     		str	r0, [sp, #108]
 9676 018a D2F80080 		ldr	r8, [r2]
 9677 018e E2E7     		b	.L873
 9678              	.LVL1458:
 9679              	.L899:
6109:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
6110:Middlewares/Third_Party/FatFs/src/ff.c **** 			d = (TCHAR)(v % r); v /= r;
6111:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 9680              		.loc 1 6111 0 is_stmt 1
 9681 0190 2722     		movs	r2, #39
 9682              	.L877:
 9683              		.loc 1 6111 0 is_stmt 0 discriminator 5
 9684 0192 1344     		add	r3, r3, r2
 9685              	.LVL1459:
 9686 0194 DBB2     		uxtb	r3, r3
 9687              	.LVL1460:
 9688              	.L876:
6112:Middlewares/Third_Party/FatFs/src/ff.c **** 			str[i++] = d + '0';
 9689              		.loc 1 6112 0 is_stmt 1
 9690 0196 0CF10107 		add	r7, ip, #1
 9691              	.LVL1461:
 9692 019a 3033     		adds	r3, r3, #48
 9693              	.LVL1462:
 9694 019c 1CAA     		add	r2, sp, #112
 9695 019e 6244     		add	r2, r2, ip
 9696 01a0 02F8703C 		strb	r3, [r2, #-112]
6113:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (v && i < sizeof str / sizeof str[0]);
 9697              		.loc 1 6113 0
 9698 01a4 1F2F     		cmp	r7, #31
 9699 01a6 8CBF     		ite	hi
 9700 01a8 0022     		movhi	r2, #0
 9701 01aa 0122     		movls	r2, #1
 9702 01ac 0028     		cmp	r0, #0
 9703 01ae 08BF     		it	eq
 9704 01b0 0022     		moveq	r2, #0
 9705 01b2 62B1     		cbz	r2, .L898
6112:Middlewares/Third_Party/FatFs/src/ff.c **** 			str[i++] = d + '0';
 9706              		.loc 1 6112 0
ARM GAS  /tmp/ccqUXb8n.s 			page 301


 9707 01b4 BC46     		mov	ip, r7
 9708              	.LVL1463:
 9709              	.L878:
6110:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 9710              		.loc 1 6110 0
 9711 01b6 B8FBFEF0 		udiv	r0, r8, lr
 9712 01ba 0EFB1083 		mls	r3, lr, r0, r8
 9713 01be DBB2     		uxtb	r3, r3
 9714              	.LVL1464:
 9715 01c0 8046     		mov	r8, r0
 9716              	.LVL1465:
6111:Middlewares/Third_Party/FatFs/src/ff.c **** 			str[i++] = d + '0';
 9717              		.loc 1 6111 0
 9718 01c2 092B     		cmp	r3, #9
 9719 01c4 E7D9     		bls	.L876
6111:Middlewares/Third_Party/FatFs/src/ff.c **** 			str[i++] = d + '0';
 9720              		.loc 1 6111 0 is_stmt 0 discriminator 1
 9721 01c6 7829     		cmp	r1, #120
 9722 01c8 E2D0     		beq	.L899
6111:Middlewares/Third_Party/FatFs/src/ff.c **** 			str[i++] = d + '0';
 9723              		.loc 1 6111 0
 9724 01ca 0722     		movs	r2, #7
 9725 01cc E1E7     		b	.L877
 9726              	.LVL1466:
 9727              	.L898:
6114:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (f & 8) str[i++] = '-';
 9728              		.loc 1 6114 0 is_stmt 1
 9729 01ce 16F0080F 		tst	r6, #8
 9730 01d2 06D0     		beq	.L879
 9731              	.LVL1467:
 9732              		.loc 1 6114 0 is_stmt 0 discriminator 1
 9733 01d4 1CAB     		add	r3, sp, #112
 9734 01d6 1F44     		add	r7, r7, r3
 9735 01d8 2D23     		movs	r3, #45
 9736 01da 07F8703C 		strb	r3, [r7, #-112]
 9737 01de 0CF10207 		add	r7, ip, #2
 9738              	.LVL1468:
 9739              	.L879:
6115:Middlewares/Third_Party/FatFs/src/ff.c **** 		j = i; d = (f & 1) ? '0' : ' ';
 9740              		.loc 1 6115 0 is_stmt 1
 9741 01e2 16F0010F 		tst	r6, #1
 9742 01e6 03D0     		beq	.L892
 9743 01e8 4FF0300A 		mov	r10, #48
 9744              	.L880:
 9745              	.LVL1469:
 9746              		.loc 1 6115 0 is_stmt 0 discriminator 4
 9747 01ec B846     		mov	r8, r7
6116:Middlewares/Third_Party/FatFs/src/ff.c **** 		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 9748              		.loc 1 6116 0 is_stmt 1 discriminator 4
 9749 01ee 07E0     		b	.L881
 9750              	.LVL1470:
 9751              	.L892:
6115:Middlewares/Third_Party/FatFs/src/ff.c **** 		j = i; d = (f & 1) ? '0' : ' ';
 9752              		.loc 1 6115 0
 9753 01f0 4FF0200A 		mov	r10, #32
 9754 01f4 FAE7     		b	.L880
 9755              	.LVL1471:
ARM GAS  /tmp/ccqUXb8n.s 			page 302


 9756              	.L883:
 9757              		.loc 1 6116 0 discriminator 3
 9758 01f6 5146     		mov	r1, r10
 9759 01f8 08A8     		add	r0, sp, #32
 9760 01fa FFF7FEFF 		bl	putc_bfd
 9761              	.LVL1472:
 9762 01fe C846     		mov	r8, r9
 9763              	.LVL1473:
 9764              	.L881:
 9765              		.loc 1 6116 0 is_stmt 0 discriminator 1
 9766 0200 16F0020F 		tst	r6, #2
 9767 0204 04D1     		bne	.L884
 9768              		.loc 1 6116 0 discriminator 2
 9769 0206 08F10109 		add	r9, r8, #1
 9770              	.LVL1474:
 9771 020a A045     		cmp	r8, r4
 9772 020c F3D3     		bcc	.L883
 9773              		.loc 1 6116 0
 9774 020e C846     		mov	r8, r9
 9775              	.LVL1475:
 9776              	.L884:
6117:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
6118:Middlewares/Third_Party/FatFs/src/ff.c **** 			putc_bfd(&pb, str[--i]);
 9777              		.loc 1 6118 0 is_stmt 1 discriminator 1
 9778 0210 013F     		subs	r7, r7, #1
 9779              	.LVL1476:
 9780 0212 1CAB     		add	r3, sp, #112
 9781 0214 3B44     		add	r3, r3, r7
 9782 0216 13F8701C 		ldrb	r1, [r3, #-112]	@ zero_extendqisi2
 9783 021a 08A8     		add	r0, sp, #32
 9784 021c FFF7FEFF 		bl	putc_bfd
 9785              	.LVL1477:
6119:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (i);
 9786              		.loc 1 6119 0 discriminator 1
 9787 0220 002F     		cmp	r7, #0
 9788 0222 F5D1     		bne	.L884
 9789 0224 04E0     		b	.L885
 9790              	.LVL1478:
 9791              	.L886:
6120:Middlewares/Third_Party/FatFs/src/ff.c **** 		while (j++ < w) putc_bfd(&pb, d);
 9792              		.loc 1 6120 0 discriminator 2
 9793 0226 5146     		mov	r1, r10
 9794 0228 08A8     		add	r0, sp, #32
 9795 022a FFF7FEFF 		bl	putc_bfd
 9796              	.LVL1479:
 9797 022e B046     		mov	r8, r6
 9798              	.LVL1480:
 9799              	.L885:
 9800              		.loc 1 6120 0 is_stmt 0 discriminator 1
 9801 0230 08F10106 		add	r6, r8, #1
 9802              	.LVL1481:
 9803 0234 A045     		cmp	r8, r4
 9804 0236 F6D3     		bcc	.L886
 9805 0238 F3E6     		b	.L845
 9806              	.LVL1482:
 9807              	.L846:
6121:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
ARM GAS  /tmp/ccqUXb8n.s 			page 303


6122:Middlewares/Third_Party/FatFs/src/ff.c **** 
6123:Middlewares/Third_Party/FatFs/src/ff.c **** 	va_end(arp);
6124:Middlewares/Third_Party/FatFs/src/ff.c **** 
6125:Middlewares/Third_Party/FatFs/src/ff.c **** 	return putc_flush(&pb);
 9808              		.loc 1 6125 0 is_stmt 1
 9809 023a 08A8     		add	r0, sp, #32
 9810 023c FFF7FEFF 		bl	putc_flush
 9811              	.LVL1483:
6126:Middlewares/Third_Party/FatFs/src/ff.c **** }
 9812              		.loc 1 6126 0
 9813 0240 1DB0     		add	sp, sp, #116
 9814              	.LCFI136:
 9815              		.cfi_def_cfa_offset 44
 9816              		@ sp needed
 9817 0242 BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 9818              	.LCFI137:
 9819              		.cfi_restore 14
 9820              		.cfi_restore 10
 9821              		.cfi_restore 9
 9822              		.cfi_restore 8
 9823              		.cfi_restore 7
 9824              		.cfi_restore 6
 9825              		.cfi_restore 5
 9826              		.cfi_restore 4
 9827              		.cfi_def_cfa_offset 12
 9828 0246 03B0     		add	sp, sp, #12
 9829              	.LCFI138:
 9830              		.cfi_restore 3
 9831              		.cfi_restore 2
 9832              		.cfi_restore 1
 9833              		.cfi_def_cfa_offset 0
 9834 0248 7047     		bx	lr
 9835              		.cfi_endproc
 9836              	.LFE204:
 9838              		.section	.bss.FatFs,"aw",%nobits
 9839              		.align	2
 9840              		.set	.LANCHOR2,. + 0
 9843              	FatFs:
 9844 0000 00000000 		.space	4
 9845              		.section	.bss.Files,"aw",%nobits
 9846              		.align	2
 9847              		.set	.LANCHOR0,. + 0
 9850              	Files:
 9851 0000 00000000 		.space	32
 9851      00000000 
 9851      00000000 
 9851      00000000 
 9851      00000000 
 9852              		.section	.bss.Fsid,"aw",%nobits
 9853              		.align	1
 9854              		.set	.LANCHOR3,. + 0
 9857              	Fsid:
 9858 0000 0000     		.space	2
 9859              		.section	.rodata.ExCvt,"a",%progbits
 9860              		.align	2
 9861              		.set	.LANCHOR1,. + 0
 9864              	ExCvt:
ARM GAS  /tmp/ccqUXb8n.s 			page 304


 9865 0000 43       		.byte	67
 9866 0001 55       		.byte	85
 9867 0002 45       		.byte	69
 9868 0003 41       		.byte	65
 9869 0004 41       		.byte	65
 9870 0005 41       		.byte	65
 9871 0006 41       		.byte	65
 9872 0007 43       		.byte	67
 9873 0008 45       		.byte	69
 9874 0009 45       		.byte	69
 9875 000a 45       		.byte	69
 9876 000b 49       		.byte	73
 9877 000c 49       		.byte	73
 9878 000d 49       		.byte	73
 9879 000e 41       		.byte	65
 9880 000f 41       		.byte	65
 9881 0010 45       		.byte	69
 9882 0011 92       		.byte	-110
 9883 0012 92       		.byte	-110
 9884 0013 4F       		.byte	79
 9885 0014 4F       		.byte	79
 9886 0015 4F       		.byte	79
 9887 0016 55       		.byte	85
 9888 0017 55       		.byte	85
 9889 0018 59       		.byte	89
 9890 0019 4F       		.byte	79
 9891 001a 55       		.byte	85
 9892 001b 4F       		.byte	79
 9893 001c 9C       		.byte	-100
 9894 001d 4F       		.byte	79
 9895 001e 9E       		.byte	-98
 9896 001f 9F       		.byte	-97
 9897 0020 41       		.byte	65
 9898 0021 49       		.byte	73
 9899 0022 4F       		.byte	79
 9900 0023 55       		.byte	85
 9901 0024 A5       		.byte	-91
 9902 0025 A5       		.byte	-91
 9903 0026 A6       		.byte	-90
 9904 0027 A7       		.byte	-89
 9905 0028 A8       		.byte	-88
 9906 0029 A9       		.byte	-87
 9907 002a AA       		.byte	-86
 9908 002b AB       		.byte	-85
 9909 002c AC       		.byte	-84
 9910 002d AD       		.byte	-83
 9911 002e AE       		.byte	-82
 9912 002f AF       		.byte	-81
 9913 0030 B0       		.byte	-80
 9914 0031 B1       		.byte	-79
 9915 0032 B2       		.byte	-78
 9916 0033 B3       		.byte	-77
 9917 0034 B4       		.byte	-76
 9918 0035 41       		.byte	65
 9919 0036 41       		.byte	65
 9920 0037 41       		.byte	65
 9921 0038 B8       		.byte	-72
ARM GAS  /tmp/ccqUXb8n.s 			page 305


 9922 0039 B9       		.byte	-71
 9923 003a BA       		.byte	-70
 9924 003b BB       		.byte	-69
 9925 003c BC       		.byte	-68
 9926 003d BD       		.byte	-67
 9927 003e BE       		.byte	-66
 9928 003f BF       		.byte	-65
 9929 0040 C0       		.byte	-64
 9930 0041 C1       		.byte	-63
 9931 0042 C2       		.byte	-62
 9932 0043 C3       		.byte	-61
 9933 0044 C4       		.byte	-60
 9934 0045 C5       		.byte	-59
 9935 0046 41       		.byte	65
 9936 0047 41       		.byte	65
 9937 0048 C8       		.byte	-56
 9938 0049 C9       		.byte	-55
 9939 004a CA       		.byte	-54
 9940 004b CB       		.byte	-53
 9941 004c CC       		.byte	-52
 9942 004d CD       		.byte	-51
 9943 004e CE       		.byte	-50
 9944 004f CF       		.byte	-49
 9945 0050 D1       		.byte	-47
 9946 0051 D1       		.byte	-47
 9947 0052 45       		.byte	69
 9948 0053 45       		.byte	69
 9949 0054 45       		.byte	69
 9950 0055 49       		.byte	73
 9951 0056 49       		.byte	73
 9952 0057 49       		.byte	73
 9953 0058 49       		.byte	73
 9954 0059 D9       		.byte	-39
 9955 005a DA       		.byte	-38
 9956 005b DB       		.byte	-37
 9957 005c DC       		.byte	-36
 9958 005d DD       		.byte	-35
 9959 005e 49       		.byte	73
 9960 005f DF       		.byte	-33
 9961 0060 4F       		.byte	79
 9962 0061 E1       		.byte	-31
 9963 0062 4F       		.byte	79
 9964 0063 4F       		.byte	79
 9965 0064 4F       		.byte	79
 9966 0065 4F       		.byte	79
 9967 0066 E6       		.byte	-26
 9968 0067 E8       		.byte	-24
 9969 0068 E8       		.byte	-24
 9970 0069 55       		.byte	85
 9971 006a 55       		.byte	85
 9972 006b 55       		.byte	85
 9973 006c 59       		.byte	89
 9974 006d 59       		.byte	89
 9975 006e EE       		.byte	-18
 9976 006f EF       		.byte	-17
 9977 0070 F0       		.byte	-16
 9978 0071 F1       		.byte	-15
ARM GAS  /tmp/ccqUXb8n.s 			page 306


 9979 0072 F2       		.byte	-14
 9980 0073 F3       		.byte	-13
 9981 0074 F4       		.byte	-12
 9982 0075 F5       		.byte	-11
 9983 0076 F6       		.byte	-10
 9984 0077 F7       		.byte	-9
 9985 0078 F8       		.byte	-8
 9986 0079 F9       		.byte	-7
 9987 007a FA       		.byte	-6
 9988 007b FB       		.byte	-5
 9989 007c FC       		.byte	-4
 9990 007d FD       		.byte	-3
 9991 007e FE       		.byte	-2
 9992 007f FF       		.byte	-1
 9993              		.section	.rodata.create_name.str1.4,"aMS",%progbits,1
 9994              		.align	2
 9995              	.LC0:
 9996 0000 222A2B2C 		.ascii	"\"*+,:;<=>?[]|\177\000"
 9996      3A3B3C3D 
 9996      3E3F5B5D 
 9996      7C7F00
 9997              		.section	.rodata.cst.12602,"a",%progbits
 9998              		.align	2
 9999              		.set	.LANCHOR5,. + 0
 10002              	cst.12602:
 10003 0000 0100     		.short	1
 10004 0002 0400     		.short	4
 10005 0004 1000     		.short	16
 10006 0006 4000     		.short	64
 10007 0008 0001     		.short	256
 10008 000a 0002     		.short	512
 10009 000c 0000     		.short	0
 10010              		.section	.rodata.cst32.12603,"a",%progbits
 10011              		.align	2
 10012              		.set	.LANCHOR4,. + 0
 10015              	cst32.12603:
 10016 0000 0100     		.short	1
 10017 0002 0200     		.short	2
 10018 0004 0400     		.short	4
 10019 0006 0800     		.short	8
 10020 0008 1000     		.short	16
 10021 000a 2000     		.short	32
 10022 000c 0000     		.short	0
 10023              		.section	.rodata.f_mkfs.str1.4,"aMS",%progbits,1
 10024              		.align	2
 10025              	.LC1:
 10026 0000 EBFE904D 		.ascii	"\353\376\220MSDOS5.0\000"
 10026      53444F53 
 10026      352E3000 
 10027              	.LC2:
 10028 000c 4E4F204E 		.ascii	"NO NAME    FAT32   \000"
 10028      414D4520 
 10028      20202046 
 10028      41543332 
 10028      20202000 
 10029              	.LC3:
 10030 0020 4E4F204E 		.ascii	"NO NAME    FAT     \000"
ARM GAS  /tmp/ccqUXb8n.s 			page 307


 10030      414D4520 
 10030      20202046 
 10030      41542020 
 10030      20202000 
 10031              		.text
 10032              	.Letext0:
 10033              		.file 2 "Middlewares/Third_Party/FatFs/src/integer.h"
 10034              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 10035              		.file 4 "/usr/arm-none-eabi/include/sys/_stdint.h"
 10036              		.file 5 "Drivers/CMSIS/Include/core_cm7.h"
 10037              		.file 6 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 10038              		.file 7 "/usr/lib/gcc/arm-none-eabi/7.1.0/include/stdarg.h"
 10039              		.file 8 "/usr/arm-none-eabi/include/stdio.h"
 10040              		.file 9 "/usr/arm-none-eabi/include/sys/lock.h"
 10041              		.file 10 "/usr/arm-none-eabi/include/sys/_types.h"
 10042              		.file 11 "/usr/lib/gcc/arm-none-eabi/7.1.0/include/stddef.h"
 10043              		.file 12 "/usr/arm-none-eabi/include/sys/reent.h"
 10044              		.file 13 "<built-in>"
 10045              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 10046              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 10047              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/include/semphr.h"
 10048              		.file 17 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 10049              		.file 18 "/usr/arm-none-eabi/include/stdlib.h"
 10050              		.file 19 "Middlewares/ST/STM32_USB_Host_Library/Core/Inc/usbh_def.h"
 10051              		.file 20 "Middlewares/ST/STM32_USB_Host_Library/Core/Inc/usbh_ctlreq.h"
 10052              		.file 21 "Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc/usbh_msc.h"
 10053              		.file 22 "Middlewares/Third_Party/FatFs/src/ff.h"
 10054              		.file 23 "Middlewares/Third_Party/FatFs/src/diskio.h"
ARM GAS  /tmp/ccqUXb8n.s 			page 308


DEFINED SYMBOLS
                            *ABS*:0000000000000000 ff.c
     /tmp/ccqUXb8n.s:18     .text.ld_word:0000000000000000 $t
     /tmp/ccqUXb8n.s:24     .text.ld_word:0000000000000000 ld_word
     /tmp/ccqUXb8n.s:47     .text.ld_dword:0000000000000000 $t
     /tmp/ccqUXb8n.s:53     .text.ld_dword:0000000000000000 ld_dword
     /tmp/ccqUXb8n.s:83     .text.st_word:0000000000000000 $t
     /tmp/ccqUXb8n.s:89     .text.st_word:0000000000000000 st_word
     /tmp/ccqUXb8n.s:110    .text.st_dword:0000000000000000 $t
     /tmp/ccqUXb8n.s:116    .text.st_dword:0000000000000000 st_dword
     /tmp/ccqUXb8n.s:145    .text.mem_cpy:0000000000000000 $t
     /tmp/ccqUXb8n.s:151    .text.mem_cpy:0000000000000000 mem_cpy
     /tmp/ccqUXb8n.s:183    .text.mem_set:0000000000000000 $t
     /tmp/ccqUXb8n.s:189    .text.mem_set:0000000000000000 mem_set
     /tmp/ccqUXb8n.s:213    .text.mem_cmp:0000000000000000 $t
     /tmp/ccqUXb8n.s:219    .text.mem_cmp:0000000000000000 mem_cmp
     /tmp/ccqUXb8n.s:269    .text.chk_chr:0000000000000000 $t
     /tmp/ccqUXb8n.s:275    .text.chk_chr:0000000000000000 chk_chr
     /tmp/ccqUXb8n.s:305    .text.chk_lock:0000000000000000 $t
     /tmp/ccqUXb8n.s:311    .text.chk_lock:0000000000000000 chk_lock
     /tmp/ccqUXb8n.s:427    .text.chk_lock:0000000000000070 $d
     /tmp/ccqUXb8n.s:432    .text.enq_lock:0000000000000000 $t
     /tmp/ccqUXb8n.s:438    .text.enq_lock:0000000000000000 enq_lock
     /tmp/ccqUXb8n.s:475    .text.enq_lock:000000000000001c $d
     /tmp/ccqUXb8n.s:480    .text.inc_lock:0000000000000000 $t
     /tmp/ccqUXb8n.s:486    .text.inc_lock:0000000000000000 inc_lock
     /tmp/ccqUXb8n.s:639    .text.inc_lock:00000000000000a0 $d
     /tmp/ccqUXb8n.s:644    .text.dec_lock:0000000000000000 $t
     /tmp/ccqUXb8n.s:650    .text.dec_lock:0000000000000000 dec_lock
     /tmp/ccqUXb8n.s:715    .text.dec_lock:000000000000003c $d
     /tmp/ccqUXb8n.s:720    .text.clear_lock:0000000000000000 $t
     /tmp/ccqUXb8n.s:726    .text.clear_lock:0000000000000000 clear_lock
     /tmp/ccqUXb8n.s:792    .text.clear_lock:0000000000000038 $d
     /tmp/ccqUXb8n.s:797    .text.clust2sect:0000000000000000 $t
     /tmp/ccqUXb8n.s:803    .text.clust2sect:0000000000000000 clust2sect
     /tmp/ccqUXb8n.s:836    .text.clmt_clust:0000000000000000 $t
     /tmp/ccqUXb8n.s:842    .text.clmt_clust:0000000000000000 clmt_clust
     /tmp/ccqUXb8n.s:893    .text.ld_clust:0000000000000000 $t
     /tmp/ccqUXb8n.s:899    .text.ld_clust:0000000000000000 ld_clust
     /tmp/ccqUXb8n.s:944    .text.st_clust:0000000000000000 $t
     /tmp/ccqUXb8n.s:950    .text.st_clust:0000000000000000 st_clust
     /tmp/ccqUXb8n.s:994    .text.get_fileinfo:0000000000000000 $t
     /tmp/ccqUXb8n.s:1000   .text.get_fileinfo:0000000000000000 get_fileinfo
     /tmp/ccqUXb8n.s:1114   .text.create_name:0000000000000000 $t
     /tmp/ccqUXb8n.s:1120   .text.create_name:0000000000000000 create_name
     /tmp/ccqUXb8n.s:1301   .text.create_name:00000000000000cc $d
     /tmp/ccqUXb8n.s:1307   .text.get_ldnumber:0000000000000000 $t
     /tmp/ccqUXb8n.s:1313   .text.get_ldnumber:0000000000000000 get_ldnumber
     /tmp/ccqUXb8n.s:1409   .text.putc_init:0000000000000000 $t
     /tmp/ccqUXb8n.s:1415   .text.putc_init:0000000000000000 putc_init
     /tmp/ccqUXb8n.s:1435   .text.lock_fs:0000000000000000 $t
     /tmp/ccqUXb8n.s:1441   .text.lock_fs:0000000000000000 lock_fs
     /tmp/ccqUXb8n.s:1477   .text.validate:0000000000000000 $t
     /tmp/ccqUXb8n.s:1483   .text.validate:0000000000000000 validate
     /tmp/ccqUXb8n.s:1553   .text.sync_window:0000000000000000 $t
     /tmp/ccqUXb8n.s:1559   .text.sync_window:0000000000000000 sync_window
     /tmp/ccqUXb8n.s:1649   .text.move_window:0000000000000000 $t
ARM GAS  /tmp/ccqUXb8n.s 			page 309


     /tmp/ccqUXb8n.s:1655   .text.move_window:0000000000000000 move_window
     /tmp/ccqUXb8n.s:1713   .text.check_fs:0000000000000000 $t
     /tmp/ccqUXb8n.s:1719   .text.check_fs:0000000000000000 check_fs
     /tmp/ccqUXb8n.s:1802   .text.check_fs:0000000000000070 $d
     /tmp/ccqUXb8n.s:1809   .text.find_volume:0000000000000000 $t
     /tmp/ccqUXb8n.s:1815   .text.find_volume:0000000000000000 find_volume
     /tmp/ccqUXb8n.s:2378   .text.find_volume:0000000000000304 $d
     /tmp/ccqUXb8n.s:2386   .text.put_fat:0000000000000000 $t
     /tmp/ccqUXb8n.s:2392   .text.put_fat:0000000000000000 put_fat
     /tmp/ccqUXb8n.s:2590   .text.get_fat:0000000000000000 $t
     /tmp/ccqUXb8n.s:2596   .text.get_fat:0000000000000000 get_fat
     /tmp/ccqUXb8n.s:2762   .text.dir_sdi:0000000000000000 $t
     /tmp/ccqUXb8n.s:2768   .text.dir_sdi:0000000000000000 dir_sdi
     /tmp/ccqUXb8n.s:2925   .text.create_chain:0000000000000000 $t
     /tmp/ccqUXb8n.s:2931   .text.create_chain:0000000000000000 create_chain
     /tmp/ccqUXb8n.s:3115   .text.remove_chain:0000000000000000 $t
     /tmp/ccqUXb8n.s:3121   .text.remove_chain:0000000000000000 remove_chain
     /tmp/ccqUXb8n.s:3242   .text.dir_remove:0000000000000000 $t
     /tmp/ccqUXb8n.s:3248   .text.dir_remove:0000000000000000 dir_remove
     /tmp/ccqUXb8n.s:3291   .text.dir_next:0000000000000000 $t
     /tmp/ccqUXb8n.s:3297   .text.dir_next:0000000000000000 dir_next
     /tmp/ccqUXb8n.s:3526   .text.dir_find:0000000000000000 $t
     /tmp/ccqUXb8n.s:3532   .text.dir_find:0000000000000000 dir_find
     /tmp/ccqUXb8n.s:3618   .text.follow_path:0000000000000000 $t
     /tmp/ccqUXb8n.s:3624   .text.follow_path:0000000000000000 follow_path
     /tmp/ccqUXb8n.s:3750   .text.dir_alloc:0000000000000000 $t
     /tmp/ccqUXb8n.s:3756   .text.dir_alloc:0000000000000000 dir_alloc
     /tmp/ccqUXb8n.s:3846   .text.dir_register:0000000000000000 $t
     /tmp/ccqUXb8n.s:3852   .text.dir_register:0000000000000000 dir_register
     /tmp/ccqUXb8n.s:3915   .text.dir_read:0000000000000000 $t
     /tmp/ccqUXb8n.s:3921   .text.dir_read:0000000000000000 dir_read
     /tmp/ccqUXb8n.s:4018   .text.unlock_fs:0000000000000000 $t
     /tmp/ccqUXb8n.s:4024   .text.unlock_fs:0000000000000000 unlock_fs
     /tmp/ccqUXb8n.s:4065   .text.sync_fs:0000000000000000 $t
     /tmp/ccqUXb8n.s:4071   .text.sync_fs:0000000000000000 sync_fs
     /tmp/ccqUXb8n.s:4167   .text.sync_fs:0000000000000084 $d
     /tmp/ccqUXb8n.s:4173   .text.f_mount:0000000000000000 $t
     /tmp/ccqUXb8n.s:4180   .text.f_mount:0000000000000000 f_mount
     /tmp/ccqUXb8n.s:4303   .text.f_mount:0000000000000088 $d
     /tmp/ccqUXb8n.s:4308   .text.f_open:0000000000000000 $t
     /tmp/ccqUXb8n.s:4315   .text.f_open:0000000000000000 f_open
     /tmp/ccqUXb8n.s:4755   .text.f_read:0000000000000000 $t
     /tmp/ccqUXb8n.s:4762   .text.f_read:0000000000000000 f_read
     /tmp/ccqUXb8n.s:5121   .text.f_write:0000000000000000 $t
     /tmp/ccqUXb8n.s:5128   .text.f_write:0000000000000000 f_write
     /tmp/ccqUXb8n.s:5519   .text.putc_bfd:0000000000000000 $t
     /tmp/ccqUXb8n.s:5525   .text.putc_bfd:0000000000000000 putc_bfd
     /tmp/ccqUXb8n.s:5615   .text.putc_flush:0000000000000000 $t
     /tmp/ccqUXb8n.s:5621   .text.putc_flush:0000000000000000 putc_flush
     /tmp/ccqUXb8n.s:5691   .text.f_sync:0000000000000000 $t
     /tmp/ccqUXb8n.s:5698   .text.f_sync:0000000000000000 f_sync
     /tmp/ccqUXb8n.s:5839   .text.f_close:0000000000000000 $t
     /tmp/ccqUXb8n.s:5846   .text.f_close:0000000000000000 f_close
     /tmp/ccqUXb8n.s:5916   .text.f_lseek:0000000000000000 $t
     /tmp/ccqUXb8n.s:5923   .text.f_lseek:0000000000000000 f_lseek
     /tmp/ccqUXb8n.s:6519   .text.f_opendir:0000000000000000 $t
     /tmp/ccqUXb8n.s:6526   .text.f_opendir:0000000000000000 f_opendir
ARM GAS  /tmp/ccqUXb8n.s 			page 310


     /tmp/ccqUXb8n.s:6663   .text.f_closedir:0000000000000000 $t
     /tmp/ccqUXb8n.s:6670   .text.f_closedir:0000000000000000 f_closedir
     /tmp/ccqUXb8n.s:6734   .text.f_readdir:0000000000000000 $t
     /tmp/ccqUXb8n.s:6741   .text.f_readdir:0000000000000000 f_readdir
     /tmp/ccqUXb8n.s:6835   .text.f_stat:0000000000000000 $t
     /tmp/ccqUXb8n.s:6842   .text.f_stat:0000000000000000 f_stat
     /tmp/ccqUXb8n.s:6923   .text.f_getfree:0000000000000000 $t
     /tmp/ccqUXb8n.s:6930   .text.f_getfree:0000000000000000 f_getfree
     /tmp/ccqUXb8n.s:7149   .text.f_truncate:0000000000000000 $t
     /tmp/ccqUXb8n.s:7156   .text.f_truncate:0000000000000000 f_truncate
     /tmp/ccqUXb8n.s:7335   .text.f_unlink:0000000000000000 $t
     /tmp/ccqUXb8n.s:7342   .text.f_unlink:0000000000000000 f_unlink
     /tmp/ccqUXb8n.s:7528   .text.f_mkdir:0000000000000000 $t
     /tmp/ccqUXb8n.s:7535   .text.f_mkdir:0000000000000000 f_mkdir
     /tmp/ccqUXb8n.s:7841   .text.f_rename:0000000000000000 $t
     /tmp/ccqUXb8n.s:7848   .text.f_rename:0000000000000000 f_rename
     /tmp/ccqUXb8n.s:8083   .text.f_mkfs:0000000000000000 $t
     /tmp/ccqUXb8n.s:8090   .text.f_mkfs:0000000000000000 f_mkfs
     /tmp/ccqUXb8n.s:8514   .text.f_mkfs:0000000000000268 $d
     /tmp/ccqUXb8n.s:8521   .text.f_mkfs:0000000000000280 $t
     /tmp/ccqUXb8n.s:9100   .text.f_mkfs:000000000000062c $d
     /tmp/ccqUXb8n.s:9109   .text.f_mkfs:0000000000000644 $t
     /tmp/ccqUXb8n.s:9130   .text.f_gets:0000000000000000 $t
     /tmp/ccqUXb8n.s:9137   .text.f_gets:0000000000000000 f_gets
     /tmp/ccqUXb8n.s:9233   .text.f_putc:0000000000000000 $t
     /tmp/ccqUXb8n.s:9240   .text.f_putc:0000000000000000 f_putc
     /tmp/ccqUXb8n.s:9280   .text.f_puts:0000000000000000 $t
     /tmp/ccqUXb8n.s:9287   .text.f_puts:0000000000000000 f_puts
     /tmp/ccqUXb8n.s:9336   .text.f_printf:0000000000000000 $t
     /tmp/ccqUXb8n.s:9343   .text.f_printf:0000000000000000 f_printf
     /tmp/ccqUXb8n.s:9491   .text.f_printf:000000000000009e $d
     /tmp/ccqUXb8n.s:9839   .bss.FatFs:0000000000000000 $d
     /tmp/ccqUXb8n.s:9843   .bss.FatFs:0000000000000000 FatFs
     /tmp/ccqUXb8n.s:9846   .bss.Files:0000000000000000 $d
     /tmp/ccqUXb8n.s:9850   .bss.Files:0000000000000000 Files
     /tmp/ccqUXb8n.s:9853   .bss.Fsid:0000000000000000 $d
     /tmp/ccqUXb8n.s:9857   .bss.Fsid:0000000000000000 Fsid
     /tmp/ccqUXb8n.s:9860   .rodata.ExCvt:0000000000000000 $d
     /tmp/ccqUXb8n.s:9864   .rodata.ExCvt:0000000000000000 ExCvt
     /tmp/ccqUXb8n.s:9994   .rodata.create_name.str1.4:0000000000000000 $d
     /tmp/ccqUXb8n.s:9998   .rodata.cst.12602:0000000000000000 $d
     /tmp/ccqUXb8n.s:10002  .rodata.cst.12602:0000000000000000 cst.12602
     /tmp/ccqUXb8n.s:10011  .rodata.cst32.12603:0000000000000000 $d
     /tmp/ccqUXb8n.s:10015  .rodata.cst32.12603:0000000000000000 cst32.12603
     /tmp/ccqUXb8n.s:10024  .rodata.f_mkfs.str1.4:0000000000000000 $d
     /tmp/ccqUXb8n.s:9515   .text.f_printf:00000000000000b5 $d
     /tmp/ccqUXb8n.s:9515   .text.f_printf:00000000000000b6 $t

UNDEFINED SYMBOLS
ff_req_grant
disk_status
disk_write
disk_read
disk_initialize
ff_rel_grant
disk_ioctl
ff_del_syncobj
ARM GAS  /tmp/ccqUXb8n.s 			page 311


ff_cre_syncobj
get_fattime
