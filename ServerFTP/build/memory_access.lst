ARM GAS  /tmp/cc3UMXZX.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"memory_access.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._is_full_path,"ax",%progbits
  18              		.align	1
  19              		.global	_is_full_path
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-sp-d16
  25              	_is_full_path:
  26              	.LFB141:
  27              		.file 1 "Src/memory_access.c"
   1:Src/memory_access.c **** #include "memory_access.h"
   2:Src/memory_access.c **** 
   3:Src/memory_access.c **** FATFS *fs;
   4:Src/memory_access.c **** char *current_dir;
   5:Src/memory_access.c **** 
   6:Src/memory_access.c **** int _is_full_path(char *path) {
  28              		.loc 1 6 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
   7:Src/memory_access.c ****     if (path[0] == '/') {
  34              		.loc 1 7 0
  35 0000 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
  36 0002 2F2B     		cmp	r3, #47
  37 0004 01D0     		beq	.L4
   8:Src/memory_access.c ****         return 1;
   9:Src/memory_access.c ****     }
  10:Src/memory_access.c ****     return 0;
  38              		.loc 1 10 0
  39 0006 0020     		movs	r0, #0
  40              	.LVL1:
  11:Src/memory_access.c **** }
  41              		.loc 1 11 0
  42 0008 7047     		bx	lr
  43              	.LVL2:
  44              	.L4:
   8:Src/memory_access.c ****         return 1;
  45              		.loc 1 8 0
  46 000a 0120     		movs	r0, #1
ARM GAS  /tmp/cc3UMXZX.s 			page 2


  47              	.LVL3:
  48 000c 7047     		bx	lr
  49              		.cfi_endproc
  50              	.LFE141:
  52              		.section	.text._get_full_path,"ax",%progbits
  53              		.align	1
  54              		.global	_get_full_path
  55              		.syntax unified
  56              		.thumb
  57              		.thumb_func
  58              		.fpu fpv5-sp-d16
  60              	_get_full_path:
  61              	.LFB142:
  12:Src/memory_access.c **** 
  13:Src/memory_access.c **** char *_get_full_path(char *path) {
  62              		.loc 1 13 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66              	.LVL4:
  67 0000 70B5     		push	{r4, r5, r6, lr}
  68              	.LCFI0:
  69              		.cfi_def_cfa_offset 16
  70              		.cfi_offset 4, -16
  71              		.cfi_offset 5, -12
  72              		.cfi_offset 6, -8
  73              		.cfi_offset 14, -4
  74 0002 0446     		mov	r4, r0
  14:Src/memory_access.c ****     char *new_path;
  15:Src/memory_access.c ****     if (_is_full_path(path)) {
  75              		.loc 1 15 0
  76 0004 FFF7FEFF 		bl	_is_full_path
  77              	.LVL5:
  78 0008 A0B9     		cbnz	r0, .L9
  16:Src/memory_access.c ****         new_path = malloc(sizeof(char) * strlen(path) + 2);
  17:Src/memory_access.c ****         sprintf(new_path, "%s/", path);
  18:Src/memory_access.c ****     } else {
  19:Src/memory_access.c ****         new_path = malloc(sizeof(char) * (strlen(current_dir) + strlen(path) + 2));
  79              		.loc 1 19 0
  80 000a 104B     		ldr	r3, .L10
  81 000c 1E68     		ldr	r6, [r3]
  82 000e 3046     		mov	r0, r6
  83 0010 FFF7FEFF 		bl	strlen
  84              	.LVL6:
  85 0014 0546     		mov	r5, r0
  86 0016 2046     		mov	r0, r4
  87 0018 FFF7FEFF 		bl	strlen
  88              	.LVL7:
  89 001c 2844     		add	r0, r0, r5
  90 001e 0230     		adds	r0, r0, #2
  91 0020 FFF7FEFF 		bl	malloc
  92              	.LVL8:
  93 0024 0546     		mov	r5, r0
  94              	.LVL9:
  20:Src/memory_access.c ****         sprintf(new_path, "%s%s/", current_dir, path);
  95              		.loc 1 20 0
  96 0026 2346     		mov	r3, r4
ARM GAS  /tmp/cc3UMXZX.s 			page 3


  97 0028 3246     		mov	r2, r6
  98 002a 0949     		ldr	r1, .L10+4
  99 002c FFF7FEFF 		bl	sprintf
 100              	.LVL10:
 101              	.L5:
  21:Src/memory_access.c ****     }
  22:Src/memory_access.c ****     return new_path;
  23:Src/memory_access.c **** }
 102              		.loc 1 23 0
 103 0030 2846     		mov	r0, r5
 104 0032 70BD     		pop	{r4, r5, r6, pc}
 105              	.LVL11:
 106              	.L9:
  16:Src/memory_access.c ****         sprintf(new_path, "%s/", path);
 107              		.loc 1 16 0
 108 0034 2046     		mov	r0, r4
 109 0036 FFF7FEFF 		bl	strlen
 110              	.LVL12:
 111 003a 0230     		adds	r0, r0, #2
 112 003c FFF7FEFF 		bl	malloc
 113              	.LVL13:
 114 0040 0546     		mov	r5, r0
 115              	.LVL14:
  17:Src/memory_access.c ****     } else {
 116              		.loc 1 17 0
 117 0042 2246     		mov	r2, r4
 118 0044 0349     		ldr	r1, .L10+8
 119 0046 FFF7FEFF 		bl	sprintf
 120              	.LVL15:
 121 004a F1E7     		b	.L5
 122              	.L11:
 123              		.align	2
 124              	.L10:
 125 004c 00000000 		.word	current_dir
 126 0050 04000000 		.word	.LC1
 127 0054 00000000 		.word	.LC0
 128              		.cfi_endproc
 129              	.LFE142:
 131              		.section	.text.mount_usb,"ax",%progbits
 132              		.align	1
 133              		.global	mount_usb
 134              		.syntax unified
 135              		.thumb
 136              		.thumb_func
 137              		.fpu fpv5-sp-d16
 139              	mount_usb:
 140              	.LFB143:
  24:Src/memory_access.c **** 
  25:Src/memory_access.c **** int mount_usb() {
 141              		.loc 1 25 0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 0
 144              		@ frame_needed = 0, uses_anonymous_args = 0
 145 0000 08B5     		push	{r3, lr}
 146              	.LCFI1:
 147              		.cfi_def_cfa_offset 8
 148              		.cfi_offset 3, -8
ARM GAS  /tmp/cc3UMXZX.s 			page 4


 149              		.cfi_offset 14, -4
  26:Src/memory_access.c ****     fs = malloc(sizeof(FATFS));
 150              		.loc 1 26 0
 151 0002 4FF40D70 		mov	r0, #564
 152 0006 FFF7FEFF 		bl	malloc
 153              	.LVL16:
 154 000a 0F4B     		ldr	r3, .L17
 155 000c 1860     		str	r0, [r3]
  27:Src/memory_access.c **** 
  28:Src/memory_access.c ****     if (f_mount(fs, "", 1) != FR_OK) {
 156              		.loc 1 28 0
 157 000e 0122     		movs	r2, #1
 158 0010 0E49     		ldr	r1, .L17+4
 159 0012 FFF7FEFF 		bl	f_mount
 160              	.LVL17:
 161 0016 60B9     		cbnz	r0, .L16
  29:Src/memory_access.c ****         xprintf("usb mount error\n");
  30:Src/memory_access.c ****         free(fs);
  31:Src/memory_access.c ****         return -1;
  32:Src/memory_access.c ****     }
  33:Src/memory_access.c **** 
  34:Src/memory_access.c ****     current_dir = malloc(sizeof(char) * 2);
 162              		.loc 1 34 0
 163 0018 0220     		movs	r0, #2
 164 001a FFF7FEFF 		bl	malloc
 165              	.LVL18:
 166 001e 0C4B     		ldr	r3, .L17+8
 167 0020 1860     		str	r0, [r3]
  35:Src/memory_access.c ****     strcpy(current_dir, "/");
 168              		.loc 1 35 0
 169 0022 0C4B     		ldr	r3, .L17+12
 170 0024 1B88     		ldrh	r3, [r3]	@ unaligned
 171 0026 0380     		strh	r3, [r0]	@ unaligned
  36:Src/memory_access.c **** 
  37:Src/memory_access.c ****     xprintf("mounted USB\n");
 172              		.loc 1 37 0
 173 0028 0B48     		ldr	r0, .L17+16
 174 002a FFF7FEFF 		bl	xprintf
 175              	.LVL19:
  38:Src/memory_access.c ****     return 1;
 176              		.loc 1 38 0
 177 002e 0120     		movs	r0, #1
 178              	.L12:
  39:Src/memory_access.c **** }
 179              		.loc 1 39 0
 180 0030 08BD     		pop	{r3, pc}
 181              	.L16:
 182              	.LBB2:
  29:Src/memory_access.c ****         free(fs);
 183              		.loc 1 29 0
 184 0032 0A48     		ldr	r0, .L17+20
 185 0034 FFF7FEFF 		bl	xprintf
 186              	.LVL20:
  30:Src/memory_access.c ****         return -1;
 187              		.loc 1 30 0
 188 0038 034B     		ldr	r3, .L17
 189 003a 1868     		ldr	r0, [r3]
ARM GAS  /tmp/cc3UMXZX.s 			page 5


 190 003c FFF7FEFF 		bl	free
 191              	.LVL21:
  31:Src/memory_access.c ****     }
 192              		.loc 1 31 0
 193 0040 4FF0FF30 		mov	r0, #-1
 194 0044 F4E7     		b	.L12
 195              	.L18:
 196 0046 00BF     		.align	2
 197              	.L17:
 198 0048 00000000 		.word	fs
 199 004c 00000000 		.word	.LC2
 200 0050 00000000 		.word	current_dir
 201 0054 18000000 		.word	.LC4
 202 0058 1C000000 		.word	.LC5
 203 005c 04000000 		.word	.LC3
 204              	.LBE2:
 205              		.cfi_endproc
 206              	.LFE143:
 208              		.section	.text.unmount_usb,"ax",%progbits
 209              		.align	1
 210              		.global	unmount_usb
 211              		.syntax unified
 212              		.thumb
 213              		.thumb_func
 214              		.fpu fpv5-sp-d16
 216              	unmount_usb:
 217              	.LFB144:
  40:Src/memory_access.c **** 
  41:Src/memory_access.c **** int unmount_usb() {
 218              		.loc 1 41 0
 219              		.cfi_startproc
 220              		@ args = 0, pretend = 0, frame = 0
 221              		@ frame_needed = 0, uses_anonymous_args = 0
 222 0000 08B5     		push	{r3, lr}
 223              	.LCFI2:
 224              		.cfi_def_cfa_offset 8
 225              		.cfi_offset 3, -8
 226              		.cfi_offset 14, -4
  42:Src/memory_access.c ****     if (f_mount(0, "", 0) != FR_OK) {
 227              		.loc 1 42 0
 228 0002 0022     		movs	r2, #0
 229 0004 0B49     		ldr	r1, .L24
 230 0006 1046     		mov	r0, r2
 231 0008 FFF7FEFF 		bl	f_mount
 232              	.LVL22:
 233 000c 60B9     		cbnz	r0, .L23
  43:Src/memory_access.c ****         xprintf("usb unmount error\n");
  44:Src/memory_access.c ****         return -1;
  45:Src/memory_access.c ****     }
  46:Src/memory_access.c ****     free(current_dir);
 234              		.loc 1 46 0
 235 000e 0A4B     		ldr	r3, .L24+4
 236 0010 1868     		ldr	r0, [r3]
 237 0012 FFF7FEFF 		bl	free
 238              	.LVL23:
  47:Src/memory_access.c ****     free(fs);
 239              		.loc 1 47 0
ARM GAS  /tmp/cc3UMXZX.s 			page 6


 240 0016 094B     		ldr	r3, .L24+8
 241 0018 1868     		ldr	r0, [r3]
 242 001a FFF7FEFF 		bl	free
 243              	.LVL24:
  48:Src/memory_access.c **** 
  49:Src/memory_access.c ****     xprintf("unmounted USB\n");
 244              		.loc 1 49 0
 245 001e 0848     		ldr	r0, .L24+12
 246 0020 FFF7FEFF 		bl	xprintf
 247              	.LVL25:
  50:Src/memory_access.c ****     return 1;
 248              		.loc 1 50 0
 249 0024 0120     		movs	r0, #1
 250              	.L19:
  51:Src/memory_access.c **** }
 251              		.loc 1 51 0
 252 0026 08BD     		pop	{r3, pc}
 253              	.L23:
 254              	.LBB3:
  43:Src/memory_access.c ****         return -1;
 255              		.loc 1 43 0
 256 0028 0648     		ldr	r0, .L24+16
 257 002a FFF7FEFF 		bl	xprintf
 258              	.LVL26:
  44:Src/memory_access.c ****     }
 259              		.loc 1 44 0
 260 002e 4FF0FF30 		mov	r0, #-1
 261 0032 F8E7     		b	.L19
 262              	.L25:
 263              		.align	2
 264              	.L24:
 265 0034 00000000 		.word	.LC2
 266 0038 00000000 		.word	current_dir
 267 003c 00000000 		.word	fs
 268 0040 14000000 		.word	.LC7
 269 0044 00000000 		.word	.LC6
 270              	.LBE3:
 271              		.cfi_endproc
 272              	.LFE144:
 274              		.section	.text.get_current_directory,"ax",%progbits
 275              		.align	1
 276              		.global	get_current_directory
 277              		.syntax unified
 278              		.thumb
 279              		.thumb_func
 280              		.fpu fpv5-sp-d16
 282              	get_current_directory:
 283              	.LFB145:
  52:Src/memory_access.c **** 
  53:Src/memory_access.c **** char *get_current_directory() {
 284              		.loc 1 53 0
 285              		.cfi_startproc
 286              		@ args = 0, pretend = 0, frame = 0
 287              		@ frame_needed = 0, uses_anonymous_args = 0
 288              		@ link register save eliminated.
  54:Src/memory_access.c ****     return current_dir;
  55:Src/memory_access.c **** }
ARM GAS  /tmp/cc3UMXZX.s 			page 7


 289              		.loc 1 55 0
 290 0000 014B     		ldr	r3, .L27
 291 0002 1868     		ldr	r0, [r3]
 292 0004 7047     		bx	lr
 293              	.L28:
 294 0006 00BF     		.align	2
 295              	.L27:
 296 0008 00000000 		.word	current_dir
 297              		.cfi_endproc
 298              	.LFE145:
 300              		.section	.text.change_directory,"ax",%progbits
 301              		.align	1
 302              		.global	change_directory
 303              		.syntax unified
 304              		.thumb
 305              		.thumb_func
 306              		.fpu fpv5-sp-d16
 308              	change_directory:
 309              	.LFB146:
  56:Src/memory_access.c **** 
  57:Src/memory_access.c **** char *change_directory(char *path) {
 310              		.loc 1 57 0
 311              		.cfi_startproc
 312              		@ args = 0, pretend = 0, frame = 48
 313              		@ frame_needed = 0, uses_anonymous_args = 0
 314              	.LVL27:
 315 0000 30B5     		push	{r4, r5, lr}
 316              	.LCFI3:
 317              		.cfi_def_cfa_offset 12
 318              		.cfi_offset 4, -12
 319              		.cfi_offset 5, -8
 320              		.cfi_offset 14, -4
 321 0002 8DB0     		sub	sp, sp, #52
 322              	.LCFI4:
 323              		.cfi_def_cfa_offset 64
 324 0004 0446     		mov	r4, r0
  58:Src/memory_access.c **** //    char *full_path = _get_full_path(path);
  59:Src/memory_access.c **** 
  60:Src/memory_access.c ****     DIR dir;
  61:Src/memory_access.c ****     if (f_opendir(&dir, path) != FR_OK) {
 325              		.loc 1 61 0
 326 0006 0146     		mov	r1, r0
 327 0008 6846     		mov	r0, sp
 328              	.LVL28:
 329 000a FFF7FEFF 		bl	f_opendir
 330              	.LVL29:
 331 000e 58B9     		cbnz	r0, .L33
  62:Src/memory_access.c ****         xprintf("cannot change directory: %s\n", path);
  63:Src/memory_access.c **** //        free(path);
  64:Src/memory_access.c ****         return NULL;
  65:Src/memory_access.c ****     }
  66:Src/memory_access.c **** 
  67:Src/memory_access.c ****     f_closedir(&dir);
 332              		.loc 1 67 0
 333 0010 6846     		mov	r0, sp
 334 0012 FFF7FEFF 		bl	f_closedir
 335              	.LVL30:
ARM GAS  /tmp/cc3UMXZX.s 			page 8


  68:Src/memory_access.c **** //    free(current_dir);
  69:Src/memory_access.c ****     current_dir = path;
 336              		.loc 1 69 0
 337 0016 074D     		ldr	r5, .L34
 338 0018 2C60     		str	r4, [r5]
  70:Src/memory_access.c ****     xprintf("%s\n",current_dir);
 339              		.loc 1 70 0
 340 001a 2146     		mov	r1, r4
 341 001c 0648     		ldr	r0, .L34+4
 342 001e FFF7FEFF 		bl	xprintf
 343              	.LVL31:
  71:Src/memory_access.c ****     return current_dir;
 344              		.loc 1 71 0
 345 0022 2868     		ldr	r0, [r5]
 346              	.L29:
  72:Src/memory_access.c **** }
 347              		.loc 1 72 0
 348 0024 0DB0     		add	sp, sp, #52
 349              	.LCFI5:
 350              		.cfi_remember_state
 351              		.cfi_def_cfa_offset 12
 352              		@ sp needed
 353 0026 30BD     		pop	{r4, r5, pc}
 354              	.LVL32:
 355              	.L33:
 356              	.LCFI6:
 357              		.cfi_restore_state
 358              	.LBB4:
  62:Src/memory_access.c **** //        free(path);
 359              		.loc 1 62 0
 360 0028 2146     		mov	r1, r4
 361 002a 0448     		ldr	r0, .L34+8
 362 002c FFF7FEFF 		bl	xprintf
 363              	.LVL33:
  64:Src/memory_access.c ****     }
 364              		.loc 1 64 0
 365 0030 0020     		movs	r0, #0
 366 0032 F7E7     		b	.L29
 367              	.L35:
 368              		.align	2
 369              	.L34:
 370 0034 00000000 		.word	current_dir
 371 0038 20000000 		.word	.LC9
 372 003c 00000000 		.word	.LC8
 373              	.LBE4:
 374              		.cfi_endproc
 375              	.LFE146:
 377              		.section	.text.list_directory,"ax",%progbits
 378              		.align	1
 379              		.global	list_directory
 380              		.syntax unified
 381              		.thumb
 382              		.thumb_func
 383              		.fpu fpv5-sp-d16
 385              	list_directory:
 386              	.LFB147:
  73:Src/memory_access.c **** 
ARM GAS  /tmp/cc3UMXZX.s 			page 9


  74:Src/memory_access.c **** char *list_directory() {
 387              		.loc 1 74 0
 388              		.cfi_startproc
 389              		@ args = 0, pretend = 0, frame = 72
 390              		@ frame_needed = 0, uses_anonymous_args = 0
 391 0000 10B5     		push	{r4, lr}
 392              	.LCFI7:
 393              		.cfi_def_cfa_offset 8
 394              		.cfi_offset 4, -8
 395              		.cfi_offset 14, -4
 396 0002 92B0     		sub	sp, sp, #72
 397              	.LCFI8:
 398              		.cfi_def_cfa_offset 80
  75:Src/memory_access.c ****     DIR dir;
  76:Src/memory_access.c ****     if (f_opendir(&dir, current_dir) != FR_OK) {
 399              		.loc 1 76 0
 400 0004 164B     		ldr	r3, .L43
 401 0006 1968     		ldr	r1, [r3]
 402 0008 06A8     		add	r0, sp, #24
 403 000a FFF7FEFF 		bl	f_opendir
 404              	.LVL34:
 405 000e C8B9     		cbnz	r0, .L42
  77:Src/memory_access.c ****         xprintf("cannot open directory %s\n", current_dir);
  78:Src/memory_access.c ****         return NULL;
  79:Src/memory_access.c ****     }
  80:Src/memory_access.c ****     char *list = malloc(sizeof(char) * 10);
 406              		.loc 1 80 0
 407 0010 0A20     		movs	r0, #10
 408 0012 FFF7FEFF 		bl	malloc
 409              	.LVL35:
 410 0016 0446     		mov	r4, r0
 411              	.LVL36:
  81:Src/memory_access.c ****     list[0] = 0;
 412              		.loc 1 81 0
 413 0018 0023     		movs	r3, #0
 414 001a 0370     		strb	r3, [r0]
 415              	.LVL37:
 416              	.L40:
  82:Src/memory_access.c ****     FILINFO finfo;
  83:Src/memory_access.c ****     while (1) {
  84:Src/memory_access.c ****         if (f_readdir(&dir, &finfo) != FR_OK || finfo.fname[0] == 0)
 417              		.loc 1 84 0
 418 001c 6946     		mov	r1, sp
 419 001e 06A8     		add	r0, sp, #24
 420 0020 FFF7FEFF 		bl	f_readdir
 421              	.LVL38:
 422 0024 A8B9     		cbnz	r0, .L39
 423              		.loc 1 84 0 is_stmt 0 discriminator 1
 424 0026 9DF80930 		ldrb	r3, [sp, #9]	@ zero_extendqisi2
 425 002a 93B1     		cbz	r3, .L39
  85:Src/memory_access.c ****             break;
  86:Src/memory_access.c ****         strcat(list, finfo.fname);
 426              		.loc 1 86 0 is_stmt 1
 427 002c 0DF10901 		add	r1, sp, #9
 428 0030 2046     		mov	r0, r4
 429 0032 FFF7FEFF 		bl	strcat
 430              	.LVL39:
ARM GAS  /tmp/cc3UMXZX.s 			page 10


  87:Src/memory_access.c ****         strcat(list, "\n");
 431              		.loc 1 87 0
 432 0036 2046     		mov	r0, r4
 433 0038 FFF7FEFF 		bl	strlen
 434              	.LVL40:
 435 003c 094B     		ldr	r3, .L43+4
 436 003e 1B88     		ldrh	r3, [r3]	@ unaligned
 437 0040 2352     		strh	r3, [r4, r0]	@ unaligned
  84:Src/memory_access.c ****             break;
 438              		.loc 1 84 0
 439 0042 EBE7     		b	.L40
 440              	.LVL41:
 441              	.L42:
 442              	.LBB5:
  77:Src/memory_access.c ****         return NULL;
 443              		.loc 1 77 0
 444 0044 064B     		ldr	r3, .L43
 445 0046 1968     		ldr	r1, [r3]
 446 0048 0748     		ldr	r0, .L43+8
 447 004a FFF7FEFF 		bl	xprintf
 448              	.LVL42:
  78:Src/memory_access.c ****     }
 449              		.loc 1 78 0
 450 004e 0024     		movs	r4, #0
 451 0050 02E0     		b	.L36
 452              	.LVL43:
 453              	.L39:
 454              	.LBE5:
  88:Src/memory_access.c ****     }
  89:Src/memory_access.c ****     f_closedir(&dir);
 455              		.loc 1 89 0
 456 0052 06A8     		add	r0, sp, #24
 457 0054 FFF7FEFF 		bl	f_closedir
 458              	.LVL44:
 459              	.L36:
  90:Src/memory_access.c ****     return list;
  91:Src/memory_access.c **** }
 460              		.loc 1 91 0
 461 0058 2046     		mov	r0, r4
 462 005a 12B0     		add	sp, sp, #72
 463              	.LCFI9:
 464              		.cfi_def_cfa_offset 8
 465              		@ sp needed
 466 005c 10BD     		pop	{r4, pc}
 467              	.L44:
 468 005e 00BF     		.align	2
 469              	.L43:
 470 0060 00000000 		.word	current_dir
 471 0064 1C000000 		.word	.LC11
 472 0068 00000000 		.word	.LC10
 473              		.cfi_endproc
 474              	.LFE147:
 476              		.section	.text.open_file,"ax",%progbits
 477              		.align	1
 478              		.global	open_file
 479              		.syntax unified
 480              		.thumb
ARM GAS  /tmp/cc3UMXZX.s 			page 11


 481              		.thumb_func
 482              		.fpu fpv5-sp-d16
 484              	open_file:
 485              	.LFB148:
  92:Src/memory_access.c **** 
  93:Src/memory_access.c **** FIL *open_file(char *filename) {
 486              		.loc 1 93 0
 487              		.cfi_startproc
 488              		@ args = 0, pretend = 0, frame = 0
 489              		@ frame_needed = 0, uses_anonymous_args = 0
 490              	.LVL45:
 491 0000 38B5     		push	{r3, r4, r5, lr}
 492              	.LCFI10:
 493              		.cfi_def_cfa_offset 16
 494              		.cfi_offset 3, -16
 495              		.cfi_offset 4, -12
 496              		.cfi_offset 5, -8
 497              		.cfi_offset 14, -4
  94:Src/memory_access.c ****     char *path;
  95:Src/memory_access.c ****     sprintf(path, current_dir, filename);
 498              		.loc 1 95 0
 499 0002 0246     		mov	r2, r0
 500 0004 124B     		ldr	r3, .L50
 501 0006 1968     		ldr	r1, [r3]
 502 0008 0024     		movs	r4, #0
 503 000a 2046     		mov	r0, r4
 504              	.LVL46:
 505 000c FFF7FEFF 		bl	sprintf
 506              	.LVL47:
  96:Src/memory_access.c ****     FIL *file = malloc(sizeof(FIL));
 507              		.loc 1 96 0
 508 0010 4FF40C70 		mov	r0, #560
 509 0014 FFF7FEFF 		bl	malloc
 510              	.LVL48:
 511 0018 0546     		mov	r5, r0
 512              	.LVL49:
  97:Src/memory_access.c **** 
  98:Src/memory_access.c ****     if (f_open(file, path, FA_OPEN_EXISTING | FA_READ) != FR_OK) {
 513              		.loc 1 98 0
 514 001a 0122     		movs	r2, #1
 515 001c 2146     		mov	r1, r4
 516 001e FFF7FEFF 		bl	f_open
 517              	.LVL50:
 518 0022 20B9     		cbnz	r0, .L49
  99:Src/memory_access.c ****         xprintf("%s\n", path);
 100:Src/memory_access.c ****         xprintf("cannot open file %s\n", path);
 101:Src/memory_access.c ****         free(path);
 102:Src/memory_access.c ****         free(file);
 103:Src/memory_access.c ****         return NULL;
 104:Src/memory_access.c ****     }
 105:Src/memory_access.c ****     free(path);
 519              		.loc 1 105 0
 520 0024 0020     		movs	r0, #0
 521 0026 FFF7FEFF 		bl	free
 522              	.LVL51:
 523              	.L45:
 106:Src/memory_access.c ****     return file;
ARM GAS  /tmp/cc3UMXZX.s 			page 12


 107:Src/memory_access.c **** }
 524              		.loc 1 107 0
 525 002a 2846     		mov	r0, r5
 526 002c 38BD     		pop	{r3, r4, r5, pc}
 527              	.LVL52:
 528              	.L49:
 529              	.LBB6:
  99:Src/memory_access.c ****         xprintf("%s\n", path);
 530              		.loc 1 99 0
 531 002e 2146     		mov	r1, r4
 532 0030 0848     		ldr	r0, .L50+4
 533 0032 FFF7FEFF 		bl	xprintf
 534              	.LVL53:
 100:Src/memory_access.c ****         free(path);
 535              		.loc 1 100 0
 536 0036 2146     		mov	r1, r4
 537 0038 0748     		ldr	r0, .L50+8
 538 003a FFF7FEFF 		bl	xprintf
 539              	.LVL54:
 101:Src/memory_access.c ****         free(file);
 540              		.loc 1 101 0
 541 003e 2046     		mov	r0, r4
 542 0040 FFF7FEFF 		bl	free
 543              	.LVL55:
 102:Src/memory_access.c ****         return NULL;
 544              		.loc 1 102 0
 545 0044 2846     		mov	r0, r5
 546 0046 FFF7FEFF 		bl	free
 547              	.LVL56:
 103:Src/memory_access.c ****     }
 548              		.loc 1 103 0
 549 004a 2546     		mov	r5, r4
 550              	.LVL57:
 551 004c EDE7     		b	.L45
 552              	.L51:
 553 004e 00BF     		.align	2
 554              	.L50:
 555 0050 00000000 		.word	current_dir
 556 0054 20000000 		.word	.LC9
 557 0058 00000000 		.word	.LC12
 558              	.LBE6:
 559              		.cfi_endproc
 560              	.LFE148:
 562              		.section	.text.create_file,"ax",%progbits
 563              		.align	1
 564              		.global	create_file
 565              		.syntax unified
 566              		.thumb
 567              		.thumb_func
 568              		.fpu fpv5-sp-d16
 570              	create_file:
 571              	.LFB149:
 108:Src/memory_access.c **** 
 109:Src/memory_access.c **** FIL *create_file(char *filename) {
 572              		.loc 1 109 0
 573              		.cfi_startproc
 574              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc3UMXZX.s 			page 13


 575              		@ frame_needed = 0, uses_anonymous_args = 0
 576              	.LVL58:
 577 0000 38B5     		push	{r3, r4, r5, lr}
 578              	.LCFI11:
 579              		.cfi_def_cfa_offset 16
 580              		.cfi_offset 3, -16
 581              		.cfi_offset 4, -12
 582              		.cfi_offset 5, -8
 583              		.cfi_offset 14, -4
 110:Src/memory_access.c ****     char *path = _get_full_path(filename);
 584              		.loc 1 110 0
 585 0002 FFF7FEFF 		bl	_get_full_path
 586              	.LVL59:
 587 0006 0446     		mov	r4, r0
 588              	.LVL60:
 111:Src/memory_access.c ****     FIL *file = malloc(sizeof(FIL));
 589              		.loc 1 111 0
 590 0008 4FF40C70 		mov	r0, #560
 591              	.LVL61:
 592 000c FFF7FEFF 		bl	malloc
 593              	.LVL62:
 594 0010 0546     		mov	r5, r0
 595              	.LVL63:
 112:Src/memory_access.c **** 
 113:Src/memory_access.c ****     if (f_open(file, path + 1, FA_CREATE_NEW | FA_WRITE) != FR_OK) {
 596              		.loc 1 113 0
 597 0012 0622     		movs	r2, #6
 598 0014 611C     		adds	r1, r4, #1
 599 0016 FFF7FEFF 		bl	f_open
 600              	.LVL64:
 601 001a 20B9     		cbnz	r0, .L56
 114:Src/memory_access.c ****         xprintf("cannot create file %s\n", path);
 115:Src/memory_access.c ****         free(path);
 116:Src/memory_access.c ****         free(file);
 117:Src/memory_access.c ****         return NULL;
 118:Src/memory_access.c ****     }
 119:Src/memory_access.c ****     free(path);
 602              		.loc 1 119 0
 603 001c 2046     		mov	r0, r4
 604 001e FFF7FEFF 		bl	free
 605              	.LVL65:
 606              	.L52:
 120:Src/memory_access.c ****     return file;
 121:Src/memory_access.c **** }
 607              		.loc 1 121 0
 608 0022 2846     		mov	r0, r5
 609 0024 38BD     		pop	{r3, r4, r5, pc}
 610              	.LVL66:
 611              	.L56:
 612              	.LBB7:
 114:Src/memory_access.c ****         xprintf("cannot create file %s\n", path);
 613              		.loc 1 114 0
 614 0026 2146     		mov	r1, r4
 615 0028 0548     		ldr	r0, .L57
 616 002a FFF7FEFF 		bl	xprintf
 617              	.LVL67:
 115:Src/memory_access.c ****         free(file);
ARM GAS  /tmp/cc3UMXZX.s 			page 14


 618              		.loc 1 115 0
 619 002e 2046     		mov	r0, r4
 620 0030 FFF7FEFF 		bl	free
 621              	.LVL68:
 116:Src/memory_access.c ****         return NULL;
 622              		.loc 1 116 0
 623 0034 2846     		mov	r0, r5
 624 0036 FFF7FEFF 		bl	free
 625              	.LVL69:
 117:Src/memory_access.c ****     }
 626              		.loc 1 117 0
 627 003a 0025     		movs	r5, #0
 628              	.LVL70:
 629 003c F1E7     		b	.L52
 630              	.L58:
 631 003e 00BF     		.align	2
 632              	.L57:
 633 0040 00000000 		.word	.LC13
 634              	.LBE7:
 635              		.cfi_endproc
 636              	.LFE149:
 638              		.section	.text.close_file,"ax",%progbits
 639              		.align	1
 640              		.global	close_file
 641              		.syntax unified
 642              		.thumb
 643              		.thumb_func
 644              		.fpu fpv5-sp-d16
 646              	close_file:
 647              	.LFB150:
 122:Src/memory_access.c **** 
 123:Src/memory_access.c **** void close_file(FIL *file) {
 648              		.loc 1 123 0
 649              		.cfi_startproc
 650              		@ args = 0, pretend = 0, frame = 0
 651              		@ frame_needed = 0, uses_anonymous_args = 0
 652              	.LVL71:
 653 0000 10B5     		push	{r4, lr}
 654              	.LCFI12:
 655              		.cfi_def_cfa_offset 8
 656              		.cfi_offset 4, -8
 657              		.cfi_offset 14, -4
 658 0002 0446     		mov	r4, r0
 124:Src/memory_access.c ****     f_close(file);
 659              		.loc 1 124 0
 660 0004 FFF7FEFF 		bl	f_close
 661              	.LVL72:
 125:Src/memory_access.c ****     free(file);
 662              		.loc 1 125 0
 663 0008 2046     		mov	r0, r4
 664 000a FFF7FEFF 		bl	free
 665              	.LVL73:
 126:Src/memory_access.c **** }
 666              		.loc 1 126 0
 667 000e 10BD     		pop	{r4, pc}
 668              		.cfi_endproc
 669              	.LFE150:
ARM GAS  /tmp/cc3UMXZX.s 			page 15


 671              		.section	.text.write_to_file,"ax",%progbits
 672              		.align	1
 673              		.global	write_to_file
 674              		.syntax unified
 675              		.thumb
 676              		.thumb_func
 677              		.fpu fpv5-sp-d16
 679              	write_to_file:
 680              	.LFB151:
 127:Src/memory_access.c **** 
 128:Src/memory_access.c **** uint16_t write_to_file(FIL *file, char *buf, uint16_t size) {
 681              		.loc 1 128 0
 682              		.cfi_startproc
 683              		@ args = 0, pretend = 0, frame = 8
 684              		@ frame_needed = 0, uses_anonymous_args = 0
 685              	.LVL74:
 686 0000 00B5     		push	{lr}
 687              	.LCFI13:
 688              		.cfi_def_cfa_offset 4
 689              		.cfi_offset 14, -4
 690 0002 83B0     		sub	sp, sp, #12
 691              	.LCFI14:
 692              		.cfi_def_cfa_offset 16
 129:Src/memory_access.c ****     uint16_t bw;
 130:Src/memory_access.c ****     if (f_write(file, buf, size, &bw) != FR_OK) {
 693              		.loc 1 130 0
 694 0004 0DF10603 		add	r3, sp, #6
 695 0008 FFF7FEFF 		bl	f_write
 696              	.LVL75:
 697 000c 20B9     		cbnz	r0, .L65
 131:Src/memory_access.c ****         xprintf("write to file error\n");
 132:Src/memory_access.c ****         return -1;
 133:Src/memory_access.c ****     }
 134:Src/memory_access.c ****     return bw;
 698              		.loc 1 134 0
 699 000e BDF80600 		ldrh	r0, [sp, #6]
 700              	.L63:
 135:Src/memory_access.c **** }
 701              		.loc 1 135 0
 702 0012 03B0     		add	sp, sp, #12
 703              	.LCFI15:
 704              		.cfi_remember_state
 705              		.cfi_def_cfa_offset 4
 706              		@ sp needed
 707 0014 5DF804FB 		ldr	pc, [sp], #4
 708              	.L65:
 709              	.LCFI16:
 710              		.cfi_restore_state
 711              	.LBB8:
 131:Src/memory_access.c ****         xprintf("write to file error\n");
 712              		.loc 1 131 0
 713 0018 0248     		ldr	r0, .L66
 714 001a FFF7FEFF 		bl	xprintf
 715              	.LVL76:
 132:Src/memory_access.c ****     }
 716              		.loc 1 132 0
 717 001e 4FF6FF70 		movw	r0, #65535
ARM GAS  /tmp/cc3UMXZX.s 			page 16


 718 0022 F6E7     		b	.L63
 719              	.L67:
 720              		.align	2
 721              	.L66:
 722 0024 00000000 		.word	.LC14
 723              	.LBE8:
 724              		.cfi_endproc
 725              	.LFE151:
 727              		.section	.text.read_file,"ax",%progbits
 728              		.align	1
 729              		.global	read_file
 730              		.syntax unified
 731              		.thumb
 732              		.thumb_func
 733              		.fpu fpv5-sp-d16
 735              	read_file:
 736              	.LFB152:
 136:Src/memory_access.c **** 
 137:Src/memory_access.c **** uint16_t read_file(FIL *file, char *buf, uint16_t size) {
 737              		.loc 1 137 0
 738              		.cfi_startproc
 739              		@ args = 0, pretend = 0, frame = 8
 740              		@ frame_needed = 0, uses_anonymous_args = 0
 741              	.LVL77:
 742 0000 00B5     		push	{lr}
 743              	.LCFI17:
 744              		.cfi_def_cfa_offset 4
 745              		.cfi_offset 14, -4
 746 0002 83B0     		sub	sp, sp, #12
 747              	.LCFI18:
 748              		.cfi_def_cfa_offset 16
 138:Src/memory_access.c ****     uint16_t br;
 139:Src/memory_access.c ****     if (f_read(file, buf, size, &br) != FR_OK) {
 749              		.loc 1 139 0
 750 0004 0DF10603 		add	r3, sp, #6
 751 0008 FFF7FEFF 		bl	f_read
 752              	.LVL78:
 753 000c 20B9     		cbnz	r0, .L72
 140:Src/memory_access.c ****         xprintf("read file error\n");
 141:Src/memory_access.c ****         return -1;
 142:Src/memory_access.c ****     }
 143:Src/memory_access.c ****     return br;
 754              		.loc 1 143 0
 755 000e BDF80600 		ldrh	r0, [sp, #6]
 756              	.L70:
 144:Src/memory_access.c **** }
 757              		.loc 1 144 0
 758 0012 03B0     		add	sp, sp, #12
 759              	.LCFI19:
 760              		.cfi_remember_state
 761              		.cfi_def_cfa_offset 4
 762              		@ sp needed
 763 0014 5DF804FB 		ldr	pc, [sp], #4
 764              	.L72:
 765              	.LCFI20:
 766              		.cfi_restore_state
 767              	.LBB9:
ARM GAS  /tmp/cc3UMXZX.s 			page 17


 140:Src/memory_access.c ****         xprintf("read file error\n");
 768              		.loc 1 140 0
 769 0018 0248     		ldr	r0, .L73
 770 001a FFF7FEFF 		bl	xprintf
 771              	.LVL79:
 141:Src/memory_access.c ****     }
 772              		.loc 1 141 0
 773 001e 4FF6FF70 		movw	r0, #65535
 774 0022 F6E7     		b	.L70
 775              	.L74:
 776              		.align	2
 777              	.L73:
 778 0024 00000000 		.word	.LC15
 779              	.LBE9:
 780              		.cfi_endproc
 781              	.LFE152:
 783              		.section	.text.delete_file,"ax",%progbits
 784              		.align	1
 785              		.global	delete_file
 786              		.syntax unified
 787              		.thumb
 788              		.thumb_func
 789              		.fpu fpv5-sp-d16
 791              	delete_file:
 792              	.LFB153:
 145:Src/memory_access.c **** 
 146:Src/memory_access.c **** int delete_file(char *filename) {
 793              		.loc 1 146 0
 794              		.cfi_startproc
 795              		@ args = 0, pretend = 0, frame = 0
 796              		@ frame_needed = 0, uses_anonymous_args = 0
 797              	.LVL80:
 798 0000 10B5     		push	{r4, lr}
 799              	.LCFI21:
 800              		.cfi_def_cfa_offset 8
 801              		.cfi_offset 4, -8
 802              		.cfi_offset 14, -4
 803 0002 0446     		mov	r4, r0
 147:Src/memory_access.c **** 
 148:Src/memory_access.c **** 
 149:Src/memory_access.c ****     if (f_unlink(filename) != FR_OK) {
 804              		.loc 1 149 0
 805 0004 FFF7FEFF 		bl	f_unlink
 806              	.LVL81:
 807 0008 40B9     		cbnz	r0, .L79
 150:Src/memory_access.c ****         xprintf("cannot delete file: %s\n", filename);
 151:Src/memory_access.c ****         free(filename);
 152:Src/memory_access.c ****         return -1;
 153:Src/memory_access.c ****     }
 154:Src/memory_access.c **** 
 155:Src/memory_access.c ****     xprintf("deleted file: %s\n", filename);
 808              		.loc 1 155 0
 809 000a 2146     		mov	r1, r4
 810 000c 0848     		ldr	r0, .L80
 811 000e FFF7FEFF 		bl	xprintf
 812              	.LVL82:
 156:Src/memory_access.c ****     free(filename);
ARM GAS  /tmp/cc3UMXZX.s 			page 18


 813              		.loc 1 156 0
 814 0012 2046     		mov	r0, r4
 815 0014 FFF7FEFF 		bl	free
 816              	.LVL83:
 157:Src/memory_access.c ****     return 1;
 817              		.loc 1 157 0
 818 0018 0120     		movs	r0, #1
 819              	.L75:
 158:Src/memory_access.c **** }
 820              		.loc 1 158 0
 821 001a 10BD     		pop	{r4, pc}
 822              	.LVL84:
 823              	.L79:
 824              	.LBB10:
 150:Src/memory_access.c ****         free(filename);
 825              		.loc 1 150 0
 826 001c 2146     		mov	r1, r4
 827 001e 0548     		ldr	r0, .L80+4
 828 0020 FFF7FEFF 		bl	xprintf
 829              	.LVL85:
 151:Src/memory_access.c ****         return -1;
 830              		.loc 1 151 0
 831 0024 2046     		mov	r0, r4
 832 0026 FFF7FEFF 		bl	free
 833              	.LVL86:
 152:Src/memory_access.c ****     }
 834              		.loc 1 152 0
 835 002a 4FF0FF30 		mov	r0, #-1
 836 002e F4E7     		b	.L75
 837              	.L81:
 838              		.align	2
 839              	.L80:
 840 0030 18000000 		.word	.LC17
 841 0034 00000000 		.word	.LC16
 842              	.LBE10:
 843              		.cfi_endproc
 844              	.LFE153:
 846              		.section	.text.USB_Process,"ax",%progbits
 847              		.align	1
 848              		.global	USB_Process
 849              		.syntax unified
 850              		.thumb
 851              		.thumb_func
 852              		.fpu fpv5-sp-d16
 854              	USB_Process:
 855              	.LFB154:
 159:Src/memory_access.c **** 
 160:Src/memory_access.c **** void USB_Process(ApplicationTypeDef Appli_state) {
 856              		.loc 1 160 0
 857              		.cfi_startproc
 858              		@ args = 0, pretend = 0, frame = 0
 859              		@ frame_needed = 0, uses_anonymous_args = 0
 860              	.LVL87:
 861 0000 08B5     		push	{r3, lr}
 862              	.LCFI22:
 863              		.cfi_def_cfa_offset 8
 864              		.cfi_offset 3, -8
ARM GAS  /tmp/cc3UMXZX.s 			page 19


 865              		.cfi_offset 14, -4
 161:Src/memory_access.c ****     switch (Appli_state) {
 866              		.loc 1 161 0
 867 0002 0228     		cmp	r0, #2
 868 0004 08D0     		beq	.L84
 869 0006 0328     		cmp	r0, #3
 870 0008 0CD0     		beq	.L85
 871 000a 0128     		cmp	r0, #1
 872 000c 00D0     		beq	.L88
 873              	.LVL88:
 874              	.L82:
 162:Src/memory_access.c ****         case APPLICATION_START:
 163:Src/memory_access.c ****             xprintf("Device connected.\n");
 164:Src/memory_access.c ****             break;
 165:Src/memory_access.c ****         case APPLICATION_READY:
 166:Src/memory_access.c ****             mount_usb();
 167:Src/memory_access.c ****             xprintf("Device ready.\n");
 168:Src/memory_access.c ****             break;
 169:Src/memory_access.c ****         case APPLICATION_DISCONNECT:
 170:Src/memory_access.c ****             unmount_usb();
 171:Src/memory_access.c ****             xprintf("Device disconnected.\n");
 172:Src/memory_access.c ****             break;
 173:Src/memory_access.c ****         default:
 174:Src/memory_access.c ****             break;
 175:Src/memory_access.c ****     }
 176:Src/memory_access.c **** }
 875              		.loc 1 176 0
 876 000e 08BD     		pop	{r3, pc}
 877              	.LVL89:
 878              	.L88:
 879              	.LBB11:
 163:Src/memory_access.c ****             break;
 880              		.loc 1 163 0
 881 0010 0748     		ldr	r0, .L89
 882              	.LVL90:
 883 0012 FFF7FEFF 		bl	xprintf
 884              	.LVL91:
 164:Src/memory_access.c ****         case APPLICATION_READY:
 885              		.loc 1 164 0
 886 0016 FAE7     		b	.L82
 887              	.LVL92:
 888              	.L84:
 166:Src/memory_access.c ****             xprintf("Device ready.\n");
 889              		.loc 1 166 0
 890 0018 FFF7FEFF 		bl	mount_usb
 891              	.LVL93:
 167:Src/memory_access.c ****             break;
 892              		.loc 1 167 0
 893 001c 0548     		ldr	r0, .L89+4
 894 001e FFF7FEFF 		bl	xprintf
 895              	.LVL94:
 168:Src/memory_access.c ****         case APPLICATION_DISCONNECT:
 896              		.loc 1 168 0
 897 0022 F4E7     		b	.L82
 898              	.LVL95:
 899              	.L85:
 170:Src/memory_access.c ****             xprintf("Device disconnected.\n");
ARM GAS  /tmp/cc3UMXZX.s 			page 20


 900              		.loc 1 170 0
 901 0024 FFF7FEFF 		bl	unmount_usb
 902              	.LVL96:
 171:Src/memory_access.c ****             break;
 903              		.loc 1 171 0
 904 0028 0348     		ldr	r0, .L89+8
 905 002a FFF7FEFF 		bl	xprintf
 906              	.LVL97:
 907              	.LBE11:
 908              		.loc 1 176 0
 909 002e EEE7     		b	.L82
 910              	.L90:
 911              		.align	2
 912              	.L89:
 913 0030 00000000 		.word	.LC18
 914 0034 14000000 		.word	.LC19
 915 0038 24000000 		.word	.LC20
 916              		.cfi_endproc
 917              	.LFE154:
 919              		.comm	current_dir,4,4
 920              		.comm	fs,4,4
 921              		.section	.rodata.USB_Process.str1.4,"aMS",%progbits,1
 922              		.align	2
 923              	.LC18:
 924 0000 44657669 		.ascii	"Device connected.\012\000"
 924      63652063 
 924      6F6E6E65 
 924      63746564 
 924      2E0A00
 925 0013 00       		.space	1
 926              	.LC19:
 927 0014 44657669 		.ascii	"Device ready.\012\000"
 927      63652072 
 927      65616479 
 927      2E0A00
 928 0023 00       		.space	1
 929              	.LC20:
 930 0024 44657669 		.ascii	"Device disconnected.\012\000"
 930      63652064 
 930      6973636F 
 930      6E6E6563 
 930      7465642E 
 931              		.section	.rodata._get_full_path.str1.4,"aMS",%progbits,1
 932              		.align	2
 933              	.LC0:
 934 0000 25732F00 		.ascii	"%s/\000"
 935              	.LC1:
 936 0004 25732573 		.ascii	"%s%s/\000"
 936      2F00
 937              		.section	.rodata.change_directory.str1.4,"aMS",%progbits,1
 938              		.align	2
 939              	.LC8:
 940 0000 63616E6E 		.ascii	"cannot change directory: %s\012\000"
 940      6F742063 
 940      68616E67 
 940      65206469 
 940      72656374 
ARM GAS  /tmp/cc3UMXZX.s 			page 21


 941 001d 000000   		.space	3
 942              	.LC9:
 943 0020 25730A00 		.ascii	"%s\012\000"
 944              		.section	.rodata.create_file.str1.4,"aMS",%progbits,1
 945              		.align	2
 946              	.LC13:
 947 0000 63616E6E 		.ascii	"cannot create file %s\012\000"
 947      6F742063 
 947      72656174 
 947      65206669 
 947      6C652025 
 948              		.section	.rodata.delete_file.str1.4,"aMS",%progbits,1
 949              		.align	2
 950              	.LC16:
 951 0000 63616E6E 		.ascii	"cannot delete file: %s\012\000"
 951      6F742064 
 951      656C6574 
 951      65206669 
 951      6C653A20 
 952              	.LC17:
 953 0018 64656C65 		.ascii	"deleted file: %s\012\000"
 953      74656420 
 953      66696C65 
 953      3A202573 
 953      0A00
 954              		.section	.rodata.list_directory.str1.4,"aMS",%progbits,1
 955              		.align	2
 956              	.LC10:
 957 0000 63616E6E 		.ascii	"cannot open directory %s\012\000"
 957      6F74206F 
 957      70656E20 
 957      64697265 
 957      63746F72 
 958 001a 0000     		.space	2
 959              	.LC11:
 960 001c 0A00     		.ascii	"\012\000"
 961              		.section	.rodata.mount_usb.str1.4,"aMS",%progbits,1
 962              		.align	2
 963              	.LC2:
 964 0000 00       		.ascii	"\000"
 965 0001 000000   		.space	3
 966              	.LC3:
 967 0004 75736220 		.ascii	"usb mount error\012\000"
 967      6D6F756E 
 967      74206572 
 967      726F720A 
 967      00
 968 0015 000000   		.space	3
 969              	.LC4:
 970 0018 2F00     		.ascii	"/\000"
 971 001a 0000     		.space	2
 972              	.LC5:
 973 001c 6D6F756E 		.ascii	"mounted USB\012\000"
 973      74656420 
 973      5553420A 
 973      00
 974              		.section	.rodata.open_file.str1.4,"aMS",%progbits,1
ARM GAS  /tmp/cc3UMXZX.s 			page 22


 975              		.align	2
 976              	.LC12:
 977 0000 63616E6E 		.ascii	"cannot open file %s\012\000"
 977      6F74206F 
 977      70656E20 
 977      66696C65 
 977      2025730A 
 978              		.section	.rodata.read_file.str1.4,"aMS",%progbits,1
 979              		.align	2
 980              	.LC15:
 981 0000 72656164 		.ascii	"read file error\012\000"
 981      2066696C 
 981      65206572 
 981      726F720A 
 981      00
 982              		.section	.rodata.unmount_usb.str1.4,"aMS",%progbits,1
 983              		.align	2
 984              	.LC6:
 985 0000 75736220 		.ascii	"usb unmount error\012\000"
 985      756E6D6F 
 985      756E7420 
 985      6572726F 
 985      720A00
 986 0013 00       		.space	1
 987              	.LC7:
 988 0014 756E6D6F 		.ascii	"unmounted USB\012\000"
 988      756E7465 
 988      64205553 
 988      420A00
 989              		.section	.rodata.write_to_file.str1.4,"aMS",%progbits,1
 990              		.align	2
 991              	.LC14:
 992 0000 77726974 		.ascii	"write to file error\012\000"
 992      6520746F 
 992      2066696C 
 992      65206572 
 992      726F720A 
 993              		.text
 994              	.Letext0:
 995              		.file 2 "Middlewares/Third_Party/FatFs/src/integer.h"
 996              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 997              		.file 4 "/usr/arm-none-eabi/include/sys/_stdint.h"
 998              		.file 5 "Drivers/CMSIS/Include/core_cm7.h"
 999              		.file 6 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 1000              		.file 7 "/usr/arm-none-eabi/include/sys/lock.h"
 1001              		.file 8 "/usr/arm-none-eabi/include/sys/_types.h"
 1002              		.file 9 "/usr/lib/gcc/arm-none-eabi/7.1.0/include/stddef.h"
 1003              		.file 10 "/usr/arm-none-eabi/include/sys/reent.h"
 1004              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 1005              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 1006              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/semphr.h"
 1007              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 1008              		.file 15 "/usr/arm-none-eabi/include/stdlib.h"
 1009              		.file 16 "Middlewares/ST/STM32_USB_Host_Library/Core/Inc/usbh_def.h"
 1010              		.file 17 "Middlewares/ST/STM32_USB_Host_Library/Core/Inc/usbh_ctlreq.h"
 1011              		.file 18 "Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc/usbh_msc.h"
 1012              		.file 19 "Middlewares/Third_Party/FatFs/src/ff.h"
ARM GAS  /tmp/cc3UMXZX.s 			page 23


 1013              		.file 20 "Middlewares/Third_Party/FatFs/src/diskio.h"
 1014              		.file 21 "Middlewares/Third_Party/FatFs/src/ff_gen_drv.h"
 1015              		.file 22 "Inc/usbh_diskio.h"
 1016              		.file 23 "Inc/fatfs.h"
 1017              		.file 24 "Inc/usb_host.h"
 1018              		.file 25 "/usr/arm-none-eabi/include/stdio.h"
 1019              		.file 26 "/usr/arm-none-eabi/include/string.h"
 1020              		.file 27 "<built-in>"
ARM GAS  /tmp/cc3UMXZX.s 			page 24


DEFINED SYMBOLS
                            *ABS*:0000000000000000 memory_access.c
     /tmp/cc3UMXZX.s:18     .text._is_full_path:0000000000000000 $t
     /tmp/cc3UMXZX.s:25     .text._is_full_path:0000000000000000 _is_full_path
     /tmp/cc3UMXZX.s:53     .text._get_full_path:0000000000000000 $t
     /tmp/cc3UMXZX.s:60     .text._get_full_path:0000000000000000 _get_full_path
     /tmp/cc3UMXZX.s:125    .text._get_full_path:000000000000004c $d
                            *COM*:0000000000000004 current_dir
     /tmp/cc3UMXZX.s:132    .text.mount_usb:0000000000000000 $t
     /tmp/cc3UMXZX.s:139    .text.mount_usb:0000000000000000 mount_usb
     /tmp/cc3UMXZX.s:198    .text.mount_usb:0000000000000048 $d
                            *COM*:0000000000000004 fs
     /tmp/cc3UMXZX.s:209    .text.unmount_usb:0000000000000000 $t
     /tmp/cc3UMXZX.s:216    .text.unmount_usb:0000000000000000 unmount_usb
     /tmp/cc3UMXZX.s:265    .text.unmount_usb:0000000000000034 $d
     /tmp/cc3UMXZX.s:275    .text.get_current_directory:0000000000000000 $t
     /tmp/cc3UMXZX.s:282    .text.get_current_directory:0000000000000000 get_current_directory
     /tmp/cc3UMXZX.s:296    .text.get_current_directory:0000000000000008 $d
     /tmp/cc3UMXZX.s:301    .text.change_directory:0000000000000000 $t
     /tmp/cc3UMXZX.s:308    .text.change_directory:0000000000000000 change_directory
     /tmp/cc3UMXZX.s:370    .text.change_directory:0000000000000034 $d
     /tmp/cc3UMXZX.s:378    .text.list_directory:0000000000000000 $t
     /tmp/cc3UMXZX.s:385    .text.list_directory:0000000000000000 list_directory
     /tmp/cc3UMXZX.s:470    .text.list_directory:0000000000000060 $d
     /tmp/cc3UMXZX.s:477    .text.open_file:0000000000000000 $t
     /tmp/cc3UMXZX.s:484    .text.open_file:0000000000000000 open_file
     /tmp/cc3UMXZX.s:555    .text.open_file:0000000000000050 $d
     /tmp/cc3UMXZX.s:563    .text.create_file:0000000000000000 $t
     /tmp/cc3UMXZX.s:570    .text.create_file:0000000000000000 create_file
     /tmp/cc3UMXZX.s:633    .text.create_file:0000000000000040 $d
     /tmp/cc3UMXZX.s:639    .text.close_file:0000000000000000 $t
     /tmp/cc3UMXZX.s:646    .text.close_file:0000000000000000 close_file
     /tmp/cc3UMXZX.s:672    .text.write_to_file:0000000000000000 $t
     /tmp/cc3UMXZX.s:679    .text.write_to_file:0000000000000000 write_to_file
     /tmp/cc3UMXZX.s:722    .text.write_to_file:0000000000000024 $d
     /tmp/cc3UMXZX.s:728    .text.read_file:0000000000000000 $t
     /tmp/cc3UMXZX.s:735    .text.read_file:0000000000000000 read_file
     /tmp/cc3UMXZX.s:778    .text.read_file:0000000000000024 $d
     /tmp/cc3UMXZX.s:784    .text.delete_file:0000000000000000 $t
     /tmp/cc3UMXZX.s:791    .text.delete_file:0000000000000000 delete_file
     /tmp/cc3UMXZX.s:840    .text.delete_file:0000000000000030 $d
     /tmp/cc3UMXZX.s:847    .text.USB_Process:0000000000000000 $t
     /tmp/cc3UMXZX.s:854    .text.USB_Process:0000000000000000 USB_Process
     /tmp/cc3UMXZX.s:913    .text.USB_Process:0000000000000030 $d
     /tmp/cc3UMXZX.s:922    .rodata.USB_Process.str1.4:0000000000000000 $d
     /tmp/cc3UMXZX.s:932    .rodata._get_full_path.str1.4:0000000000000000 $d
     /tmp/cc3UMXZX.s:938    .rodata.change_directory.str1.4:0000000000000000 $d
     /tmp/cc3UMXZX.s:945    .rodata.create_file.str1.4:0000000000000000 $d
     /tmp/cc3UMXZX.s:949    .rodata.delete_file.str1.4:0000000000000000 $d
     /tmp/cc3UMXZX.s:955    .rodata.list_directory.str1.4:0000000000000000 $d
     /tmp/cc3UMXZX.s:962    .rodata.mount_usb.str1.4:0000000000000000 $d
     /tmp/cc3UMXZX.s:975    .rodata.open_file.str1.4:0000000000000000 $d
     /tmp/cc3UMXZX.s:979    .rodata.read_file.str1.4:0000000000000000 $d
     /tmp/cc3UMXZX.s:983    .rodata.unmount_usb.str1.4:0000000000000000 $d
     /tmp/cc3UMXZX.s:990    .rodata.write_to_file.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
ARM GAS  /tmp/cc3UMXZX.s 			page 25


strlen
malloc
sprintf
f_mount
xprintf
free
f_opendir
f_closedir
f_readdir
strcat
f_open
f_close
f_write
f_read
f_unlink
