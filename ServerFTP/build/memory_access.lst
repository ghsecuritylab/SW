ARM GAS  /tmp/ccfnwc1N.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"memory_access.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.mount_usb,"ax",%progbits
  18              		.align	1
  19              		.global	mount_usb
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-sp-d16
  25              	mount_usb:
  26              	.LFB141:
  27              		.file 1 "Src/memory_access.c"
   1:Src/memory_access.c **** #include "memory_access.h"
   2:Src/memory_access.c **** #include "fatfs.h"
   3:Src/memory_access.c **** #include "ff.h"
   4:Src/memory_access.c **** #include "usb_host.h"
   5:Src/memory_access.c **** #include <string.h>
   6:Src/memory_access.c **** 
   7:Src/memory_access.c **** extern USBH_HandleTypeDef hUsbHostFS;
   8:Src/memory_access.c **** 
   9:Src/memory_access.c **** int8_t mount_usb() {	
  28              		.loc 1 9 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 08B5     		push	{r3, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 3, -8
  36              		.cfi_offset 14, -4
  10:Src/memory_access.c **** 	if(f_mount(&fs, "", 1) != FR_OK) {
  37              		.loc 1 10 0
  38 0002 0122     		movs	r2, #1
  39 0004 0749     		ldr	r1, .L6
  40 0006 0848     		ldr	r0, .L6+4
  41 0008 FFF7FEFF 		bl	f_mount
  42              	.LVL0:
  43 000c 20B9     		cbnz	r0, .L5
  11:Src/memory_access.c **** 		xprintf("usb mount error\r\n");		
  12:Src/memory_access.c **** 		return 0;
  13:Src/memory_access.c **** 	}
  14:Src/memory_access.c **** 	xprintf("mounted USB\r\n");
  44              		.loc 1 14 0
ARM GAS  /tmp/ccfnwc1N.s 			page 2


  45 000e 0748     		ldr	r0, .L6+8
  46 0010 FFF7FEFF 		bl	xprintf
  47              	.LVL1:
  15:Src/memory_access.c **** 	return 1;
  48              		.loc 1 15 0
  49 0014 0120     		movs	r0, #1
  50              	.L3:
  16:Src/memory_access.c **** }
  51              		.loc 1 16 0
  52 0016 08BD     		pop	{r3, pc}
  53              	.L5:
  54              	.LBB2:
  11:Src/memory_access.c **** 		xprintf("usb mount error\r\n");		
  55              		.loc 1 11 0
  56 0018 0548     		ldr	r0, .L6+12
  57 001a FFF7FEFF 		bl	xprintf
  58              	.LVL2:
  12:Src/memory_access.c **** 	}
  59              		.loc 1 12 0
  60 001e 0020     		movs	r0, #0
  61 0020 F9E7     		b	.L3
  62              	.L7:
  63 0022 00BF     		.align	2
  64              	.L6:
  65 0024 00000000 		.word	.LC0
  66 0028 00000000 		.word	fs
  67 002c 18000000 		.word	.LC2
  68 0030 04000000 		.word	.LC1
  69              	.LBE2:
  70              		.cfi_endproc
  71              	.LFE141:
  73              		.section	.text.unmount_usb,"ax",%progbits
  74              		.align	1
  75              		.global	unmount_usb
  76              		.syntax unified
  77              		.thumb
  78              		.thumb_func
  79              		.fpu fpv5-sp-d16
  81              	unmount_usb:
  82              	.LFB142:
  17:Src/memory_access.c **** 
  18:Src/memory_access.c **** int8_t unmount_usb() {
  83              		.loc 1 18 0
  84              		.cfi_startproc
  85              		@ args = 0, pretend = 0, frame = 0
  86              		@ frame_needed = 0, uses_anonymous_args = 0
  87 0000 08B5     		push	{r3, lr}
  88              	.LCFI1:
  89              		.cfi_def_cfa_offset 8
  90              		.cfi_offset 3, -8
  91              		.cfi_offset 14, -4
  19:Src/memory_access.c **** 	if(f_mount(0, "", 0) != FR_OK) {
  92              		.loc 1 19 0
  93 0002 0022     		movs	r2, #0
  94 0004 0749     		ldr	r1, .L13
  95 0006 1046     		mov	r0, r2
  96 0008 FFF7FEFF 		bl	f_mount
ARM GAS  /tmp/ccfnwc1N.s 			page 3


  97              	.LVL3:
  98 000c 20B9     		cbnz	r0, .L12
  20:Src/memory_access.c **** 		xprintf("usb unmount error\r\n");
  21:Src/memory_access.c **** 		return 0;
  22:Src/memory_access.c **** 	}
  23:Src/memory_access.c **** 	xprintf("unmounted USB\r\n");
  99              		.loc 1 23 0
 100 000e 0648     		ldr	r0, .L13+4
 101 0010 FFF7FEFF 		bl	xprintf
 102              	.LVL4:
  24:Src/memory_access.c **** 	return 1;
 103              		.loc 1 24 0
 104 0014 0120     		movs	r0, #1
 105              	.L10:
  25:Src/memory_access.c **** }
 106              		.loc 1 25 0
 107 0016 08BD     		pop	{r3, pc}
 108              	.L12:
 109              	.LBB3:
  20:Src/memory_access.c **** 		xprintf("usb unmount error\r\n");
 110              		.loc 1 20 0
 111 0018 0448     		ldr	r0, .L13+8
 112 001a FFF7FEFF 		bl	xprintf
 113              	.LVL5:
  21:Src/memory_access.c **** 	}
 114              		.loc 1 21 0
 115 001e 0020     		movs	r0, #0
 116 0020 F9E7     		b	.L10
 117              	.L14:
 118 0022 00BF     		.align	2
 119              	.L13:
 120 0024 00000000 		.word	.LC0
 121 0028 14000000 		.word	.LC4
 122 002c 00000000 		.word	.LC3
 123              	.LBE3:
 124              		.cfi_endproc
 125              	.LFE142:
 127              		.section	.text.is_full_path,"ax",%progbits
 128              		.align	1
 129              		.global	is_full_path
 130              		.syntax unified
 131              		.thumb
 132              		.thumb_func
 133              		.fpu fpv5-sp-d16
 135              	is_full_path:
 136              	.LFB143:
  26:Src/memory_access.c **** 
  27:Src/memory_access.c **** int8_t is_full_path(const char *path) {
 137              		.loc 1 27 0
 138              		.cfi_startproc
 139              		@ args = 0, pretend = 0, frame = 0
 140              		@ frame_needed = 0, uses_anonymous_args = 0
 141              		@ link register save eliminated.
 142              	.LVL6:
  28:Src/memory_access.c **** 	if(path[0] == '/' ) {
 143              		.loc 1 28 0
 144 0000 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
ARM GAS  /tmp/ccfnwc1N.s 			page 4


 145 0002 2F2B     		cmp	r3, #47
 146 0004 01D0     		beq	.L18
  29:Src/memory_access.c **** 		return 1;
  30:Src/memory_access.c **** 	}
  31:Src/memory_access.c **** 	return 0;
 147              		.loc 1 31 0
 148 0006 0020     		movs	r0, #0
 149              	.LVL7:
  32:Src/memory_access.c **** }
 150              		.loc 1 32 0
 151 0008 7047     		bx	lr
 152              	.LVL8:
 153              	.L18:
  29:Src/memory_access.c **** 		return 1;
 154              		.loc 1 29 0
 155 000a 0120     		movs	r0, #1
 156              	.LVL9:
 157 000c 7047     		bx	lr
 158              		.cfi_endproc
 159              	.LFE143:
 161              		.section	.text.get_full_path,"ax",%progbits
 162              		.align	1
 163              		.global	get_full_path
 164              		.syntax unified
 165              		.thumb
 166              		.thumb_func
 167              		.fpu fpv5-sp-d16
 169              	get_full_path:
 170              	.LFB144:
  33:Src/memory_access.c **** 
  34:Src/memory_access.c **** uint8_t get_full_path(char *current_path, const char *path) {
 171              		.loc 1 34 0
 172              		.cfi_startproc
 173              		@ args = 0, pretend = 0, frame = 128
 174              		@ frame_needed = 0, uses_anonymous_args = 0
 175              	.LVL10:
 176 0000 70B5     		push	{r4, r5, r6, lr}
 177              	.LCFI2:
 178              		.cfi_def_cfa_offset 16
 179              		.cfi_offset 4, -16
 180              		.cfi_offset 5, -12
 181              		.cfi_offset 6, -8
 182              		.cfi_offset 14, -4
 183 0002 A0B0     		sub	sp, sp, #128
 184              	.LCFI3:
 185              		.cfi_def_cfa_offset 144
 186 0004 0546     		mov	r5, r0
 187 0006 0C46     		mov	r4, r1
  35:Src/memory_access.c ****     if(is_full_path(path)) {
 188              		.loc 1 35 0
 189 0008 0846     		mov	r0, r1
 190              	.LVL11:
 191 000a FFF7FEFF 		bl	is_full_path
 192              	.LVL12:
 193 000e 70B1     		cbz	r0, .L20
  36:Src/memory_access.c ****     	if(strlen(path) + 1 > MAX_PATH_LEN)
 194              		.loc 1 36 0
ARM GAS  /tmp/ccfnwc1N.s 			page 5


 195 0010 2046     		mov	r0, r4
 196 0012 FFF7FEFF 		bl	strlen
 197              	.LVL13:
 198 0016 0130     		adds	r0, r0, #1
 199 0018 8028     		cmp	r0, #128
 200 001a 02D9     		bls	.L29
  37:Src/memory_access.c ****     		return 0;
 201              		.loc 1 37 0
 202 001c 0020     		movs	r0, #0
 203              	.L21:
  38:Src/memory_access.c **** 
  39:Src/memory_access.c ****         strcpy(current_path, path);
  40:Src/memory_access.c **** 
  41:Src/memory_access.c ****     } else if(current_path[0] == '\0') {
  42:Src/memory_access.c ****     	if(strlen(path) + 2 > MAX_PATH_LEN)
  43:Src/memory_access.c ****     		return 0;
  44:Src/memory_access.c **** 
  45:Src/memory_access.c ****         sprintf(current_path, "/%s", path);
  46:Src/memory_access.c **** 
  47:Src/memory_access.c ****     } else if(strcmp(current_path, "/") == 0) {
  48:Src/memory_access.c ****     	if(strlen(current_path) + strlen(path) + 1 > MAX_PATH_LEN)
  49:Src/memory_access.c ****     		return 0;
  50:Src/memory_access.c **** 
  51:Src/memory_access.c ****     	char new_path[MAX_PATH_LEN];
  52:Src/memory_access.c ****         sprintf(new_path, "%s%s", current_path, path);
  53:Src/memory_access.c ****         strcpy(current_path, path);
  54:Src/memory_access.c **** 
  55:Src/memory_access.c ****     } else {
  56:Src/memory_access.c ****     	if(strlen(current_path) + strlen(path) + 2 > MAX_PATH_LEN)
  57:Src/memory_access.c ****     		return 0;
  58:Src/memory_access.c **** 
  59:Src/memory_access.c ****     	char new_path[MAX_PATH_LEN];
  60:Src/memory_access.c ****         sprintf(new_path, "%s/%s", current_path, path);
  61:Src/memory_access.c ****         strcpy(current_path, path);
  62:Src/memory_access.c ****     }
  63:Src/memory_access.c ****     return 1;
  64:Src/memory_access.c **** }
 204              		.loc 1 64 0
 205 001e 20B0     		add	sp, sp, #128
 206              	.LCFI4:
 207              		.cfi_remember_state
 208              		.cfi_def_cfa_offset 16
 209              		@ sp needed
 210 0020 70BD     		pop	{r4, r5, r6, pc}
 211              	.LVL14:
 212              	.L29:
 213              	.LCFI5:
 214              		.cfi_restore_state
  39:Src/memory_access.c **** 
 215              		.loc 1 39 0
 216 0022 2146     		mov	r1, r4
 217 0024 2846     		mov	r0, r5
 218 0026 FFF7FEFF 		bl	strcpy
 219              	.LVL15:
  63:Src/memory_access.c **** }
 220              		.loc 1 63 0
 221 002a 0120     		movs	r0, #1
ARM GAS  /tmp/ccfnwc1N.s 			page 6


 222 002c F7E7     		b	.L21
 223              	.L20:
  41:Src/memory_access.c ****     	if(strlen(path) + 2 > MAX_PATH_LEN)
 224              		.loc 1 41 0
 225 002e 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 226 0030 73B9     		cbnz	r3, .L22
  42:Src/memory_access.c ****     		return 0;
 227              		.loc 1 42 0
 228 0032 2046     		mov	r0, r4
 229 0034 FFF7FEFF 		bl	strlen
 230              	.LVL16:
 231 0038 0230     		adds	r0, r0, #2
 232 003a 8028     		cmp	r0, #128
 233 003c 01D9     		bls	.L30
  43:Src/memory_access.c **** 
 234              		.loc 1 43 0
 235 003e 0020     		movs	r0, #0
 236 0040 EDE7     		b	.L21
 237              	.L30:
  45:Src/memory_access.c **** 
 238              		.loc 1 45 0
 239 0042 2246     		mov	r2, r4
 240 0044 1E49     		ldr	r1, .L31
 241 0046 2846     		mov	r0, r5
 242 0048 FFF7FEFF 		bl	sprintf
 243              	.LVL17:
  63:Src/memory_access.c **** }
 244              		.loc 1 63 0
 245 004c 0120     		movs	r0, #1
 246 004e E6E7     		b	.L21
 247              	.L22:
  47:Src/memory_access.c ****     	if(strlen(current_path) + strlen(path) + 1 > MAX_PATH_LEN)
 248              		.loc 1 47 0
 249 0050 1C49     		ldr	r1, .L31+4
 250 0052 2846     		mov	r0, r5
 251 0054 FFF7FEFF 		bl	strcmp
 252              	.LVL18:
 253 0058 C0B9     		cbnz	r0, .L23
 254              	.LBB4:
  48:Src/memory_access.c ****     		return 0;
 255              		.loc 1 48 0
 256 005a 2846     		mov	r0, r5
 257 005c FFF7FEFF 		bl	strlen
 258              	.LVL19:
 259 0060 0646     		mov	r6, r0
 260 0062 2046     		mov	r0, r4
 261 0064 FFF7FEFF 		bl	strlen
 262              	.LVL20:
 263 0068 3044     		add	r0, r0, r6
 264 006a 0130     		adds	r0, r0, #1
 265 006c 8028     		cmp	r0, #128
 266 006e 01D9     		bls	.L24
  49:Src/memory_access.c **** 
 267              		.loc 1 49 0
 268 0070 0020     		movs	r0, #0
 269 0072 D4E7     		b	.L21
 270              	.L24:
ARM GAS  /tmp/ccfnwc1N.s 			page 7


  52:Src/memory_access.c ****         strcpy(current_path, path);
 271              		.loc 1 52 0
 272 0074 2346     		mov	r3, r4
 273 0076 2A46     		mov	r2, r5
 274 0078 1349     		ldr	r1, .L31+8
 275 007a 6846     		mov	r0, sp
 276 007c FFF7FEFF 		bl	sprintf
 277              	.LVL21:
  53:Src/memory_access.c **** 
 278              		.loc 1 53 0
 279 0080 2146     		mov	r1, r4
 280 0082 2846     		mov	r0, r5
 281 0084 FFF7FEFF 		bl	strcpy
 282              	.LVL22:
 283              	.LBE4:
  63:Src/memory_access.c **** }
 284              		.loc 1 63 0
 285 0088 0120     		movs	r0, #1
 286 008a C8E7     		b	.L21
 287              	.L23:
 288              	.LBB5:
  56:Src/memory_access.c ****     		return 0;
 289              		.loc 1 56 0
 290 008c 2846     		mov	r0, r5
 291 008e FFF7FEFF 		bl	strlen
 292              	.LVL23:
 293 0092 0646     		mov	r6, r0
 294 0094 2046     		mov	r0, r4
 295 0096 FFF7FEFF 		bl	strlen
 296              	.LVL24:
 297 009a 3044     		add	r0, r0, r6
 298 009c 0230     		adds	r0, r0, #2
 299 009e 8028     		cmp	r0, #128
 300 00a0 01D9     		bls	.L25
  57:Src/memory_access.c **** 
 301              		.loc 1 57 0
 302 00a2 0020     		movs	r0, #0
 303 00a4 BBE7     		b	.L21
 304              	.L25:
  60:Src/memory_access.c ****         strcpy(current_path, path);
 305              		.loc 1 60 0
 306 00a6 2346     		mov	r3, r4
 307 00a8 2A46     		mov	r2, r5
 308 00aa 0849     		ldr	r1, .L31+12
 309 00ac 6846     		mov	r0, sp
 310 00ae FFF7FEFF 		bl	sprintf
 311              	.LVL25:
  61:Src/memory_access.c ****     }
 312              		.loc 1 61 0
 313 00b2 2146     		mov	r1, r4
 314 00b4 2846     		mov	r0, r5
 315 00b6 FFF7FEFF 		bl	strcpy
 316              	.LVL26:
 317              	.LBE5:
  63:Src/memory_access.c **** }
 318              		.loc 1 63 0
 319 00ba 0120     		movs	r0, #1
ARM GAS  /tmp/ccfnwc1N.s 			page 8


 320              	.LBB6:
 321 00bc AFE7     		b	.L21
 322              	.L32:
 323 00be 00BF     		.align	2
 324              	.L31:
 325 00c0 00000000 		.word	.LC5
 326 00c4 04000000 		.word	.LC6
 327 00c8 08000000 		.word	.LC7
 328 00cc 10000000 		.word	.LC8
 329              	.LBE6:
 330              		.cfi_endproc
 331              	.LFE144:
 333              		.section	.text.get_final_path,"ax",%progbits
 334              		.align	1
 335              		.global	get_final_path
 336              		.syntax unified
 337              		.thumb
 338              		.thumb_func
 339              		.fpu fpv5-sp-d16
 341              	get_final_path:
 342              	.LFB145:
  65:Src/memory_access.c **** 
  66:Src/memory_access.c **** uint8_t get_final_path(char *full_path) {
 343              		.loc 1 66 0
 344              		.cfi_startproc
 345              		@ args = 0, pretend = 0, frame = 128
 346              		@ frame_needed = 0, uses_anonymous_args = 0
 347              	.LVL27:
 348 0000 10B5     		push	{r4, lr}
 349              	.LCFI6:
 350              		.cfi_def_cfa_offset 8
 351              		.cfi_offset 4, -8
 352              		.cfi_offset 14, -4
 353 0002 A0B0     		sub	sp, sp, #128
 354              	.LCFI7:
 355              		.cfi_def_cfa_offset 136
 356 0004 0446     		mov	r4, r0
  67:Src/memory_access.c ****     if(strlen(BASIC_PATH) + strlen(full_path) + 1 > MAX_PATH_LEN)
 357              		.loc 1 67 0
 358 0006 FFF7FEFF 		bl	strlen
 359              	.LVL28:
 360 000a 0130     		adds	r0, r0, #1
 361 000c 8028     		cmp	r0, #128
 362 000e 02D9     		bls	.L37
  68:Src/memory_access.c ****     	return 0;
 363              		.loc 1 68 0
 364 0010 0020     		movs	r0, #0
 365              	.L34:
  69:Src/memory_access.c **** 
  70:Src/memory_access.c ****     char new_path[MAX_PATH_LEN];    
  71:Src/memory_access.c ****     sprintf(new_path, "%s%s", BASIC_PATH, full_path);
  72:Src/memory_access.c ****     strcpy(full_path, new_path);
  73:Src/memory_access.c ****     return 1;
  74:Src/memory_access.c **** }
 366              		.loc 1 74 0
 367 0012 20B0     		add	sp, sp, #128
 368              	.LCFI8:
ARM GAS  /tmp/ccfnwc1N.s 			page 9


 369              		.cfi_remember_state
 370              		.cfi_def_cfa_offset 8
 371              		@ sp needed
 372 0014 10BD     		pop	{r4, pc}
 373              	.LVL29:
 374              	.L37:
 375              	.LCFI9:
 376              		.cfi_restore_state
  71:Src/memory_access.c ****     strcpy(full_path, new_path);
 377              		.loc 1 71 0
 378 0016 2346     		mov	r3, r4
 379 0018 054A     		ldr	r2, .L38
 380 001a 0649     		ldr	r1, .L38+4
 381 001c 6846     		mov	r0, sp
 382 001e FFF7FEFF 		bl	sprintf
 383              	.LVL30:
  72:Src/memory_access.c ****     return 1;
 384              		.loc 1 72 0
 385 0022 6946     		mov	r1, sp
 386 0024 2046     		mov	r0, r4
 387 0026 FFF7FEFF 		bl	strcpy
 388              	.LVL31:
  73:Src/memory_access.c **** }
 389              		.loc 1 73 0
 390 002a 0120     		movs	r0, #1
 391 002c F1E7     		b	.L34
 392              	.L39:
 393 002e 00BF     		.align	2
 394              	.L38:
 395 0030 00000000 		.word	.LC0
 396 0034 08000000 		.word	.LC7
 397              		.cfi_endproc
 398              	.LFE145:
 400              		.section	.text.get_final_path_2,"ax",%progbits
 401              		.align	1
 402              		.global	get_final_path_2
 403              		.syntax unified
 404              		.thumb
 405              		.thumb_func
 406              		.fpu fpv5-sp-d16
 408              	get_final_path_2:
 409              	.LFB146:
  75:Src/memory_access.c **** 
  76:Src/memory_access.c **** uint8_t get_final_path_2(char *current_path, const char *path) {
 410              		.loc 1 76 0
 411              		.cfi_startproc
 412              		@ args = 0, pretend = 0, frame = 0
 413              		@ frame_needed = 0, uses_anonymous_args = 0
 414              	.LVL32:
 415 0000 10B5     		push	{r4, lr}
 416              	.LCFI10:
 417              		.cfi_def_cfa_offset 8
 418              		.cfi_offset 4, -8
 419              		.cfi_offset 14, -4
 420 0002 0446     		mov	r4, r0
  77:Src/memory_access.c ****     if(!get_full_path(current_path, path))
 421              		.loc 1 77 0
ARM GAS  /tmp/ccfnwc1N.s 			page 10


 422 0004 FFF7FEFF 		bl	get_full_path
 423              	.LVL33:
 424 0008 0346     		mov	r3, r0
 425 000a 08B9     		cbnz	r0, .L44
 426              	.L41:
  78:Src/memory_access.c ****     	return 0;
  79:Src/memory_access.c **** 
  80:Src/memory_access.c ****     if(!get_final_path(current_path))
  81:Src/memory_access.c ****     	return 0;
  82:Src/memory_access.c **** 
  83:Src/memory_access.c ****     return 1;
  84:Src/memory_access.c **** }
 427              		.loc 1 84 0
 428 000c 1846     		mov	r0, r3
 429 000e 10BD     		pop	{r4, pc}
 430              	.LVL34:
 431              	.L44:
  80:Src/memory_access.c ****     	return 0;
 432              		.loc 1 80 0
 433 0010 2046     		mov	r0, r4
 434 0012 FFF7FEFF 		bl	get_final_path
 435              	.LVL35:
 436 0016 0346     		mov	r3, r0
 437 0018 0028     		cmp	r0, #0
 438 001a F7D0     		beq	.L41
  83:Src/memory_access.c **** }
 439              		.loc 1 83 0
 440 001c 0123     		movs	r3, #1
 441 001e F5E7     		b	.L41
 442              		.cfi_endproc
 443              	.LFE146:
 445              		.section	.text.directory_exist,"ax",%progbits
 446              		.align	1
 447              		.global	directory_exist
 448              		.syntax unified
 449              		.thumb
 450              		.thumb_func
 451              		.fpu fpv5-sp-d16
 453              	directory_exist:
 454              	.LFB147:
  85:Src/memory_access.c **** 
  86:Src/memory_access.c **** int8_t directory_exist(const char *full_path) {
 455              		.loc 1 86 0
 456              		.cfi_startproc
 457              		@ args = 0, pretend = 0, frame = 176
 458              		@ frame_needed = 0, uses_anonymous_args = 0
 459              	.LVL36:
 460 0000 10B5     		push	{r4, lr}
 461              	.LCFI11:
 462              		.cfi_def_cfa_offset 8
 463              		.cfi_offset 4, -8
 464              		.cfi_offset 14, -4
 465 0002 ACB0     		sub	sp, sp, #176
 466              	.LCFI12:
 467              		.cfi_def_cfa_offset 184
 468 0004 0446     		mov	r4, r0
  87:Src/memory_access.c **** 	char final_path[MAX_PATH_LEN]; 
ARM GAS  /tmp/ccfnwc1N.s 			page 11


  88:Src/memory_access.c **** 	strcpy(final_path, full_path);	
 469              		.loc 1 88 0
 470 0006 0146     		mov	r1, r0
 471 0008 0CA8     		add	r0, sp, #48
 472              	.LVL37:
 473 000a FFF7FEFF 		bl	strcpy
 474              	.LVL38:
  89:Src/memory_access.c ****     if(!get_final_path(final_path)) {
 475              		.loc 1 89 0
 476 000e 0CA8     		add	r0, sp, #48
 477 0010 FFF7FEFF 		bl	get_final_path
 478              	.LVL39:
 479 0014 48B1     		cbz	r0, .L50
  90:Src/memory_access.c ****     	xprintf("cannot get directory path: %s\n", full_path);
  91:Src/memory_access.c ****     	return 0;
  92:Src/memory_access.c ****     }
  93:Src/memory_access.c **** 
  94:Src/memory_access.c ****     DIR dir;
  95:Src/memory_access.c ****     if(f_opendir(&dir, final_path) != FR_OK) {
 480              		.loc 1 95 0
 481 0016 0CA9     		add	r1, sp, #48
 482 0018 6846     		mov	r0, sp
 483 001a FFF7FEFF 		bl	f_opendir
 484              	.LVL40:
 485 001e 58B9     		cbnz	r0, .L51
  96:Src/memory_access.c **** 		xprintf("cannot change to directory: %s\n", full_path);
  97:Src/memory_access.c **** 		return 0;
  98:Src/memory_access.c **** 	}
  99:Src/memory_access.c **** 	f_closedir(&dir);
 486              		.loc 1 99 0
 487 0020 6846     		mov	r0, sp
 488 0022 FFF7FEFF 		bl	f_closedir
 489              	.LVL41:
 100:Src/memory_access.c **** 	return 1;  
 490              		.loc 1 100 0
 491 0026 0120     		movs	r0, #1
 492 0028 04E0     		b	.L47
 493              	.L50:
 494              	.LBB7:
  90:Src/memory_access.c ****     	xprintf("cannot get directory path: %s\n", full_path);
 495              		.loc 1 90 0
 496 002a 2146     		mov	r1, r4
 497 002c 0548     		ldr	r0, .L52
 498 002e FFF7FEFF 		bl	xprintf
 499              	.LVL42:
  91:Src/memory_access.c ****     }
 500              		.loc 1 91 0
 501 0032 0020     		movs	r0, #0
 502              	.L47:
 503              	.LBE7:
 101:Src/memory_access.c **** }
 504              		.loc 1 101 0
 505 0034 2CB0     		add	sp, sp, #176
 506              	.LCFI13:
 507              		.cfi_remember_state
 508              		.cfi_def_cfa_offset 8
 509              		@ sp needed
ARM GAS  /tmp/ccfnwc1N.s 			page 12


 510 0036 10BD     		pop	{r4, pc}
 511              	.LVL43:
 512              	.L51:
 513              	.LCFI14:
 514              		.cfi_restore_state
 515              	.LBB8:
  96:Src/memory_access.c **** 		return 0;
 516              		.loc 1 96 0
 517 0038 2146     		mov	r1, r4
 518 003a 0348     		ldr	r0, .L52+4
 519 003c FFF7FEFF 		bl	xprintf
 520              	.LVL44:
  97:Src/memory_access.c **** 	}
 521              		.loc 1 97 0
 522 0040 0020     		movs	r0, #0
 523 0042 F7E7     		b	.L47
 524              	.L53:
 525              		.align	2
 526              	.L52:
 527 0044 00000000 		.word	.LC9
 528 0048 20000000 		.word	.LC10
 529              	.LBE8:
 530              		.cfi_endproc
 531              	.LFE147:
 533              		.section	.text.change_directory,"ax",%progbits
 534              		.align	1
 535              		.global	change_directory
 536              		.syntax unified
 537              		.thumb
 538              		.thumb_func
 539              		.fpu fpv5-sp-d16
 541              	change_directory:
 542              	.LFB148:
 102:Src/memory_access.c **** 
 103:Src/memory_access.c **** uint8_t change_directory(char *current_path, const char *path) {
 543              		.loc 1 103 0
 544              		.cfi_startproc
 545              		@ args = 0, pretend = 0, frame = 128
 546              		@ frame_needed = 0, uses_anonymous_args = 0
 547              	.LVL45:
 548 0000 30B5     		push	{r4, r5, lr}
 549              	.LCFI15:
 550              		.cfi_def_cfa_offset 12
 551              		.cfi_offset 4, -12
 552              		.cfi_offset 5, -8
 553              		.cfi_offset 14, -4
 554 0002 A1B0     		sub	sp, sp, #132
 555              	.LCFI16:
 556              		.cfi_def_cfa_offset 144
 557 0004 0446     		mov	r4, r0
 558 0006 0D46     		mov	r5, r1
 104:Src/memory_access.c **** 	char new_path[MAX_PATH_LEN]; 
 105:Src/memory_access.c **** 	strcpy(new_path, current_path);
 559              		.loc 1 105 0
 560 0008 0146     		mov	r1, r0
 561              	.LVL46:
 562 000a 6846     		mov	r0, sp
ARM GAS  /tmp/ccfnwc1N.s 			page 13


 563              	.LVL47:
 564 000c FFF7FEFF 		bl	strcpy
 565              	.LVL48:
 106:Src/memory_access.c **** 
 107:Src/memory_access.c ****     if(!get_full_path(new_path, path))
 566              		.loc 1 107 0
 567 0010 2946     		mov	r1, r5
 568 0012 6846     		mov	r0, sp
 569 0014 FFF7FEFF 		bl	get_full_path
 570              	.LVL49:
 571 0018 0346     		mov	r3, r0
 572 001a 10B9     		cbnz	r0, .L58
 573              	.L55:
 108:Src/memory_access.c ****     	return 0;
 109:Src/memory_access.c **** 
 110:Src/memory_access.c ****     if(!directory_exist(new_path)) {
 111:Src/memory_access.c ****     	FRESULT res = f_mkdir(new_path);
 112:Src/memory_access.c ****     	if(res != FR_OK) {
 113:Src/memory_access.c **** 			xprintf("connot make directory: %s\n", new_path);
 114:Src/memory_access.c ****         	return 0;
 115:Src/memory_access.c ****     	}
 116:Src/memory_access.c ****     }
 117:Src/memory_access.c **** 
 118:Src/memory_access.c ****     strcpy(current_path, new_path);
 119:Src/memory_access.c ****     xprintf("directory changed: %s\n", current_path);
 120:Src/memory_access.c ****     return 1;
 121:Src/memory_access.c **** }
 574              		.loc 1 121 0
 575 001c 1846     		mov	r0, r3
 576 001e 21B0     		add	sp, sp, #132
 577              	.LCFI17:
 578              		.cfi_remember_state
 579              		.cfi_def_cfa_offset 12
 580              		@ sp needed
 581 0020 30BD     		pop	{r4, r5, pc}
 582              	.LVL50:
 583              	.L58:
 584              	.LCFI18:
 585              		.cfi_restore_state
 110:Src/memory_access.c ****     	FRESULT res = f_mkdir(new_path);
 586              		.loc 1 110 0
 587 0022 6846     		mov	r0, sp
 588 0024 FFF7FEFF 		bl	directory_exist
 589              	.LVL51:
 590 0028 18B9     		cbnz	r0, .L56
 591              	.LBB9:
 111:Src/memory_access.c ****     	if(res != FR_OK) {
 592              		.loc 1 111 0
 593 002a 6846     		mov	r0, sp
 594 002c FFF7FEFF 		bl	f_mkdir
 595              	.LVL52:
 112:Src/memory_access.c **** 			xprintf("connot make directory: %s\n", new_path);
 596              		.loc 1 112 0
 597 0030 48B9     		cbnz	r0, .L59
 598              	.LVL53:
 599              	.L56:
 600              	.LBE9:
ARM GAS  /tmp/ccfnwc1N.s 			page 14


 118:Src/memory_access.c ****     xprintf("directory changed: %s\n", current_path);
 601              		.loc 1 118 0
 602 0032 6946     		mov	r1, sp
 603 0034 2046     		mov	r0, r4
 604 0036 FFF7FEFF 		bl	strcpy
 605              	.LVL54:
 119:Src/memory_access.c ****     return 1;
 606              		.loc 1 119 0
 607 003a 2146     		mov	r1, r4
 608 003c 0548     		ldr	r0, .L60
 609 003e FFF7FEFF 		bl	xprintf
 610              	.LVL55:
 120:Src/memory_access.c **** }
 611              		.loc 1 120 0
 612 0042 0123     		movs	r3, #1
 613 0044 EAE7     		b	.L55
 614              	.LVL56:
 615              	.L59:
 616              	.LBB11:
 617              	.LBB10:
 113:Src/memory_access.c ****         	return 0;
 618              		.loc 1 113 0
 619 0046 6946     		mov	r1, sp
 620 0048 0348     		ldr	r0, .L60+4
 621              	.LVL57:
 622 004a FFF7FEFF 		bl	xprintf
 623              	.LVL58:
 114:Src/memory_access.c ****     	}
 624              		.loc 1 114 0
 625 004e 0023     		movs	r3, #0
 626 0050 E4E7     		b	.L55
 627              	.L61:
 628 0052 00BF     		.align	2
 629              	.L60:
 630 0054 1C000000 		.word	.LC12
 631 0058 00000000 		.word	.LC11
 632              	.LBE10:
 633              	.LBE11:
 634              		.cfi_endproc
 635              	.LFE148:
 637              		.section	.text.list_directory,"ax",%progbits
 638              		.align	1
 639              		.global	list_directory
 640              		.syntax unified
 641              		.thumb
 642              		.thumb_func
 643              		.fpu fpv5-sp-d16
 645              	list_directory:
 646              	.LFB149:
 122:Src/memory_access.c **** 
 123:Src/memory_access.c **** uint8_t list_directory(const char *current_path, char *buffer, uint16_t buffer_size) {
 647              		.loc 1 123 0
 648              		.cfi_startproc
 649              		@ args = 0, pretend = 0, frame = 200
 650              		@ frame_needed = 0, uses_anonymous_args = 0
 651              	.LVL59:
 652 0000 30B5     		push	{r4, r5, lr}
ARM GAS  /tmp/ccfnwc1N.s 			page 15


 653              	.LCFI19:
 654              		.cfi_def_cfa_offset 12
 655              		.cfi_offset 4, -12
 656              		.cfi_offset 5, -8
 657              		.cfi_offset 14, -4
 658 0002 B3B0     		sub	sp, sp, #204
 659              	.LCFI20:
 660              		.cfi_def_cfa_offset 216
 661 0004 0C46     		mov	r4, r1
 124:Src/memory_access.c **** 	char dir_path[MAX_PATH_LEN]; 
 125:Src/memory_access.c **** 	strcpy(dir_path, current_path);	
 662              		.loc 1 125 0
 663 0006 0146     		mov	r1, r0
 664              	.LVL60:
 665 0008 12A8     		add	r0, sp, #72
 666              	.LVL61:
 667 000a FFF7FEFF 		bl	strcpy
 668              	.LVL62:
 126:Src/memory_access.c **** 
 127:Src/memory_access.c ****     if(!get_final_path(dir_path))
 669              		.loc 1 127 0
 670 000e 12A8     		add	r0, sp, #72
 671 0010 FFF7FEFF 		bl	get_final_path
 672              	.LVL63:
 673 0014 0346     		mov	r3, r0
 674 0016 10B9     		cbnz	r0, .L70
 675              	.L63:
 128:Src/memory_access.c ****     	return 0;
 129:Src/memory_access.c **** 
 130:Src/memory_access.c ****     DIR dir;
 131:Src/memory_access.c **** 	if(f_opendir(&dir, dir_path) != FR_OK) {
 132:Src/memory_access.c **** 		xprintf("cannot open directory: %s\n", dir_path);
 133:Src/memory_access.c **** 		return 0;
 134:Src/memory_access.c **** 	}
 135:Src/memory_access.c **** 
 136:Src/memory_access.c ****     buffer[0] = '\0';
 137:Src/memory_access.c **** 
 138:Src/memory_access.c ****     FILINFO finfo;
 139:Src/memory_access.c **** 	while(1) {
 140:Src/memory_access.c **** 		if(f_readdir(&dir, &finfo) != FR_OK || finfo.fname[0] == '\0')
 141:Src/memory_access.c **** 			break;
 142:Src/memory_access.c **** 
 143:Src/memory_access.c **** 		if(finfo.fattrib & AM_DIR )
 144:Src/memory_access.c **** 			strcat(buffer, "+/");
 145:Src/memory_access.c **** 		else 
 146:Src/memory_access.c **** 			sprintf(buffer + strlen(buffer), "+r,s%lu", finfo.fsize);
 147:Src/memory_access.c **** 		
 148:Src/memory_access.c **** 		strcat(buffer,",\t");
 149:Src/memory_access.c **** 		strcat(buffer, finfo.fname);
 150:Src/memory_access.c **** 		strcat(buffer, "\r\n");
 151:Src/memory_access.c **** 	}
 152:Src/memory_access.c **** 	f_closedir(&dir);
 153:Src/memory_access.c **** 
 154:Src/memory_access.c **** 	xprintf("directory list, success\n");
 155:Src/memory_access.c **** 	return 1;
 156:Src/memory_access.c **** }
 676              		.loc 1 156 0
ARM GAS  /tmp/ccfnwc1N.s 			page 16


 677 0018 1846     		mov	r0, r3
 678 001a 33B0     		add	sp, sp, #204
 679              	.LCFI21:
 680              		.cfi_remember_state
 681              		.cfi_def_cfa_offset 12
 682              		@ sp needed
 683 001c 30BD     		pop	{r4, r5, pc}
 684              	.LVL64:
 685              	.L70:
 686              	.LCFI22:
 687              		.cfi_restore_state
 131:Src/memory_access.c **** 		xprintf("cannot open directory: %s\n", dir_path);
 688              		.loc 1 131 0
 689 001e 12A9     		add	r1, sp, #72
 690 0020 06A8     		add	r0, sp, #24
 691 0022 FFF7FEFF 		bl	f_opendir
 692              	.LVL65:
 693 0026 10B9     		cbnz	r0, .L71
 136:Src/memory_access.c **** 
 694              		.loc 1 136 0
 695 0028 0023     		movs	r3, #0
 696 002a 2370     		strb	r3, [r4]
 697 002c 24E0     		b	.L68
 698              	.L71:
 699              	.LBB12:
 132:Src/memory_access.c **** 		return 0;
 700              		.loc 1 132 0
 701 002e 12A9     		add	r1, sp, #72
 702 0030 2148     		ldr	r0, .L72
 703 0032 FFF7FEFF 		bl	xprintf
 704              	.LVL66:
 133:Src/memory_access.c **** 	}
 705              		.loc 1 133 0
 706 0036 0023     		movs	r3, #0
 707 0038 EEE7     		b	.L63
 708              	.L66:
 709              	.LBE12:
 146:Src/memory_access.c **** 		
 710              		.loc 1 146 0
 711 003a 2046     		mov	r0, r4
 712 003c FFF7FEFF 		bl	strlen
 713              	.LVL67:
 714 0040 009A     		ldr	r2, [sp]
 715 0042 1E49     		ldr	r1, .L72+4
 716 0044 2044     		add	r0, r0, r4
 717 0046 FFF7FEFF 		bl	sprintf
 718              	.LVL68:
 719              	.L67:
 148:Src/memory_access.c **** 		strcat(buffer, finfo.fname);
 720              		.loc 1 148 0
 721 004a 2046     		mov	r0, r4
 722 004c FFF7FEFF 		bl	strlen
 723              	.LVL69:
 724 0050 2218     		adds	r2, r4, r0
 725 0052 1B4B     		ldr	r3, .L72+8
 726 0054 1988     		ldrh	r1, [r3]	@ unaligned
 727 0056 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
ARM GAS  /tmp/ccfnwc1N.s 			page 17


 728 0058 2152     		strh	r1, [r4, r0]	@ unaligned
 729 005a 9370     		strb	r3, [r2, #2]
 149:Src/memory_access.c **** 		strcat(buffer, "\r\n");
 730              		.loc 1 149 0
 731 005c 0DF10901 		add	r1, sp, #9
 732 0060 2046     		mov	r0, r4
 733 0062 FFF7FEFF 		bl	strcat
 734              	.LVL70:
 150:Src/memory_access.c **** 	}
 735              		.loc 1 150 0
 736 0066 2046     		mov	r0, r4
 737 0068 FFF7FEFF 		bl	strlen
 738              	.LVL71:
 739 006c 2218     		adds	r2, r4, r0
 740 006e 154B     		ldr	r3, .L72+12
 741 0070 1988     		ldrh	r1, [r3]	@ unaligned
 742 0072 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 743 0074 2152     		strh	r1, [r4, r0]	@ unaligned
 744 0076 9370     		strb	r3, [r2, #2]
 745              	.L68:
 140:Src/memory_access.c **** 			break;
 746              		.loc 1 140 0
 747 0078 6946     		mov	r1, sp
 748 007a 06A8     		add	r0, sp, #24
 749 007c FFF7FEFF 		bl	f_readdir
 750              	.LVL72:
 751 0080 88B9     		cbnz	r0, .L65
 140:Src/memory_access.c **** 			break;
 752              		.loc 1 140 0 is_stmt 0 discriminator 1
 753 0082 9DF80930 		ldrb	r3, [sp, #9]	@ zero_extendqisi2
 754 0086 73B1     		cbz	r3, .L65
 143:Src/memory_access.c **** 			strcat(buffer, "+/");
 755              		.loc 1 143 0 is_stmt 1
 756 0088 9DF80830 		ldrb	r3, [sp, #8]	@ zero_extendqisi2
 757 008c 13F0100F 		tst	r3, #16
 758 0090 D3D0     		beq	.L66
 144:Src/memory_access.c **** 		else 
 759              		.loc 1 144 0
 760 0092 2046     		mov	r0, r4
 761 0094 FFF7FEFF 		bl	strlen
 762              	.LVL73:
 763 0098 2218     		adds	r2, r4, r0
 764 009a 0B4B     		ldr	r3, .L72+16
 765 009c 1988     		ldrh	r1, [r3]	@ unaligned
 766 009e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 767 00a0 2152     		strh	r1, [r4, r0]	@ unaligned
 768 00a2 9370     		strb	r3, [r2, #2]
 769 00a4 D1E7     		b	.L67
 770              	.L65:
 152:Src/memory_access.c **** 
 771              		.loc 1 152 0
 772 00a6 06A8     		add	r0, sp, #24
 773 00a8 FFF7FEFF 		bl	f_closedir
 774              	.LVL74:
 154:Src/memory_access.c **** 	return 1;
 775              		.loc 1 154 0
 776 00ac 0748     		ldr	r0, .L72+20
ARM GAS  /tmp/ccfnwc1N.s 			page 18


 777 00ae FFF7FEFF 		bl	xprintf
 778              	.LVL75:
 155:Src/memory_access.c **** }
 779              		.loc 1 155 0
 780 00b2 0123     		movs	r3, #1
 781 00b4 B0E7     		b	.L63
 782              	.L73:
 783 00b6 00BF     		.align	2
 784              	.L72:
 785 00b8 00000000 		.word	.LC13
 786 00bc 20000000 		.word	.LC15
 787 00c0 28000000 		.word	.LC16
 788 00c4 2C000000 		.word	.LC17
 789 00c8 1C000000 		.word	.LC14
 790 00cc 30000000 		.word	.LC18
 791              		.cfi_endproc
 792              	.LFE149:
 794              		.section	.text.open_dir,"ax",%progbits
 795              		.align	1
 796              		.global	open_dir
 797              		.syntax unified
 798              		.thumb
 799              		.thumb_func
 800              		.fpu fpv5-sp-d16
 802              	open_dir:
 803              	.LFB150:
 157:Src/memory_access.c **** 
 158:Src/memory_access.c **** uint8_t open_dir(const char *current_path, DIR *dir) {
 804              		.loc 1 158 0
 805              		.cfi_startproc
 806              		@ args = 0, pretend = 0, frame = 128
 807              		@ frame_needed = 0, uses_anonymous_args = 0
 808              	.LVL76:
 809 0000 10B5     		push	{r4, lr}
 810              	.LCFI23:
 811              		.cfi_def_cfa_offset 8
 812              		.cfi_offset 4, -8
 813              		.cfi_offset 14, -4
 814 0002 A0B0     		sub	sp, sp, #128
 815              	.LCFI24:
 816              		.cfi_def_cfa_offset 136
 817 0004 0C46     		mov	r4, r1
 159:Src/memory_access.c **** 	char dir_path[MAX_PATH_LEN]; 
 160:Src/memory_access.c **** 	strcpy(dir_path, current_path);	
 818              		.loc 1 160 0
 819 0006 0146     		mov	r1, r0
 820              	.LVL77:
 821 0008 6846     		mov	r0, sp
 822              	.LVL78:
 823 000a FFF7FEFF 		bl	strcpy
 824              	.LVL79:
 161:Src/memory_access.c **** 
 162:Src/memory_access.c ****     if(!get_final_path(dir_path))
 825              		.loc 1 162 0
 826 000e 6846     		mov	r0, sp
 827 0010 FFF7FEFF 		bl	get_final_path
 828              	.LVL80:
ARM GAS  /tmp/ccfnwc1N.s 			page 19


 829 0014 0346     		mov	r3, r0
 830 0016 10B9     		cbnz	r0, .L78
 831              	.L75:
 163:Src/memory_access.c ****     	return 0;
 164:Src/memory_access.c **** 
 165:Src/memory_access.c **** 	if(f_opendir(dir, dir_path) != FR_OK) {
 166:Src/memory_access.c **** 		xprintf("cannot open directory: %s\n", dir_path);
 167:Src/memory_access.c **** 		return 0;
 168:Src/memory_access.c **** 	}
 169:Src/memory_access.c **** 	return 1;
 170:Src/memory_access.c **** }
 832              		.loc 1 170 0
 833 0018 1846     		mov	r0, r3
 834 001a 20B0     		add	sp, sp, #128
 835              	.LCFI25:
 836              		.cfi_remember_state
 837              		.cfi_def_cfa_offset 8
 838              		@ sp needed
 839 001c 10BD     		pop	{r4, pc}
 840              	.LVL81:
 841              	.L78:
 842              	.LCFI26:
 843              		.cfi_restore_state
 165:Src/memory_access.c **** 		xprintf("cannot open directory: %s\n", dir_path);
 844              		.loc 1 165 0
 845 001e 6946     		mov	r1, sp
 846 0020 2046     		mov	r0, r4
 847 0022 FFF7FEFF 		bl	f_opendir
 848              	.LVL82:
 849 0026 08B9     		cbnz	r0, .L79
 169:Src/memory_access.c **** }
 850              		.loc 1 169 0
 851 0028 0123     		movs	r3, #1
 852 002a F5E7     		b	.L75
 853              	.L79:
 854              	.LBB13:
 166:Src/memory_access.c **** 		return 0;
 855              		.loc 1 166 0
 856 002c 6946     		mov	r1, sp
 857 002e 0248     		ldr	r0, .L80
 858 0030 FFF7FEFF 		bl	xprintf
 859              	.LVL83:
 167:Src/memory_access.c **** 	}
 860              		.loc 1 167 0
 861 0034 0023     		movs	r3, #0
 862 0036 EFE7     		b	.L75
 863              	.L81:
 864              		.align	2
 865              	.L80:
 866 0038 00000000 		.word	.LC13
 867              	.LBE13:
 868              		.cfi_endproc
 869              	.LFE150:
 871              		.section	.text.close_dir,"ax",%progbits
 872              		.align	1
 873              		.global	close_dir
 874              		.syntax unified
ARM GAS  /tmp/ccfnwc1N.s 			page 20


 875              		.thumb
 876              		.thumb_func
 877              		.fpu fpv5-sp-d16
 879              	close_dir:
 880              	.LFB151:
 171:Src/memory_access.c **** 
 172:Src/memory_access.c **** uint8_t close_dir(DIR *dir) {
 881              		.loc 1 172 0
 882              		.cfi_startproc
 883              		@ args = 0, pretend = 0, frame = 0
 884              		@ frame_needed = 0, uses_anonymous_args = 0
 885              	.LVL84:
 886 0000 08B5     		push	{r3, lr}
 887              	.LCFI27:
 888              		.cfi_def_cfa_offset 8
 889              		.cfi_offset 3, -8
 890              		.cfi_offset 14, -4
 173:Src/memory_access.c **** 	f_closedir(dir);
 891              		.loc 1 173 0
 892 0002 FFF7FEFF 		bl	f_closedir
 893              	.LVL85:
 174:Src/memory_access.c **** 	return 1;
 175:Src/memory_access.c **** }
 894              		.loc 1 175 0
 895 0006 0120     		movs	r0, #1
 896 0008 08BD     		pop	{r3, pc}
 897              		.cfi_endproc
 898              	.LFE151:
 900              		.section	.text.list_directory_part,"ax",%progbits
 901              		.align	1
 902              		.global	list_directory_part
 903              		.syntax unified
 904              		.thumb
 905              		.thumb_func
 906              		.fpu fpv5-sp-d16
 908              	list_directory_part:
 909              	.LFB152:
 176:Src/memory_access.c **** 
 177:Src/memory_access.c **** uint8_t list_directory_part(DIR *dir, char *buffer, uint16_t buffer_size) {
 910              		.loc 1 177 0
 911              		.cfi_startproc
 912              		@ args = 0, pretend = 0, frame = 32
 913              		@ frame_needed = 0, uses_anonymous_args = 0
 914              	.LVL86:
 915 0000 30B5     		push	{r4, r5, lr}
 916              	.LCFI28:
 917              		.cfi_def_cfa_offset 12
 918              		.cfi_offset 4, -12
 919              		.cfi_offset 5, -8
 920              		.cfi_offset 14, -4
 921 0002 89B0     		sub	sp, sp, #36
 922              	.LCFI29:
 923              		.cfi_def_cfa_offset 48
 924 0004 0190     		str	r0, [sp, #4]
 925 0006 0C46     		mov	r4, r1
 178:Src/memory_access.c **** 	buffer[0] = '\0';
 926              		.loc 1 178 0
ARM GAS  /tmp/ccfnwc1N.s 			page 21


 927 0008 0023     		movs	r3, #0
 928 000a 0B70     		strb	r3, [r1]
 179:Src/memory_access.c **** 
 180:Src/memory_access.c ****     FILINFO finfo;
 181:Src/memory_access.c **** 	if(f_readdir(&dir, &finfo) != FR_OK || finfo.fname[0] == '\0')
 929              		.loc 1 181 0
 930 000c 02A9     		add	r1, sp, #8
 931              	.LVL87:
 932 000e 01A8     		add	r0, sp, #4
 933              	.LVL88:
 934 0010 FFF7FEFF 		bl	f_readdir
 935              	.LVL89:
 936 0014 A8BB     		cbnz	r0, .L88
 937              		.loc 1 181 0 is_stmt 0 discriminator 1
 938 0016 9DF81130 		ldrb	r3, [sp, #17]	@ zero_extendqisi2
 939 001a ABB3     		cbz	r3, .L89
 182:Src/memory_access.c **** 		return 0;
 183:Src/memory_access.c **** 
 184:Src/memory_access.c **** 	if(finfo.fattrib & AM_DIR )
 940              		.loc 1 184 0 is_stmt 1
 941 001c 9DF81030 		ldrb	r3, [sp, #16]	@ zero_extendqisi2
 942 0020 13F0100F 		tst	r3, #16
 943 0024 24D0     		beq	.L86
 185:Src/memory_access.c **** 		strcat(buffer, "+/");
 944              		.loc 1 185 0
 945 0026 2046     		mov	r0, r4
 946 0028 FFF7FEFF 		bl	strlen
 947              	.LVL90:
 948 002c 2218     		adds	r2, r4, r0
 949 002e 174B     		ldr	r3, .L91
 950 0030 1988     		ldrh	r1, [r3]	@ unaligned
 951 0032 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 952 0034 2152     		strh	r1, [r4, r0]	@ unaligned
 953 0036 9370     		strb	r3, [r2, #2]
 954              	.L87:
 186:Src/memory_access.c **** 	else 
 187:Src/memory_access.c **** 		sprintf(buffer + strlen(buffer), "+r,s%lu", finfo.fsize);
 188:Src/memory_access.c **** 		
 189:Src/memory_access.c **** 	strcat(buffer,",\t");
 955              		.loc 1 189 0
 956 0038 2046     		mov	r0, r4
 957 003a FFF7FEFF 		bl	strlen
 958              	.LVL91:
 959 003e 2218     		adds	r2, r4, r0
 960 0040 134B     		ldr	r3, .L91+4
 961 0042 1988     		ldrh	r1, [r3]	@ unaligned
 962 0044 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 963 0046 2152     		strh	r1, [r4, r0]	@ unaligned
 964 0048 9370     		strb	r3, [r2, #2]
 190:Src/memory_access.c **** 	strcat(buffer, finfo.fname);
 965              		.loc 1 190 0
 966 004a 0DF11101 		add	r1, sp, #17
 967 004e 2046     		mov	r0, r4
 968 0050 FFF7FEFF 		bl	strcat
 969              	.LVL92:
 191:Src/memory_access.c **** 	strcat(buffer, "\r\n");	
 970              		.loc 1 191 0
ARM GAS  /tmp/ccfnwc1N.s 			page 22


 971 0054 2046     		mov	r0, r4
 972 0056 FFF7FEFF 		bl	strlen
 973              	.LVL93:
 974 005a 2218     		adds	r2, r4, r0
 975 005c 0D4B     		ldr	r3, .L91+8
 976 005e 1988     		ldrh	r1, [r3]	@ unaligned
 977 0060 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 978 0062 2152     		strh	r1, [r4, r0]	@ unaligned
 979 0064 9370     		strb	r3, [r2, #2]
 192:Src/memory_access.c **** 
 193:Src/memory_access.c **** 	printf("directory list, success\n");
 980              		.loc 1 193 0
 981 0066 0C48     		ldr	r0, .L91+12
 982 0068 FFF7FEFF 		bl	puts
 983              	.LVL94:
 194:Src/memory_access.c **** 	return 1;
 984              		.loc 1 194 0
 985 006c 0120     		movs	r0, #1
 986 006e 09E0     		b	.L85
 987              	.L86:
 187:Src/memory_access.c **** 		
 988              		.loc 1 187 0
 989 0070 2046     		mov	r0, r4
 990 0072 FFF7FEFF 		bl	strlen
 991              	.LVL95:
 992 0076 029A     		ldr	r2, [sp, #8]
 993 0078 0849     		ldr	r1, .L91+16
 994 007a 2044     		add	r0, r0, r4
 995 007c FFF7FEFF 		bl	sprintf
 996              	.LVL96:
 997 0080 DAE7     		b	.L87
 998              	.L88:
 182:Src/memory_access.c **** 
 999              		.loc 1 182 0
 1000 0082 0020     		movs	r0, #0
 1001              	.L85:
 195:Src/memory_access.c **** }
 1002              		.loc 1 195 0
 1003 0084 09B0     		add	sp, sp, #36
 1004              	.LCFI30:
 1005              		.cfi_remember_state
 1006              		.cfi_def_cfa_offset 12
 1007              		@ sp needed
 1008 0086 30BD     		pop	{r4, r5, pc}
 1009              	.LVL97:
 1010              	.L89:
 1011              	.LCFI31:
 1012              		.cfi_restore_state
 182:Src/memory_access.c **** 
 1013              		.loc 1 182 0
 1014 0088 0020     		movs	r0, #0
 1015 008a FBE7     		b	.L85
 1016              	.L92:
 1017              		.align	2
 1018              	.L91:
 1019 008c 1C000000 		.word	.LC14
 1020 0090 28000000 		.word	.LC16
ARM GAS  /tmp/ccfnwc1N.s 			page 23


 1021 0094 2C000000 		.word	.LC17
 1022 0098 00000000 		.word	.LC19
 1023 009c 20000000 		.word	.LC15
 1024              		.cfi_endproc
 1025              	.LFE152:
 1027              		.section	.text.open_file,"ax",%progbits
 1028              		.align	1
 1029              		.global	open_file
 1030              		.syntax unified
 1031              		.thumb
 1032              		.thumb_func
 1033              		.fpu fpv5-sp-d16
 1035              	open_file:
 1036              	.LFB153:
 196:Src/memory_access.c **** 
 197:Src/memory_access.c **** uint8_t open_file(const char *current_path, const char *filename, FIL *file) {
 1037              		.loc 1 197 0
 1038              		.cfi_startproc
 1039              		@ args = 0, pretend = 0, frame = 128
 1040              		@ frame_needed = 0, uses_anonymous_args = 0
 1041              	.LVL98:
 1042 0000 30B5     		push	{r4, r5, lr}
 1043              	.LCFI32:
 1044              		.cfi_def_cfa_offset 12
 1045              		.cfi_offset 4, -12
 1046              		.cfi_offset 5, -8
 1047              		.cfi_offset 14, -4
 1048 0002 A1B0     		sub	sp, sp, #132
 1049              	.LCFI33:
 1050              		.cfi_def_cfa_offset 144
 1051 0004 0C46     		mov	r4, r1
 1052 0006 1546     		mov	r5, r2
 198:Src/memory_access.c **** 	char filepath[MAX_PATH_LEN]; 
 199:Src/memory_access.c **** 	strcpy(filepath, current_path);	
 1053              		.loc 1 199 0
 1054 0008 0146     		mov	r1, r0
 1055              	.LVL99:
 1056 000a 6846     		mov	r0, sp
 1057              	.LVL100:
 1058 000c FFF7FEFF 		bl	strcpy
 1059              	.LVL101:
 200:Src/memory_access.c **** 
 201:Src/memory_access.c ****     if(!get_final_path_2(filepath, filename))
 1060              		.loc 1 201 0
 1061 0010 2146     		mov	r1, r4
 1062 0012 6846     		mov	r0, sp
 1063 0014 FFF7FEFF 		bl	get_final_path_2
 1064              	.LVL102:
 1065 0018 0346     		mov	r3, r0
 1066 001a 10B9     		cbnz	r0, .L97
 1067              	.L94:
 202:Src/memory_access.c ****     	return 0;    
 203:Src/memory_access.c **** 
 204:Src/memory_access.c ****     if(f_open(file, filepath, FA_OPEN_EXISTING | FA_READ) != FR_OK ) {
 205:Src/memory_access.c **** 		xprintf("cannot open file %s\n", filepath);		
 206:Src/memory_access.c **** 		return 0;
 207:Src/memory_access.c **** 	}
ARM GAS  /tmp/ccfnwc1N.s 			page 24


 208:Src/memory_access.c ****     return 1;
 209:Src/memory_access.c **** }
 1068              		.loc 1 209 0
 1069 001c 1846     		mov	r0, r3
 1070 001e 21B0     		add	sp, sp, #132
 1071              	.LCFI34:
 1072              		.cfi_remember_state
 1073              		.cfi_def_cfa_offset 12
 1074              		@ sp needed
 1075 0020 30BD     		pop	{r4, r5, pc}
 1076              	.LVL103:
 1077              	.L97:
 1078              	.LCFI35:
 1079              		.cfi_restore_state
 204:Src/memory_access.c **** 		xprintf("cannot open file %s\n", filepath);		
 1080              		.loc 1 204 0
 1081 0022 0122     		movs	r2, #1
 1082 0024 6946     		mov	r1, sp
 1083 0026 2846     		mov	r0, r5
 1084 0028 FFF7FEFF 		bl	f_open
 1085              	.LVL104:
 1086 002c 08B9     		cbnz	r0, .L98
 208:Src/memory_access.c **** }
 1087              		.loc 1 208 0
 1088 002e 0123     		movs	r3, #1
 1089 0030 F4E7     		b	.L94
 1090              	.L98:
 1091              	.LBB14:
 205:Src/memory_access.c **** 		return 0;
 1092              		.loc 1 205 0
 1093 0032 6946     		mov	r1, sp
 1094 0034 0248     		ldr	r0, .L99
 1095 0036 FFF7FEFF 		bl	xprintf
 1096              	.LVL105:
 206:Src/memory_access.c **** 	}
 1097              		.loc 1 206 0
 1098 003a 0023     		movs	r3, #0
 1099 003c EEE7     		b	.L94
 1100              	.L100:
 1101 003e 00BF     		.align	2
 1102              	.L99:
 1103 0040 00000000 		.word	.LC20
 1104              	.LBE14:
 1105              		.cfi_endproc
 1106              	.LFE153:
 1108              		.section	.text.create_file,"ax",%progbits
 1109              		.align	1
 1110              		.global	create_file
 1111              		.syntax unified
 1112              		.thumb
 1113              		.thumb_func
 1114              		.fpu fpv5-sp-d16
 1116              	create_file:
 1117              	.LFB154:
 210:Src/memory_access.c **** 
 211:Src/memory_access.c **** uint8_t create_file(const char *current_path, const char *filename, FIL *file) {
 1118              		.loc 1 211 0
ARM GAS  /tmp/ccfnwc1N.s 			page 25


 1119              		.cfi_startproc
 1120              		@ args = 0, pretend = 0, frame = 128
 1121              		@ frame_needed = 0, uses_anonymous_args = 0
 1122              	.LVL106:
 1123 0000 30B5     		push	{r4, r5, lr}
 1124              	.LCFI36:
 1125              		.cfi_def_cfa_offset 12
 1126              		.cfi_offset 4, -12
 1127              		.cfi_offset 5, -8
 1128              		.cfi_offset 14, -4
 1129 0002 A1B0     		sub	sp, sp, #132
 1130              	.LCFI37:
 1131              		.cfi_def_cfa_offset 144
 1132 0004 0C46     		mov	r4, r1
 1133 0006 1546     		mov	r5, r2
 212:Src/memory_access.c ****     char filepath[MAX_PATH_LEN]; 
 213:Src/memory_access.c **** 	strcpy(filepath, current_path);	
 1134              		.loc 1 213 0
 1135 0008 0146     		mov	r1, r0
 1136              	.LVL107:
 1137 000a 6846     		mov	r0, sp
 1138              	.LVL108:
 1139 000c FFF7FEFF 		bl	strcpy
 1140              	.LVL109:
 214:Src/memory_access.c **** 
 215:Src/memory_access.c ****     if(!get_final_path_2(filepath, filename))
 1141              		.loc 1 215 0
 1142 0010 2146     		mov	r1, r4
 1143 0012 6846     		mov	r0, sp
 1144 0014 FFF7FEFF 		bl	get_final_path_2
 1145              	.LVL110:
 1146 0018 0346     		mov	r3, r0
 1147 001a 10B9     		cbnz	r0, .L105
 1148              	.L102:
 216:Src/memory_access.c ****     	return 0;    
 217:Src/memory_access.c **** 
 218:Src/memory_access.c **** 	if(f_open(file, filepath, FA_CREATE_NEW | FA_WRITE) != FR_OK ) {
 219:Src/memory_access.c **** 		xprintf("cannot create file %s\n", filepath);		
 220:Src/memory_access.c **** 		return 0;
 221:Src/memory_access.c **** 	}
 222:Src/memory_access.c **** 	return 1;
 223:Src/memory_access.c **** }
 1149              		.loc 1 223 0
 1150 001c 1846     		mov	r0, r3
 1151 001e 21B0     		add	sp, sp, #132
 1152              	.LCFI38:
 1153              		.cfi_remember_state
 1154              		.cfi_def_cfa_offset 12
 1155              		@ sp needed
 1156 0020 30BD     		pop	{r4, r5, pc}
 1157              	.LVL111:
 1158              	.L105:
 1159              	.LCFI39:
 1160              		.cfi_restore_state
 218:Src/memory_access.c **** 		xprintf("cannot create file %s\n", filepath);		
 1161              		.loc 1 218 0
 1162 0022 0622     		movs	r2, #6
ARM GAS  /tmp/ccfnwc1N.s 			page 26


 1163 0024 6946     		mov	r1, sp
 1164 0026 2846     		mov	r0, r5
 1165 0028 FFF7FEFF 		bl	f_open
 1166              	.LVL112:
 1167 002c 08B9     		cbnz	r0, .L106
 222:Src/memory_access.c **** }
 1168              		.loc 1 222 0
 1169 002e 0123     		movs	r3, #1
 1170 0030 F4E7     		b	.L102
 1171              	.L106:
 1172              	.LBB15:
 219:Src/memory_access.c **** 		return 0;
 1173              		.loc 1 219 0
 1174 0032 6946     		mov	r1, sp
 1175 0034 0248     		ldr	r0, .L107
 1176 0036 FFF7FEFF 		bl	xprintf
 1177              	.LVL113:
 220:Src/memory_access.c **** 	}
 1178              		.loc 1 220 0
 1179 003a 0023     		movs	r3, #0
 1180 003c EEE7     		b	.L102
 1181              	.L108:
 1182 003e 00BF     		.align	2
 1183              	.L107:
 1184 0040 00000000 		.word	.LC21
 1185              	.LBE15:
 1186              		.cfi_endproc
 1187              	.LFE154:
 1189              		.section	.text.close_file,"ax",%progbits
 1190              		.align	1
 1191              		.global	close_file
 1192              		.syntax unified
 1193              		.thumb
 1194              		.thumb_func
 1195              		.fpu fpv5-sp-d16
 1197              	close_file:
 1198              	.LFB155:
 224:Src/memory_access.c **** 
 225:Src/memory_access.c **** void close_file(FIL *file) {
 1199              		.loc 1 225 0
 1200              		.cfi_startproc
 1201              		@ args = 0, pretend = 0, frame = 0
 1202              		@ frame_needed = 0, uses_anonymous_args = 0
 1203              	.LVL114:
 1204 0000 08B5     		push	{r3, lr}
 1205              	.LCFI40:
 1206              		.cfi_def_cfa_offset 8
 1207              		.cfi_offset 3, -8
 1208              		.cfi_offset 14, -4
 226:Src/memory_access.c **** 	f_close(file);	
 1209              		.loc 1 226 0
 1210 0002 FFF7FEFF 		bl	f_close
 1211              	.LVL115:
 227:Src/memory_access.c **** }
 1212              		.loc 1 227 0
 1213 0006 08BD     		pop	{r3, pc}
 1214              		.cfi_endproc
ARM GAS  /tmp/ccfnwc1N.s 			page 27


 1215              	.LFE155:
 1217              		.section	.text.delete_file,"ax",%progbits
 1218              		.align	1
 1219              		.global	delete_file
 1220              		.syntax unified
 1221              		.thumb
 1222              		.thumb_func
 1223              		.fpu fpv5-sp-d16
 1225              	delete_file:
 1226              	.LFB156:
 228:Src/memory_access.c **** 
 229:Src/memory_access.c **** int8_t delete_file(const char *current_path, const char *filename) {
 1227              		.loc 1 229 0
 1228              		.cfi_startproc
 1229              		@ args = 0, pretend = 0, frame = 128
 1230              		@ frame_needed = 0, uses_anonymous_args = 0
 1231              	.LVL116:
 1232 0000 10B5     		push	{r4, lr}
 1233              	.LCFI41:
 1234              		.cfi_def_cfa_offset 8
 1235              		.cfi_offset 4, -8
 1236              		.cfi_offset 14, -4
 1237 0002 A0B0     		sub	sp, sp, #128
 1238              	.LCFI42:
 1239              		.cfi_def_cfa_offset 136
 1240 0004 0C46     		mov	r4, r1
 230:Src/memory_access.c ****     char filepath[MAX_PATH_LEN]; 
 231:Src/memory_access.c **** 	strcpy(filepath, current_path);	
 1241              		.loc 1 231 0
 1242 0006 0146     		mov	r1, r0
 1243              	.LVL117:
 1244 0008 6846     		mov	r0, sp
 1245              	.LVL118:
 1246 000a FFF7FEFF 		bl	strcpy
 1247              	.LVL119:
 232:Src/memory_access.c **** 
 233:Src/memory_access.c ****     if(!get_final_path_2(filepath, filename))
 1248              		.loc 1 233 0
 1249 000e 2146     		mov	r1, r4
 1250 0010 6846     		mov	r0, sp
 1251 0012 FFF7FEFF 		bl	get_final_path_2
 1252              	.LVL120:
 1253 0016 10B9     		cbnz	r0, .L116
 234:Src/memory_access.c ****     	return 0;    
 1254              		.loc 1 234 0
 1255 0018 0020     		movs	r0, #0
 1256              	.L112:
 235:Src/memory_access.c **** 
 236:Src/memory_access.c **** 	if(f_unlink(filepath) != FR_OK) {
 237:Src/memory_access.c **** 		xprintf("cannot delete file: %s\n", filepath);
 238:Src/memory_access.c **** 		return 0;
 239:Src/memory_access.c **** 	}
 240:Src/memory_access.c **** 	
 241:Src/memory_access.c **** 	xprintf("deleted file: %s\n", filepath);
 242:Src/memory_access.c **** 	return 1;
 243:Src/memory_access.c **** }
 1257              		.loc 1 243 0
ARM GAS  /tmp/ccfnwc1N.s 			page 28


 1258 001a 20B0     		add	sp, sp, #128
 1259              	.LCFI43:
 1260              		.cfi_remember_state
 1261              		.cfi_def_cfa_offset 8
 1262              		@ sp needed
 1263 001c 10BD     		pop	{r4, pc}
 1264              	.LVL121:
 1265              	.L116:
 1266              	.LCFI44:
 1267              		.cfi_restore_state
 236:Src/memory_access.c **** 		xprintf("cannot delete file: %s\n", filepath);
 1268              		.loc 1 236 0
 1269 001e 6846     		mov	r0, sp
 1270 0020 FFF7FEFF 		bl	f_unlink
 1271              	.LVL122:
 1272 0024 28B9     		cbnz	r0, .L117
 241:Src/memory_access.c **** 	return 1;
 1273              		.loc 1 241 0
 1274 0026 6946     		mov	r1, sp
 1275 0028 0548     		ldr	r0, .L118
 1276 002a FFF7FEFF 		bl	xprintf
 1277              	.LVL123:
 242:Src/memory_access.c **** }
 1278              		.loc 1 242 0
 1279 002e 0120     		movs	r0, #1
 1280 0030 F3E7     		b	.L112
 1281              	.L117:
 1282              	.LBB16:
 237:Src/memory_access.c **** 		return 0;
 1283              		.loc 1 237 0
 1284 0032 6946     		mov	r1, sp
 1285 0034 0348     		ldr	r0, .L118+4
 1286 0036 FFF7FEFF 		bl	xprintf
 1287              	.LVL124:
 238:Src/memory_access.c **** 	}
 1288              		.loc 1 238 0
 1289 003a 0020     		movs	r0, #0
 1290 003c EDE7     		b	.L112
 1291              	.L119:
 1292 003e 00BF     		.align	2
 1293              	.L118:
 1294 0040 18000000 		.word	.LC23
 1295 0044 00000000 		.word	.LC22
 1296              	.LBE16:
 1297              		.cfi_endproc
 1298              	.LFE156:
 1300              		.section	.text.create_dir,"ax",%progbits
 1301              		.align	1
 1302              		.global	create_dir
 1303              		.syntax unified
 1304              		.thumb
 1305              		.thumb_func
 1306              		.fpu fpv5-sp-d16
 1308              	create_dir:
 1309              	.LFB157:
 244:Src/memory_access.c **** 
 245:Src/memory_access.c **** int8_t create_dir(const char *current_path, const char *dir_name) {
ARM GAS  /tmp/ccfnwc1N.s 			page 29


 1310              		.loc 1 245 0
 1311              		.cfi_startproc
 1312              		@ args = 0, pretend = 0, frame = 128
 1313              		@ frame_needed = 0, uses_anonymous_args = 0
 1314              	.LVL125:
 1315 0000 10B5     		push	{r4, lr}
 1316              	.LCFI45:
 1317              		.cfi_def_cfa_offset 8
 1318              		.cfi_offset 4, -8
 1319              		.cfi_offset 14, -4
 1320 0002 A0B0     		sub	sp, sp, #128
 1321              	.LCFI46:
 1322              		.cfi_def_cfa_offset 136
 1323 0004 0C46     		mov	r4, r1
 246:Src/memory_access.c **** 	char dir_path[MAX_PATH_LEN]; 
 247:Src/memory_access.c **** 	strcpy(dir_path, current_path);	
 1324              		.loc 1 247 0
 1325 0006 0146     		mov	r1, r0
 1326              	.LVL126:
 1327 0008 6846     		mov	r0, sp
 1328              	.LVL127:
 1329 000a FFF7FEFF 		bl	strcpy
 1330              	.LVL128:
 248:Src/memory_access.c **** 
 249:Src/memory_access.c ****     if(!get_final_path_2(dir_path, dir_name))
 1331              		.loc 1 249 0
 1332 000e 2146     		mov	r1, r4
 1333 0010 6846     		mov	r0, sp
 1334 0012 FFF7FEFF 		bl	get_final_path_2
 1335              	.LVL129:
 1336 0016 10B9     		cbnz	r0, .L125
 250:Src/memory_access.c ****     	return 0;
 1337              		.loc 1 250 0
 1338 0018 0020     		movs	r0, #0
 1339              	.L121:
 251:Src/memory_access.c ****   
 252:Src/memory_access.c ****     FRESULT res = f_mkdir(dir_path);
 253:Src/memory_access.c ****     if(res != FR_OK) {
 254:Src/memory_access.c **** 		xprintf("connot make directory: %s\n", dir_path);
 255:Src/memory_access.c ****         return 0;
 256:Src/memory_access.c ****     }
 257:Src/memory_access.c ****     return 1;
 258:Src/memory_access.c **** }
 1340              		.loc 1 258 0
 1341 001a 20B0     		add	sp, sp, #128
 1342              	.LCFI47:
 1343              		.cfi_remember_state
 1344              		.cfi_def_cfa_offset 8
 1345              		@ sp needed
 1346 001c 10BD     		pop	{r4, pc}
 1347              	.LVL130:
 1348              	.L125:
 1349              	.LCFI48:
 1350              		.cfi_restore_state
 252:Src/memory_access.c ****     if(res != FR_OK) {
 1351              		.loc 1 252 0
 1352 001e 6846     		mov	r0, sp
ARM GAS  /tmp/ccfnwc1N.s 			page 30


 1353 0020 FFF7FEFF 		bl	f_mkdir
 1354              	.LVL131:
 253:Src/memory_access.c **** 		xprintf("connot make directory: %s\n", dir_path);
 1355              		.loc 1 253 0
 1356 0024 08B9     		cbnz	r0, .L126
 257:Src/memory_access.c **** }
 1357              		.loc 1 257 0
 1358 0026 0120     		movs	r0, #1
 1359              	.LVL132:
 1360 0028 F7E7     		b	.L121
 1361              	.LVL133:
 1362              	.L126:
 1363              	.LBB17:
 254:Src/memory_access.c ****         return 0;
 1364              		.loc 1 254 0
 1365 002a 6946     		mov	r1, sp
 1366 002c 0248     		ldr	r0, .L127
 1367              	.LVL134:
 1368 002e FFF7FEFF 		bl	xprintf
 1369              	.LVL135:
 255:Src/memory_access.c ****     }
 1370              		.loc 1 255 0
 1371 0032 0020     		movs	r0, #0
 1372 0034 F1E7     		b	.L121
 1373              	.L128:
 1374 0036 00BF     		.align	2
 1375              	.L127:
 1376 0038 00000000 		.word	.LC11
 1377              	.LBE17:
 1378              		.cfi_endproc
 1379              	.LFE157:
 1381              		.section	.text.write_to_file,"ax",%progbits
 1382              		.align	1
 1383              		.global	write_to_file
 1384              		.syntax unified
 1385              		.thumb
 1386              		.thumb_func
 1387              		.fpu fpv5-sp-d16
 1389              	write_to_file:
 1390              	.LFB158:
 259:Src/memory_access.c **** 
 260:Src/memory_access.c **** unsigned int write_to_file(FIL *file, char *buf, uint16_t size) {
 1391              		.loc 1 260 0
 1392              		.cfi_startproc
 1393              		@ args = 0, pretend = 0, frame = 8
 1394              		@ frame_needed = 0, uses_anonymous_args = 0
 1395              	.LVL136:
 1396 0000 00B5     		push	{lr}
 1397              	.LCFI49:
 1398              		.cfi_def_cfa_offset 4
 1399              		.cfi_offset 14, -4
 1400 0002 83B0     		sub	sp, sp, #12
 1401              	.LCFI50:
 1402              		.cfi_def_cfa_offset 16
 261:Src/memory_access.c **** 	unsigned int bw;
 262:Src/memory_access.c **** 	if(f_write(file, buf, size, &bw) != FR_OK) {
 1403              		.loc 1 262 0
ARM GAS  /tmp/ccfnwc1N.s 			page 31


 1404 0004 01AB     		add	r3, sp, #4
 1405 0006 FFF7FEFF 		bl	f_write
 1406              	.LVL137:
 1407 000a 18B9     		cbnz	r0, .L133
 263:Src/memory_access.c **** 		xprintf("write to file error\n");
 264:Src/memory_access.c **** 		return -1;
 265:Src/memory_access.c **** 	}
 266:Src/memory_access.c **** 	return bw;
 1408              		.loc 1 266 0
 1409 000c 0198     		ldr	r0, [sp, #4]
 1410              	.L129:
 267:Src/memory_access.c **** }
 1411              		.loc 1 267 0
 1412 000e 03B0     		add	sp, sp, #12
 1413              	.LCFI51:
 1414              		.cfi_remember_state
 1415              		.cfi_def_cfa_offset 4
 1416              		@ sp needed
 1417 0010 5DF804FB 		ldr	pc, [sp], #4
 1418              	.L133:
 1419              	.LCFI52:
 1420              		.cfi_restore_state
 1421              	.LBB18:
 263:Src/memory_access.c **** 		xprintf("write to file error\n");
 1422              		.loc 1 263 0
 1423 0014 0248     		ldr	r0, .L134
 1424 0016 FFF7FEFF 		bl	xprintf
 1425              	.LVL138:
 264:Src/memory_access.c **** 	}
 1426              		.loc 1 264 0
 1427 001a 4FF0FF30 		mov	r0, #-1
 1428 001e F6E7     		b	.L129
 1429              	.L135:
 1430              		.align	2
 1431              	.L134:
 1432 0020 00000000 		.word	.LC24
 1433              	.LBE18:
 1434              		.cfi_endproc
 1435              	.LFE158:
 1437              		.section	.text.read_file,"ax",%progbits
 1438              		.align	1
 1439              		.global	read_file
 1440              		.syntax unified
 1441              		.thumb
 1442              		.thumb_func
 1443              		.fpu fpv5-sp-d16
 1445              	read_file:
 1446              	.LFB159:
 268:Src/memory_access.c **** 
 269:Src/memory_access.c **** unsigned int read_file(FIL *file, char *buf, uint16_t size) {
 1447              		.loc 1 269 0
 1448              		.cfi_startproc
 1449              		@ args = 0, pretend = 0, frame = 8
 1450              		@ frame_needed = 0, uses_anonymous_args = 0
 1451              	.LVL139:
 1452 0000 00B5     		push	{lr}
 1453              	.LCFI53:
ARM GAS  /tmp/ccfnwc1N.s 			page 32


 1454              		.cfi_def_cfa_offset 4
 1455              		.cfi_offset 14, -4
 1456 0002 83B0     		sub	sp, sp, #12
 1457              	.LCFI54:
 1458              		.cfi_def_cfa_offset 16
 270:Src/memory_access.c **** 	unsigned int br;
 271:Src/memory_access.c **** 	if(f_read(file, buf, size, &br) != FR_OK) {
 1459              		.loc 1 271 0
 1460 0004 01AB     		add	r3, sp, #4
 1461 0006 FFF7FEFF 		bl	f_read
 1462              	.LVL140:
 1463 000a 18B9     		cbnz	r0, .L140
 272:Src/memory_access.c **** 		xprintf("read file error\n");
 273:Src/memory_access.c **** 		return -1;
 274:Src/memory_access.c **** 	}
 275:Src/memory_access.c **** 	return br;
 1464              		.loc 1 275 0
 1465 000c 0198     		ldr	r0, [sp, #4]
 1466              	.L136:
 276:Src/memory_access.c **** }
 1467              		.loc 1 276 0
 1468 000e 03B0     		add	sp, sp, #12
 1469              	.LCFI55:
 1470              		.cfi_remember_state
 1471              		.cfi_def_cfa_offset 4
 1472              		@ sp needed
 1473 0010 5DF804FB 		ldr	pc, [sp], #4
 1474              	.L140:
 1475              	.LCFI56:
 1476              		.cfi_restore_state
 1477              	.LBB19:
 272:Src/memory_access.c **** 		xprintf("read file error\n");
 1478              		.loc 1 272 0
 1479 0014 0248     		ldr	r0, .L141
 1480 0016 FFF7FEFF 		bl	xprintf
 1481              	.LVL141:
 273:Src/memory_access.c **** 	}
 1482              		.loc 1 273 0
 1483 001a 4FF0FF30 		mov	r0, #-1
 1484 001e F6E7     		b	.L136
 1485              	.L142:
 1486              		.align	2
 1487              	.L141:
 1488 0020 00000000 		.word	.LC25
 1489              	.LBE19:
 1490              		.cfi_endproc
 1491              	.LFE159:
 1493              		.section	.text.USB_Process,"ax",%progbits
 1494              		.align	1
 1495              		.global	USB_Process
 1496              		.syntax unified
 1497              		.thumb
 1498              		.thumb_func
 1499              		.fpu fpv5-sp-d16
 1501              	USB_Process:
 1502              	.LFB160:
 277:Src/memory_access.c **** 
ARM GAS  /tmp/ccfnwc1N.s 			page 33


 278:Src/memory_access.c **** void USB_Process(ApplicationTypeDef Appli_state) {
 1503              		.loc 1 278 0
 1504              		.cfi_startproc
 1505              		@ args = 0, pretend = 0, frame = 0
 1506              		@ frame_needed = 0, uses_anonymous_args = 0
 1507              	.LVL142:
 1508 0000 10B5     		push	{r4, lr}
 1509              	.LCFI57:
 1510              		.cfi_def_cfa_offset 8
 1511              		.cfi_offset 4, -8
 1512              		.cfi_offset 14, -4
 1513 0002 0446     		mov	r4, r0
 279:Src/memory_access.c **** 	 USBH_Process(&hUsbHostFS);
 1514              		.loc 1 279 0
 1515 0004 0E48     		ldr	r0, .L152
 1516              	.LVL143:
 1517 0006 FFF7FEFF 		bl	USBH_Process
 1518              	.LVL144:
 280:Src/memory_access.c **** 	 
 281:Src/memory_access.c **** 	 switch(Appli_state) {
 1519              		.loc 1 281 0
 1520 000a 022C     		cmp	r4, #2
 1521 000c 0BD0     		beq	.L145
 1522 000e 032C     		cmp	r4, #3
 1523 0010 0FD0     		beq	.L146
 1524 0012 012C     		cmp	r4, #1
 1525 0014 03D0     		beq	.L151
 1526              	.LBB20:
 282:Src/memory_access.c **** 		 case APPLICATION_START:
 283:Src/memory_access.c **** 			 xprintf("Device connected.\n");
 284:Src/memory_access.c **** 			 break;
 285:Src/memory_access.c **** 		 case APPLICATION_READY:
 286:Src/memory_access.c **** 			 mount_usb();
 287:Src/memory_access.c **** 			 xprintf("Device ready.\n");
 288:Src/memory_access.c **** 			 break;
 289:Src/memory_access.c **** 		 case APPLICATION_DISCONNECT:
 290:Src/memory_access.c **** 			 unmount_usb();
 291:Src/memory_access.c **** 			 xprintf("Device disconnected.\n");
 292:Src/memory_access.c **** 			 break;
 293:Src/memory_access.c **** 		 default:
 294:Src/memory_access.c **** 			xprintf("In default. \n");
 1527              		.loc 1 294 0
 1528 0016 0B48     		ldr	r0, .L152+4
 1529 0018 FFF7FEFF 		bl	xprintf
 1530              	.LVL145:
 1531              	.LBE20:
 295:Src/memory_access.c **** 		 	break;
 296:Src/memory_access.c **** 	}
 297:Src/memory_access.c **** }
 1532              		.loc 1 297 0
 1533 001c 02E0     		b	.L143
 1534              	.L151:
 1535              	.LBB21:
 283:Src/memory_access.c **** 			 break;
 1536              		.loc 1 283 0
 1537 001e 0A48     		ldr	r0, .L152+8
 1538 0020 FFF7FEFF 		bl	xprintf
ARM GAS  /tmp/ccfnwc1N.s 			page 34


 1539              	.LVL146:
 1540              	.L143:
 1541              	.LBE21:
 1542              		.loc 1 297 0
 1543 0024 10BD     		pop	{r4, pc}
 1544              	.L145:
 1545              	.LBB22:
 286:Src/memory_access.c **** 			 xprintf("Device ready.\n");
 1546              		.loc 1 286 0
 1547 0026 FFF7FEFF 		bl	mount_usb
 1548              	.LVL147:
 287:Src/memory_access.c **** 			 break;
 1549              		.loc 1 287 0
 1550 002a 0848     		ldr	r0, .L152+12
 1551 002c FFF7FEFF 		bl	xprintf
 1552              	.LVL148:
 288:Src/memory_access.c **** 		 case APPLICATION_DISCONNECT:
 1553              		.loc 1 288 0
 1554 0030 F8E7     		b	.L143
 1555              	.L146:
 290:Src/memory_access.c **** 			 xprintf("Device disconnected.\n");
 1556              		.loc 1 290 0
 1557 0032 FFF7FEFF 		bl	unmount_usb
 1558              	.LVL149:
 291:Src/memory_access.c **** 			 break;
 1559              		.loc 1 291 0
 1560 0036 0648     		ldr	r0, .L152+16
 1561 0038 FFF7FEFF 		bl	xprintf
 1562              	.LVL150:
 292:Src/memory_access.c **** 		 default:
 1563              		.loc 1 292 0
 1564 003c F2E7     		b	.L143
 1565              	.L153:
 1566 003e 00BF     		.align	2
 1567              	.L152:
 1568 0040 00000000 		.word	hUsbHostFS
 1569 0044 3C000000 		.word	.LC29
 1570 0048 00000000 		.word	.LC26
 1571 004c 14000000 		.word	.LC27
 1572 0050 24000000 		.word	.LC28
 1573              	.LBE22:
 1574              		.cfi_endproc
 1575              	.LFE160:
 1577              		.comm	fs,564,4
 1578              		.section	.rodata.USB_Process.str1.4,"aMS",%progbits,1
 1579              		.align	2
 1580              	.LC26:
 1581 0000 44657669 		.ascii	"Device connected.\012\000"
 1581      63652063 
 1581      6F6E6E65 
 1581      63746564 
 1581      2E0A00
 1582 0013 00       		.space	1
 1583              	.LC27:
 1584 0014 44657669 		.ascii	"Device ready.\012\000"
 1584      63652072 
 1584      65616479 
ARM GAS  /tmp/ccfnwc1N.s 			page 35


 1584      2E0A00
 1585 0023 00       		.space	1
 1586              	.LC28:
 1587 0024 44657669 		.ascii	"Device disconnected.\012\000"
 1587      63652064 
 1587      6973636F 
 1587      6E6E6563 
 1587      7465642E 
 1588 003a 0000     		.space	2
 1589              	.LC29:
 1590 003c 496E2064 		.ascii	"In default. \012\000"
 1590      65666175 
 1590      6C742E20 
 1590      0A00
 1591              		.section	.rodata.change_directory.str1.4,"aMS",%progbits,1
 1592              		.align	2
 1593              	.LC11:
 1594 0000 636F6E6E 		.ascii	"connot make directory: %s\012\000"
 1594      6F74206D 
 1594      616B6520 
 1594      64697265 
 1594      63746F72 
 1595 001b 00       		.space	1
 1596              	.LC12:
 1597 001c 64697265 		.ascii	"directory changed: %s\012\000"
 1597      63746F72 
 1597      79206368 
 1597      616E6765 
 1597      643A2025 
 1598              		.section	.rodata.create_file.str1.4,"aMS",%progbits,1
 1599              		.align	2
 1600              	.LC21:
 1601 0000 63616E6E 		.ascii	"cannot create file %s\012\000"
 1601      6F742063 
 1601      72656174 
 1601      65206669 
 1601      6C652025 
 1602              		.section	.rodata.delete_file.str1.4,"aMS",%progbits,1
 1603              		.align	2
 1604              	.LC22:
 1605 0000 63616E6E 		.ascii	"cannot delete file: %s\012\000"
 1605      6F742064 
 1605      656C6574 
 1605      65206669 
 1605      6C653A20 
 1606              	.LC23:
 1607 0018 64656C65 		.ascii	"deleted file: %s\012\000"
 1607      74656420 
 1607      66696C65 
 1607      3A202573 
 1607      0A00
 1608              		.section	.rodata.directory_exist.str1.4,"aMS",%progbits,1
 1609              		.align	2
 1610              	.LC9:
 1611 0000 63616E6E 		.ascii	"cannot get directory path: %s\012\000"
 1611      6F742067 
 1611      65742064 
ARM GAS  /tmp/ccfnwc1N.s 			page 36


 1611      69726563 
 1611      746F7279 
 1612 001f 00       		.space	1
 1613              	.LC10:
 1614 0020 63616E6E 		.ascii	"cannot change to directory: %s\012\000"
 1614      6F742063 
 1614      68616E67 
 1614      6520746F 
 1614      20646972 
 1615              		.section	.rodata.get_full_path.str1.4,"aMS",%progbits,1
 1616              		.align	2
 1617              	.LC5:
 1618 0000 2F257300 		.ascii	"/%s\000"
 1619              	.LC6:
 1620 0004 2F00     		.ascii	"/\000"
 1621 0006 0000     		.space	2
 1622              	.LC7:
 1623 0008 25732573 		.ascii	"%s%s\000"
 1623      00
 1624 000d 000000   		.space	3
 1625              	.LC8:
 1626 0010 25732F25 		.ascii	"%s/%s\000"
 1626      7300
 1627              		.section	.rodata.list_directory.str1.4,"aMS",%progbits,1
 1628              		.align	2
 1629              	.LC13:
 1630 0000 63616E6E 		.ascii	"cannot open directory: %s\012\000"
 1630      6F74206F 
 1630      70656E20 
 1630      64697265 
 1630      63746F72 
 1631 001b 00       		.space	1
 1632              	.LC14:
 1633 001c 2B2F00   		.ascii	"+/\000"
 1634 001f 00       		.space	1
 1635              	.LC15:
 1636 0020 2B722C73 		.ascii	"+r,s%lu\000"
 1636      256C7500 
 1637              	.LC16:
 1638 0028 2C0900   		.ascii	",\011\000"
 1639 002b 00       		.space	1
 1640              	.LC17:
 1641 002c 0D0A00   		.ascii	"\015\012\000"
 1642 002f 00       		.space	1
 1643              	.LC18:
 1644 0030 64697265 		.ascii	"directory list, success\012\000"
 1644      63746F72 
 1644      79206C69 
 1644      73742C20 
 1644      73756363 
 1645              		.section	.rodata.list_directory_part.str1.4,"aMS",%progbits,1
 1646              		.align	2
 1647              	.LC19:
 1648 0000 64697265 		.ascii	"directory list, success\000"
 1648      63746F72 
 1648      79206C69 
 1648      73742C20 
ARM GAS  /tmp/ccfnwc1N.s 			page 37


 1648      73756363 
 1649              		.section	.rodata.mount_usb.str1.4,"aMS",%progbits,1
 1650              		.align	2
 1651              	.LC0:
 1652 0000 00       		.ascii	"\000"
 1653 0001 000000   		.space	3
 1654              	.LC1:
 1655 0004 75736220 		.ascii	"usb mount error\015\012\000"
 1655      6D6F756E 
 1655      74206572 
 1655      726F720D 
 1655      0A00
 1656 0016 0000     		.space	2
 1657              	.LC2:
 1658 0018 6D6F756E 		.ascii	"mounted USB\015\012\000"
 1658      74656420 
 1658      5553420D 
 1658      0A00
 1659              		.section	.rodata.open_file.str1.4,"aMS",%progbits,1
 1660              		.align	2
 1661              	.LC20:
 1662 0000 63616E6E 		.ascii	"cannot open file %s\012\000"
 1662      6F74206F 
 1662      70656E20 
 1662      66696C65 
 1662      2025730A 
 1663              		.section	.rodata.read_file.str1.4,"aMS",%progbits,1
 1664              		.align	2
 1665              	.LC25:
 1666 0000 72656164 		.ascii	"read file error\012\000"
 1666      2066696C 
 1666      65206572 
 1666      726F720A 
 1666      00
 1667              		.section	.rodata.unmount_usb.str1.4,"aMS",%progbits,1
 1668              		.align	2
 1669              	.LC3:
 1670 0000 75736220 		.ascii	"usb unmount error\015\012\000"
 1670      756E6D6F 
 1670      756E7420 
 1670      6572726F 
 1670      720D0A00 
 1671              	.LC4:
 1672 0014 756E6D6F 		.ascii	"unmounted USB\015\012\000"
 1672      756E7465 
 1672      64205553 
 1672      420D0A00 
 1673              		.section	.rodata.write_to_file.str1.4,"aMS",%progbits,1
 1674              		.align	2
 1675              	.LC24:
 1676 0000 77726974 		.ascii	"write to file error\012\000"
 1676      6520746F 
 1676      2066696C 
 1676      65206572 
 1676      726F720A 
 1677              		.text
 1678              	.Letext0:
ARM GAS  /tmp/ccfnwc1N.s 			page 38


 1679              		.file 2 "Middlewares/Third_Party/FatFs/src/integer.h"
 1680              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1681              		.file 4 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1682              		.file 5 "Drivers/CMSIS/Include/core_cm7.h"
 1683              		.file 6 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 1684              		.file 7 "/usr/arm-none-eabi/include/sys/lock.h"
 1685              		.file 8 "/usr/arm-none-eabi/include/sys/_types.h"
 1686              		.file 9 "/usr/lib/gcc/arm-none-eabi/7.1.0/include/stddef.h"
 1687              		.file 10 "/usr/arm-none-eabi/include/sys/reent.h"
 1688              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 1689              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 1690              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/semphr.h"
 1691              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 1692              		.file 15 "/usr/arm-none-eabi/include/stdlib.h"
 1693              		.file 16 "Middlewares/ST/STM32_USB_Host_Library/Core/Inc/usbh_def.h"
 1694              		.file 17 "Middlewares/ST/STM32_USB_Host_Library/Core/Inc/usbh_ctlreq.h"
 1695              		.file 18 "Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc/usbh_msc.h"
 1696              		.file 19 "Middlewares/Third_Party/FatFs/src/ff.h"
 1697              		.file 20 "Middlewares/Third_Party/FatFs/src/diskio.h"
 1698              		.file 21 "Middlewares/Third_Party/FatFs/src/ff_gen_drv.h"
 1699              		.file 22 "Inc/usbh_diskio.h"
 1700              		.file 23 "Inc/fatfs.h"
 1701              		.file 24 "Inc/usb_host.h"
 1702              		.file 25 "Middlewares/ST/STM32_USB_Host_Library/Core/Inc/usbh_core.h"
 1703              		.file 26 "/usr/arm-none-eabi/include/string.h"
 1704              		.file 27 "<built-in>"
 1705              		.file 28 "/usr/arm-none-eabi/include/stdio.h"
 1706              		.file 29 "Inc/memory_access.h"
ARM GAS  /tmp/ccfnwc1N.s 			page 39


DEFINED SYMBOLS
                            *ABS*:0000000000000000 memory_access.c
     /tmp/ccfnwc1N.s:18     .text.mount_usb:0000000000000000 $t
     /tmp/ccfnwc1N.s:25     .text.mount_usb:0000000000000000 mount_usb
     /tmp/ccfnwc1N.s:65     .text.mount_usb:0000000000000024 $d
                            *COM*:0000000000000234 fs
     /tmp/ccfnwc1N.s:74     .text.unmount_usb:0000000000000000 $t
     /tmp/ccfnwc1N.s:81     .text.unmount_usb:0000000000000000 unmount_usb
     /tmp/ccfnwc1N.s:120    .text.unmount_usb:0000000000000024 $d
     /tmp/ccfnwc1N.s:128    .text.is_full_path:0000000000000000 $t
     /tmp/ccfnwc1N.s:135    .text.is_full_path:0000000000000000 is_full_path
     /tmp/ccfnwc1N.s:162    .text.get_full_path:0000000000000000 $t
     /tmp/ccfnwc1N.s:169    .text.get_full_path:0000000000000000 get_full_path
     /tmp/ccfnwc1N.s:325    .text.get_full_path:00000000000000c0 $d
     /tmp/ccfnwc1N.s:334    .text.get_final_path:0000000000000000 $t
     /tmp/ccfnwc1N.s:341    .text.get_final_path:0000000000000000 get_final_path
     /tmp/ccfnwc1N.s:395    .text.get_final_path:0000000000000030 $d
     /tmp/ccfnwc1N.s:401    .text.get_final_path_2:0000000000000000 $t
     /tmp/ccfnwc1N.s:408    .text.get_final_path_2:0000000000000000 get_final_path_2
     /tmp/ccfnwc1N.s:446    .text.directory_exist:0000000000000000 $t
     /tmp/ccfnwc1N.s:453    .text.directory_exist:0000000000000000 directory_exist
     /tmp/ccfnwc1N.s:527    .text.directory_exist:0000000000000044 $d
     /tmp/ccfnwc1N.s:534    .text.change_directory:0000000000000000 $t
     /tmp/ccfnwc1N.s:541    .text.change_directory:0000000000000000 change_directory
     /tmp/ccfnwc1N.s:630    .text.change_directory:0000000000000054 $d
     /tmp/ccfnwc1N.s:638    .text.list_directory:0000000000000000 $t
     /tmp/ccfnwc1N.s:645    .text.list_directory:0000000000000000 list_directory
     /tmp/ccfnwc1N.s:785    .text.list_directory:00000000000000b8 $d
     /tmp/ccfnwc1N.s:795    .text.open_dir:0000000000000000 $t
     /tmp/ccfnwc1N.s:802    .text.open_dir:0000000000000000 open_dir
     /tmp/ccfnwc1N.s:866    .text.open_dir:0000000000000038 $d
     /tmp/ccfnwc1N.s:872    .text.close_dir:0000000000000000 $t
     /tmp/ccfnwc1N.s:879    .text.close_dir:0000000000000000 close_dir
     /tmp/ccfnwc1N.s:901    .text.list_directory_part:0000000000000000 $t
     /tmp/ccfnwc1N.s:908    .text.list_directory_part:0000000000000000 list_directory_part
     /tmp/ccfnwc1N.s:1019   .text.list_directory_part:000000000000008c $d
     /tmp/ccfnwc1N.s:1028   .text.open_file:0000000000000000 $t
     /tmp/ccfnwc1N.s:1035   .text.open_file:0000000000000000 open_file
     /tmp/ccfnwc1N.s:1103   .text.open_file:0000000000000040 $d
     /tmp/ccfnwc1N.s:1109   .text.create_file:0000000000000000 $t
     /tmp/ccfnwc1N.s:1116   .text.create_file:0000000000000000 create_file
     /tmp/ccfnwc1N.s:1184   .text.create_file:0000000000000040 $d
     /tmp/ccfnwc1N.s:1190   .text.close_file:0000000000000000 $t
     /tmp/ccfnwc1N.s:1197   .text.close_file:0000000000000000 close_file
     /tmp/ccfnwc1N.s:1218   .text.delete_file:0000000000000000 $t
     /tmp/ccfnwc1N.s:1225   .text.delete_file:0000000000000000 delete_file
     /tmp/ccfnwc1N.s:1294   .text.delete_file:0000000000000040 $d
     /tmp/ccfnwc1N.s:1301   .text.create_dir:0000000000000000 $t
     /tmp/ccfnwc1N.s:1308   .text.create_dir:0000000000000000 create_dir
     /tmp/ccfnwc1N.s:1376   .text.create_dir:0000000000000038 $d
     /tmp/ccfnwc1N.s:1382   .text.write_to_file:0000000000000000 $t
     /tmp/ccfnwc1N.s:1389   .text.write_to_file:0000000000000000 write_to_file
     /tmp/ccfnwc1N.s:1432   .text.write_to_file:0000000000000020 $d
     /tmp/ccfnwc1N.s:1438   .text.read_file:0000000000000000 $t
     /tmp/ccfnwc1N.s:1445   .text.read_file:0000000000000000 read_file
     /tmp/ccfnwc1N.s:1488   .text.read_file:0000000000000020 $d
     /tmp/ccfnwc1N.s:1494   .text.USB_Process:0000000000000000 $t
ARM GAS  /tmp/ccfnwc1N.s 			page 40


     /tmp/ccfnwc1N.s:1501   .text.USB_Process:0000000000000000 USB_Process
     /tmp/ccfnwc1N.s:1568   .text.USB_Process:0000000000000040 $d
     /tmp/ccfnwc1N.s:1579   .rodata.USB_Process.str1.4:0000000000000000 $d
     /tmp/ccfnwc1N.s:1592   .rodata.change_directory.str1.4:0000000000000000 $d
     /tmp/ccfnwc1N.s:1599   .rodata.create_file.str1.4:0000000000000000 $d
     /tmp/ccfnwc1N.s:1603   .rodata.delete_file.str1.4:0000000000000000 $d
     /tmp/ccfnwc1N.s:1609   .rodata.directory_exist.str1.4:0000000000000000 $d
     /tmp/ccfnwc1N.s:1616   .rodata.get_full_path.str1.4:0000000000000000 $d
     /tmp/ccfnwc1N.s:1628   .rodata.list_directory.str1.4:0000000000000000 $d
     /tmp/ccfnwc1N.s:1646   .rodata.list_directory_part.str1.4:0000000000000000 $d
     /tmp/ccfnwc1N.s:1650   .rodata.mount_usb.str1.4:0000000000000000 $d
     /tmp/ccfnwc1N.s:1660   .rodata.open_file.str1.4:0000000000000000 $d
     /tmp/ccfnwc1N.s:1664   .rodata.read_file.str1.4:0000000000000000 $d
     /tmp/ccfnwc1N.s:1668   .rodata.unmount_usb.str1.4:0000000000000000 $d
     /tmp/ccfnwc1N.s:1674   .rodata.write_to_file.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
f_mount
xprintf
strlen
strcpy
sprintf
strcmp
f_opendir
f_closedir
f_mkdir
strcat
f_readdir
puts
f_open
f_close
f_unlink
f_write
f_read
USBH_Process
hUsbHostFS
